var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var require_index_001 = __commonJS({
  "assets/index-BUcW4xvJ.js"(exports, module) {
    (function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node of mutation.addedNodes) {
            if (node.tagName === "LINK" && node.rel === "modulepreload")
              processPreload(node);
          }
        }
      }).observe(document, { childList: true, subtree: true });
      function getFetchOpts(link) {
        const fetchOpts = {};
        if (link.integrity) fetchOpts.integrity = link.integrity;
        if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
        if (link.crossOrigin === "use-credentials")
          fetchOpts.credentials = "include";
        else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
        else fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link) {
        if (link.ep)
          return;
        link.ep = true;
        const fetchOpts = getFetchOpts(link);
        fetch(link.href, fetchOpts);
      }
    })();
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x2) {
      return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
    }
    var jsxRuntime = { exports: {} };
    var reactJsxRuntime_production_min = {};
    var react = { exports: {} };
    var react_production_min = {};
    /**
     * @license React
     * react.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var l$1 = Symbol.for("react.element"), n$1 = Symbol.for("react.portal"), p$2 = Symbol.for("react.fragment"), q$1 = Symbol.for("react.strict_mode"), r = Symbol.for("react.profiler"), t = Symbol.for("react.provider"), u = Symbol.for("react.context"), v$1 = Symbol.for("react.forward_ref"), w = Symbol.for("react.suspense"), x = Symbol.for("react.memo"), y = Symbol.for("react.lazy"), z$2 = Symbol.iterator;
    function A$1(a) {
      if (null === a || "object" !== typeof a) return null;
      a = z$2 && a[z$2] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var B$1 = { isMounted: function() {
      return false;
    }, enqueueForceUpdate: function() {
    }, enqueueReplaceState: function() {
    }, enqueueSetState: function() {
    } }, C$1 = Object.assign, D$1 = {};
    function E$1(a, b, e) {
      this.props = a;
      this.context = b;
      this.refs = D$1;
      this.updater = e || B$1;
    }
    E$1.prototype.isReactComponent = {};
    E$1.prototype.setState = function(a, b) {
      if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
      this.updater.enqueueSetState(this, a, b, "setState");
    };
    E$1.prototype.forceUpdate = function(a) {
      this.updater.enqueueForceUpdate(this, a, "forceUpdate");
    };
    function F() {
    }
    F.prototype = E$1.prototype;
    function G$1(a, b, e) {
      this.props = a;
      this.context = b;
      this.refs = D$1;
      this.updater = e || B$1;
    }
    var H$1 = G$1.prototype = new F();
    H$1.constructor = G$1;
    C$1(H$1, E$1.prototype);
    H$1.isPureReactComponent = true;
    var I$1 = Array.isArray, J = Object.prototype.hasOwnProperty, K$1 = { current: null }, L$1 = { key: true, ref: true, __self: true, __source: true };
    function M$1(a, b, e) {
      var d, c = {}, k2 = null, h = null;
      if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k2 = "" + b.key), b) J.call(b, d) && !L$1.hasOwnProperty(d) && (c[d] = b[d]);
      var g = arguments.length - 2;
      if (1 === g) c.children = e;
      else if (1 < g) {
        for (var f2 = Array(g), m2 = 0; m2 < g; m2++) f2[m2] = arguments[m2 + 2];
        c.children = f2;
      }
      if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
      return { $$typeof: l$1, type: a, key: k2, ref: h, props: c, _owner: K$1.current };
    }
    function N$1(a, b) {
      return { $$typeof: l$1, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
    }
    function O$1(a) {
      return "object" === typeof a && null !== a && a.$$typeof === l$1;
    }
    function escape(a) {
      var b = { "=": "=0", ":": "=2" };
      return "$" + a.replace(/[=:]/g, function(a2) {
        return b[a2];
      });
    }
    var P$1 = /\/+/g;
    function Q$1(a, b) {
      return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
    }
    function R$1(a, b, e, d, c) {
      var k2 = typeof a;
      if ("undefined" === k2 || "boolean" === k2) a = null;
      var h = false;
      if (null === a) h = true;
      else switch (k2) {
        case "string":
        case "number":
          h = true;
          break;
        case "object":
          switch (a.$$typeof) {
            case l$1:
            case n$1:
              h = true;
          }
      }
      if (h) return h = a, c = c(h), a = "" === d ? "." + Q$1(h, 0) : d, I$1(c) ? (e = "", null != a && (e = a.replace(P$1, "$&/") + "/"), R$1(c, b, e, "", function(a2) {
        return a2;
      })) : null != c && (O$1(c) && (c = N$1(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P$1, "$&/") + "/") + a)), b.push(c)), 1;
      h = 0;
      d = "" === d ? "." : d + ":";
      if (I$1(a)) for (var g = 0; g < a.length; g++) {
        k2 = a[g];
        var f2 = d + Q$1(k2, g);
        h += R$1(k2, b, e, f2, c);
      }
      else if (f2 = A$1(a), "function" === typeof f2) for (a = f2.call(a), g = 0; !(k2 = a.next()).done; ) k2 = k2.value, f2 = d + Q$1(k2, g++), h += R$1(k2, b, e, f2, c);
      else if ("object" === k2) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
      return h;
    }
    function S$1(a, b, e) {
      if (null == a) return a;
      var d = [], c = 0;
      R$1(a, d, "", "", function(a2) {
        return b.call(e, a2, c++);
      });
      return d;
    }
    function T$1(a) {
      if (-1 === a._status) {
        var b = a._result;
        b = b();
        b.then(function(b2) {
          if (0 === a._status || -1 === a._status) a._status = 1, a._result = b2;
        }, function(b2) {
          if (0 === a._status || -1 === a._status) a._status = 2, a._result = b2;
        });
        -1 === a._status && (a._status = 0, a._result = b);
      }
      if (1 === a._status) return a._result.default;
      throw a._result;
    }
    var U$1 = { current: null }, V$1 = { transition: null }, W$1 = { ReactCurrentDispatcher: U$1, ReactCurrentBatchConfig: V$1, ReactCurrentOwner: K$1 };
    function X$1() {
      throw Error("act(...) is not supported in production builds of React.");
    }
    react_production_min.Children = { map: S$1, forEach: function(a, b, e) {
      S$1(a, function() {
        b.apply(this, arguments);
      }, e);
    }, count: function(a) {
      var b = 0;
      S$1(a, function() {
        b++;
      });
      return b;
    }, toArray: function(a) {
      return S$1(a, function(a2) {
        return a2;
      }) || [];
    }, only: function(a) {
      if (!O$1(a)) throw Error("React.Children.only expected to receive a single React element child.");
      return a;
    } };
    react_production_min.Component = E$1;
    react_production_min.Fragment = p$2;
    react_production_min.Profiler = r;
    react_production_min.PureComponent = G$1;
    react_production_min.StrictMode = q$1;
    react_production_min.Suspense = w;
    react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W$1;
    react_production_min.act = X$1;
    react_production_min.cloneElement = function(a, b, e) {
      if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
      var d = C$1({}, a.props), c = a.key, k2 = a.ref, h = a._owner;
      if (null != b) {
        void 0 !== b.ref && (k2 = b.ref, h = K$1.current);
        void 0 !== b.key && (c = "" + b.key);
        if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
        for (f2 in b) J.call(b, f2) && !L$1.hasOwnProperty(f2) && (d[f2] = void 0 === b[f2] && void 0 !== g ? g[f2] : b[f2]);
      }
      var f2 = arguments.length - 2;
      if (1 === f2) d.children = e;
      else if (1 < f2) {
        g = Array(f2);
        for (var m2 = 0; m2 < f2; m2++) g[m2] = arguments[m2 + 2];
        d.children = g;
      }
      return { $$typeof: l$1, type: a.type, key: c, ref: k2, props: d, _owner: h };
    };
    react_production_min.createContext = function(a) {
      a = { $$typeof: u, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
      a.Provider = { $$typeof: t, _context: a };
      return a.Consumer = a;
    };
    react_production_min.createElement = M$1;
    react_production_min.createFactory = function(a) {
      var b = M$1.bind(null, a);
      b.type = a;
      return b;
    };
    react_production_min.createRef = function() {
      return { current: null };
    };
    react_production_min.forwardRef = function(a) {
      return { $$typeof: v$1, render: a };
    };
    react_production_min.isValidElement = O$1;
    react_production_min.lazy = function(a) {
      return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T$1 };
    };
    react_production_min.memo = function(a, b) {
      return { $$typeof: x, type: a, compare: void 0 === b ? null : b };
    };
    react_production_min.startTransition = function(a) {
      var b = V$1.transition;
      V$1.transition = {};
      try {
        a();
      } finally {
        V$1.transition = b;
      }
    };
    react_production_min.unstable_act = X$1;
    react_production_min.useCallback = function(a, b) {
      return U$1.current.useCallback(a, b);
    };
    react_production_min.useContext = function(a) {
      return U$1.current.useContext(a);
    };
    react_production_min.useDebugValue = function() {
    };
    react_production_min.useDeferredValue = function(a) {
      return U$1.current.useDeferredValue(a);
    };
    react_production_min.useEffect = function(a, b) {
      return U$1.current.useEffect(a, b);
    };
    react_production_min.useId = function() {
      return U$1.current.useId();
    };
    react_production_min.useImperativeHandle = function(a, b, e) {
      return U$1.current.useImperativeHandle(a, b, e);
    };
    react_production_min.useInsertionEffect = function(a, b) {
      return U$1.current.useInsertionEffect(a, b);
    };
    react_production_min.useLayoutEffect = function(a, b) {
      return U$1.current.useLayoutEffect(a, b);
    };
    react_production_min.useMemo = function(a, b) {
      return U$1.current.useMemo(a, b);
    };
    react_production_min.useReducer = function(a, b, e) {
      return U$1.current.useReducer(a, b, e);
    };
    react_production_min.useRef = function(a) {
      return U$1.current.useRef(a);
    };
    react_production_min.useState = function(a) {
      return U$1.current.useState(a);
    };
    react_production_min.useSyncExternalStore = function(a, b, e) {
      return U$1.current.useSyncExternalStore(a, b, e);
    };
    react_production_min.useTransition = function() {
      return U$1.current.useTransition();
    };
    react_production_min.version = "18.3.1";
    {
      react.exports = react_production_min;
    }
    var reactExports = react.exports;
    /**
     * @license React
     * react-jsx-runtime.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var f = reactExports, k = Symbol.for("react.element"), l = Symbol.for("react.fragment"), m$1 = Object.prototype.hasOwnProperty, n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, p$1 = { key: true, ref: true, __self: true, __source: true };
    function q(c, a, g) {
      var b, d = {}, e = null, h = null;
      void 0 !== g && (e = "" + g);
      void 0 !== a.key && (e = "" + a.key);
      void 0 !== a.ref && (h = a.ref);
      for (b in a) m$1.call(a, b) && !p$1.hasOwnProperty(b) && (d[b] = a[b]);
      if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
      return { $$typeof: k, type: c, key: e, ref: h, props: d, _owner: n.current };
    }
    reactJsxRuntime_production_min.Fragment = l;
    reactJsxRuntime_production_min.jsx = q;
    reactJsxRuntime_production_min.jsxs = q;
    {
      jsxRuntime.exports = reactJsxRuntime_production_min;
    }
    var jsxRuntimeExports = jsxRuntime.exports;
    var reactDom = { exports: {} };
    var reactDom_production_min = {};
    var scheduler = { exports: {} };
    var scheduler_production_min = {};
    /**
     * @license React
     * scheduler.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    (function(exports2) {
      function f2(a, b) {
        var c = a.length;
        a.push(b);
        a: for (; 0 < c; ) {
          var d = c - 1 >>> 1, e = a[d];
          if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;
          else break a;
        }
      }
      function h(a) {
        return 0 === a.length ? null : a[0];
      }
      function k2(a) {
        if (0 === a.length) return null;
        var b = a[0], c = a.pop();
        if (c !== b) {
          a[0] = c;
          a: for (var d = 0, e = a.length, w2 = e >>> 1; d < w2; ) {
            var m2 = 2 * (d + 1) - 1, C2 = a[m2], n2 = m2 + 1, x2 = a[n2];
            if (0 > g(C2, c)) n2 < e && 0 > g(x2, C2) ? (a[d] = x2, a[n2] = c, d = n2) : (a[d] = C2, a[m2] = c, d = m2);
            else if (n2 < e && 0 > g(x2, c)) a[d] = x2, a[n2] = c, d = n2;
            else break a;
          }
        }
        return b;
      }
      function g(a, b) {
        var c = a.sortIndex - b.sortIndex;
        return 0 !== c ? c : a.id - b.id;
      }
      if ("object" === typeof performance && "function" === typeof performance.now) {
        var l2 = performance;
        exports2.unstable_now = function() {
          return l2.now();
        };
      } else {
        var p2 = Date, q2 = p2.now();
        exports2.unstable_now = function() {
          return p2.now() - q2;
        };
      }
      var r2 = [], t2 = [], u2 = 1, v2 = null, y2 = 3, z2 = false, A2 = false, B2 = false, D2 = "function" === typeof setTimeout ? setTimeout : null, E2 = "function" === typeof clearTimeout ? clearTimeout : null, F2 = "undefined" !== typeof setImmediate ? setImmediate : null;
      "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function G2(a) {
        for (var b = h(t2); null !== b; ) {
          if (null === b.callback) k2(t2);
          else if (b.startTime <= a) k2(t2), b.sortIndex = b.expirationTime, f2(r2, b);
          else break;
          b = h(t2);
        }
      }
      function H2(a) {
        B2 = false;
        G2(a);
        if (!A2) if (null !== h(r2)) A2 = true, I2(J2);
        else {
          var b = h(t2);
          null !== b && K2(H2, b.startTime - a);
        }
      }
      function J2(a, b) {
        A2 = false;
        B2 && (B2 = false, E2(L2), L2 = -1);
        z2 = true;
        var c = y2;
        try {
          G2(b);
          for (v2 = h(r2); null !== v2 && (!(v2.expirationTime > b) || a && !M2()); ) {
            var d = v2.callback;
            if ("function" === typeof d) {
              v2.callback = null;
              y2 = v2.priorityLevel;
              var e = d(v2.expirationTime <= b);
              b = exports2.unstable_now();
              "function" === typeof e ? v2.callback = e : v2 === h(r2) && k2(r2);
              G2(b);
            } else k2(r2);
            v2 = h(r2);
          }
          if (null !== v2) var w2 = true;
          else {
            var m2 = h(t2);
            null !== m2 && K2(H2, m2.startTime - b);
            w2 = false;
          }
          return w2;
        } finally {
          v2 = null, y2 = c, z2 = false;
        }
      }
      var N2 = false, O2 = null, L2 = -1, P2 = 5, Q2 = -1;
      function M2() {
        return exports2.unstable_now() - Q2 < P2 ? false : true;
      }
      function R2() {
        if (null !== O2) {
          var a = exports2.unstable_now();
          Q2 = a;
          var b = true;
          try {
            b = O2(true, a);
          } finally {
            b ? S2() : (N2 = false, O2 = null);
          }
        } else N2 = false;
      }
      var S2;
      if ("function" === typeof F2) S2 = function() {
        F2(R2);
      };
      else if ("undefined" !== typeof MessageChannel) {
        var T2 = new MessageChannel(), U2 = T2.port2;
        T2.port1.onmessage = R2;
        S2 = function() {
          U2.postMessage(null);
        };
      } else S2 = function() {
        D2(R2, 0);
      };
      function I2(a) {
        O2 = a;
        N2 || (N2 = true, S2());
      }
      function K2(a, b) {
        L2 = D2(function() {
          a(exports2.unstable_now());
        }, b);
      }
      exports2.unstable_IdlePriority = 5;
      exports2.unstable_ImmediatePriority = 1;
      exports2.unstable_LowPriority = 4;
      exports2.unstable_NormalPriority = 3;
      exports2.unstable_Profiling = null;
      exports2.unstable_UserBlockingPriority = 2;
      exports2.unstable_cancelCallback = function(a) {
        a.callback = null;
      };
      exports2.unstable_continueExecution = function() {
        A2 || z2 || (A2 = true, I2(J2));
      };
      exports2.unstable_forceFrameRate = function(a) {
        0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a ? Math.floor(1e3 / a) : 5;
      };
      exports2.unstable_getCurrentPriorityLevel = function() {
        return y2;
      };
      exports2.unstable_getFirstCallbackNode = function() {
        return h(r2);
      };
      exports2.unstable_next = function(a) {
        switch (y2) {
          case 1:
          case 2:
          case 3:
            var b = 3;
            break;
          default:
            b = y2;
        }
        var c = y2;
        y2 = b;
        try {
          return a();
        } finally {
          y2 = c;
        }
      };
      exports2.unstable_pauseExecution = function() {
      };
      exports2.unstable_requestPaint = function() {
      };
      exports2.unstable_runWithPriority = function(a, b) {
        switch (a) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a = 3;
        }
        var c = y2;
        y2 = a;
        try {
          return b();
        } finally {
          y2 = c;
        }
      };
      exports2.unstable_scheduleCallback = function(a, b, c) {
        var d = exports2.unstable_now();
        "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
        switch (a) {
          case 1:
            var e = -1;
            break;
          case 2:
            e = 250;
            break;
          case 5:
            e = 1073741823;
            break;
          case 4:
            e = 1e4;
            break;
          default:
            e = 5e3;
        }
        e = c + e;
        a = { id: u2++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
        c > d ? (a.sortIndex = c, f2(t2, a), null === h(r2) && a === h(t2) && (B2 ? (E2(L2), L2 = -1) : B2 = true, K2(H2, c - d))) : (a.sortIndex = e, f2(r2, a), A2 || z2 || (A2 = true, I2(J2)));
        return a;
      };
      exports2.unstable_shouldYield = M2;
      exports2.unstable_wrapCallback = function(a) {
        var b = y2;
        return function() {
          var c = y2;
          y2 = b;
          try {
            return a.apply(this, arguments);
          } finally {
            y2 = c;
          }
        };
      };
    })(scheduler_production_min);
    {
      scheduler.exports = scheduler_production_min;
    }
    var schedulerExports = scheduler.exports;
    /**
     * @license React
     * react-dom.production.min.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    var aa = reactExports, ca = schedulerExports;
    function p(a) {
      for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
      return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var da = /* @__PURE__ */ new Set(), ea = {};
    function fa(a, b) {
      ha(a, b);
      ha(a + "Capture", b);
    }
    function ha(a, b) {
      ea[a] = b;
      for (a = 0; a < b.length; a++) da.add(b[a]);
    }
    var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement), ja = Object.prototype.hasOwnProperty, ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/, la = {}, ma = {};
    function oa(a) {
      if (ja.call(ma, a)) return true;
      if (ja.call(la, a)) return false;
      if (ka.test(a)) return ma[a] = true;
      la[a] = true;
      return false;
    }
    function pa(a, b, c, d) {
      if (null !== c && 0 === c.type) return false;
      switch (typeof b) {
        case "function":
        case "symbol":
          return true;
        case "boolean":
          if (d) return false;
          if (null !== c) return !c.acceptsBooleans;
          a = a.toLowerCase().slice(0, 5);
          return "data-" !== a && "aria-" !== a;
        default:
          return false;
      }
    }
    function qa(a, b, c, d) {
      if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return true;
      if (d) return false;
      if (null !== c) switch (c.type) {
        case 3:
          return !b;
        case 4:
          return false === b;
        case 5:
          return isNaN(b);
        case 6:
          return isNaN(b) || 1 > b;
      }
      return false;
    }
    function v(a, b, c, d, e, f2, g) {
      this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
      this.attributeName = d;
      this.attributeNamespace = e;
      this.mustUseProperty = c;
      this.propertyName = a;
      this.type = b;
      this.sanitizeURL = f2;
      this.removeEmptyString = g;
    }
    var z$1 = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
      z$1[a] = new v(a, 0, false, a, null, false, false);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
      var b = a[0];
      z$1[b] = new v(b, 1, false, a[1], null, false, false);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
      z$1[a] = new v(a, 2, false, a.toLowerCase(), null, false, false);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
      z$1[a] = new v(a, 2, false, a, null, false, false);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
      z$1[a] = new v(a, 3, false, a.toLowerCase(), null, false, false);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(a) {
      z$1[a] = new v(a, 3, true, a, null, false, false);
    });
    ["capture", "download"].forEach(function(a) {
      z$1[a] = new v(a, 4, false, a, null, false, false);
    });
    ["cols", "rows", "size", "span"].forEach(function(a) {
      z$1[a] = new v(a, 6, false, a, null, false, false);
    });
    ["rowSpan", "start"].forEach(function(a) {
      z$1[a] = new v(a, 5, false, a.toLowerCase(), null, false, false);
    });
    var ra = /[\-:]([a-z])/g;
    function sa(a) {
      return a[1].toUpperCase();
    }
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
      var b = a.replace(
        ra,
        sa
      );
      z$1[b] = new v(b, 1, false, a, null, false, false);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
      var b = a.replace(ra, sa);
      z$1[b] = new v(b, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
      var b = a.replace(ra, sa);
      z$1[b] = new v(b, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
    });
    ["tabIndex", "crossOrigin"].forEach(function(a) {
      z$1[a] = new v(a, 1, false, a.toLowerCase(), null, false, false);
    });
    z$1.xlinkHref = new v("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
    ["src", "href", "action", "formAction"].forEach(function(a) {
      z$1[a] = new v(a, 1, false, a.toLowerCase(), null, true, true);
    });
    function ta(a, b, c, d) {
      var e = z$1.hasOwnProperty(b) ? z$1[b] : null;
      if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? false : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && true === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
    }
    var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, va = Symbol.for("react.element"), wa = Symbol.for("react.portal"), ya = Symbol.for("react.fragment"), za = Symbol.for("react.strict_mode"), Aa = Symbol.for("react.profiler"), Ba = Symbol.for("react.provider"), Ca = Symbol.for("react.context"), Da = Symbol.for("react.forward_ref"), Ea = Symbol.for("react.suspense"), Fa = Symbol.for("react.suspense_list"), Ga = Symbol.for("react.memo"), Ha = Symbol.for("react.lazy");
    var Ia = Symbol.for("react.offscreen");
    var Ja = Symbol.iterator;
    function Ka(a) {
      if (null === a || "object" !== typeof a) return null;
      a = Ja && a[Ja] || a["@@iterator"];
      return "function" === typeof a ? a : null;
    }
    var A = Object.assign, La;
    function Ma(a) {
      if (void 0 === La) try {
        throw Error();
      } catch (c) {
        var b = c.stack.trim().match(/\n( *(at )?)/);
        La = b && b[1] || "";
      }
      return "\n" + La + a;
    }
    var Na = false;
    function Oa(a, b) {
      if (!a || Na) return "";
      Na = true;
      var c = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (b) if (b = function() {
          throw Error();
        }, Object.defineProperty(b.prototype, "props", { set: function() {
          throw Error();
        } }), "object" === typeof Reflect && Reflect.construct) {
          try {
            Reflect.construct(b, []);
          } catch (l2) {
            var d = l2;
          }
          Reflect.construct(a, [], b);
        } else {
          try {
            b.call();
          } catch (l2) {
            d = l2;
          }
          a.call(b.prototype);
        }
        else {
          try {
            throw Error();
          } catch (l2) {
            d = l2;
          }
          a();
        }
      } catch (l2) {
        if (l2 && d && "string" === typeof l2.stack) {
          for (var e = l2.stack.split("\n"), f2 = d.stack.split("\n"), g = e.length - 1, h = f2.length - 1; 1 <= g && 0 <= h && e[g] !== f2[h]; ) h--;
          for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f2[h]) {
            if (1 !== g || 1 !== h) {
              do
                if (g--, h--, 0 > h || e[g] !== f2[h]) {
                  var k2 = "\n" + e[g].replace(" at new ", " at ");
                  a.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a.displayName));
                  return k2;
                }
              while (1 <= g && 0 <= h);
            }
            break;
          }
        }
      } finally {
        Na = false, Error.prepareStackTrace = c;
      }
      return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
    }
    function Pa(a) {
      switch (a.tag) {
        case 5:
          return Ma(a.type);
        case 16:
          return Ma("Lazy");
        case 13:
          return Ma("Suspense");
        case 19:
          return Ma("SuspenseList");
        case 0:
        case 2:
        case 15:
          return a = Oa(a.type, false), a;
        case 11:
          return a = Oa(a.type.render, false), a;
        case 1:
          return a = Oa(a.type, true), a;
        default:
          return "";
      }
    }
    function Qa(a) {
      if (null == a) return null;
      if ("function" === typeof a) return a.displayName || a.name || null;
      if ("string" === typeof a) return a;
      switch (a) {
        case ya:
          return "Fragment";
        case wa:
          return "Portal";
        case Aa:
          return "Profiler";
        case za:
          return "StrictMode";
        case Ea:
          return "Suspense";
        case Fa:
          return "SuspenseList";
      }
      if ("object" === typeof a) switch (a.$$typeof) {
        case Ca:
          return (a.displayName || "Context") + ".Consumer";
        case Ba:
          return (a._context.displayName || "Context") + ".Provider";
        case Da:
          var b = a.render;
          a = a.displayName;
          a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
          return a;
        case Ga:
          return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
        case Ha:
          b = a._payload;
          a = a._init;
          try {
            return Qa(a(b));
          } catch (c) {
          }
      }
      return null;
    }
    function Ra(a) {
      var b = a.type;
      switch (a.tag) {
        case 24:
          return "Cache";
        case 9:
          return (b.displayName || "Context") + ".Consumer";
        case 10:
          return (b._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return b;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return Qa(b);
        case 8:
          return b === za ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if ("function" === typeof b) return b.displayName || b.name || null;
          if ("string" === typeof b) return b;
      }
      return null;
    }
    function Sa(a) {
      switch (typeof a) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return a;
        case "object":
          return a;
        default:
          return "";
      }
    }
    function Ta(a) {
      var b = a.type;
      return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
    }
    function Ua(a) {
      var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
      if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
        var e = c.get, f2 = c.set;
        Object.defineProperty(a, b, { configurable: true, get: function() {
          return e.call(this);
        }, set: function(a2) {
          d = "" + a2;
          f2.call(this, a2);
        } });
        Object.defineProperty(a, b, { enumerable: c.enumerable });
        return { getValue: function() {
          return d;
        }, setValue: function(a2) {
          d = "" + a2;
        }, stopTracking: function() {
          a._valueTracker = null;
          delete a[b];
        } };
      }
    }
    function Va(a) {
      a._valueTracker || (a._valueTracker = Ua(a));
    }
    function Wa(a) {
      if (!a) return false;
      var b = a._valueTracker;
      if (!b) return true;
      var c = b.getValue();
      var d = "";
      a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
      a = d;
      return a !== c ? (b.setValue(a), true) : false;
    }
    function Xa(a) {
      a = a || ("undefined" !== typeof document ? document : void 0);
      if ("undefined" === typeof a) return null;
      try {
        return a.activeElement || a.body;
      } catch (b) {
        return a.body;
      }
    }
    function Ya(a, b) {
      var c = b.checked;
      return A({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
    }
    function Za(a, b) {
      var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
      c = Sa(null != b.value ? b.value : c);
      a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
    }
    function ab(a, b) {
      b = b.checked;
      null != b && ta(a, "checked", b, false);
    }
    function bb(a, b) {
      ab(a, b);
      var c = Sa(b.value), d = b.type;
      if (null != c) if ("number" === d) {
        if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
      } else a.value !== "" + c && (a.value = "" + c);
      else if ("submit" === d || "reset" === d) {
        a.removeAttribute("value");
        return;
      }
      b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
      null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
    }
    function db(a, b, c) {
      if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
        var d = b.type;
        if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
        b = "" + a._wrapperState.initialValue;
        c || b === a.value || (a.value = b);
        a.defaultValue = b;
      }
      c = a.name;
      "" !== c && (a.name = "");
      a.defaultChecked = !!a._wrapperState.initialChecked;
      "" !== c && (a.name = c);
    }
    function cb(a, b, c) {
      if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
    }
    var eb = Array.isArray;
    function fb(a, b, c, d) {
      a = a.options;
      if (b) {
        b = {};
        for (var e = 0; e < c.length; e++) b["$" + c[e]] = true;
        for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
      } else {
        c = "" + Sa(c);
        b = null;
        for (e = 0; e < a.length; e++) {
          if (a[e].value === c) {
            a[e].selected = true;
            d && (a[e].defaultSelected = true);
            return;
          }
          null !== b || a[e].disabled || (b = a[e]);
        }
        null !== b && (b.selected = true);
      }
    }
    function gb(a, b) {
      if (null != b.dangerouslySetInnerHTML) throw Error(p(91));
      return A({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
    }
    function hb(a, b) {
      var c = b.value;
      if (null == c) {
        c = b.children;
        b = b.defaultValue;
        if (null != c) {
          if (null != b) throw Error(p(92));
          if (eb(c)) {
            if (1 < c.length) throw Error(p(93));
            c = c[0];
          }
          b = c;
        }
        null == b && (b = "");
        c = b;
      }
      a._wrapperState = { initialValue: Sa(c) };
    }
    function ib(a, b) {
      var c = Sa(b.value), d = Sa(b.defaultValue);
      null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
      null != d && (a.defaultValue = "" + d);
    }
    function jb(a) {
      var b = a.textContent;
      b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
    }
    function kb(a) {
      switch (a) {
        case "svg":
          return "http://www.w3.org/2000/svg";
        case "math":
          return "http://www.w3.org/1998/Math/MathML";
        default:
          return "http://www.w3.org/1999/xhtml";
      }
    }
    function lb(a, b) {
      return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
    }
    var mb, nb = function(a) {
      return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
        MSApp.execUnsafeLocalFunction(function() {
          return a(b, c, d, e);
        });
      } : a;
    }(function(a, b) {
      if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;
      else {
        mb = mb || document.createElement("div");
        mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
        for (b = mb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
        for (; b.firstChild; ) a.appendChild(b.firstChild);
      }
    });
    function ob(a, b) {
      if (b) {
        var c = a.firstChild;
        if (c && c === a.lastChild && 3 === c.nodeType) {
          c.nodeValue = b;
          return;
        }
      }
      a.textContent = b;
    }
    var pb = {
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    }, qb = ["Webkit", "ms", "Moz", "O"];
    Object.keys(pb).forEach(function(a) {
      qb.forEach(function(b) {
        b = b + a.charAt(0).toUpperCase() + a.substring(1);
        pb[b] = pb[a];
      });
    });
    function rb(a, b, c) {
      return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
    }
    function sb(a, b) {
      a = a.style;
      for (var c in b) if (b.hasOwnProperty(c)) {
        var d = 0 === c.indexOf("--"), e = rb(c, b[c], d);
        "float" === c && (c = "cssFloat");
        d ? a.setProperty(c, e) : a[c] = e;
      }
    }
    var tb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
    function ub(a, b) {
      if (b) {
        if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));
        if (null != b.dangerouslySetInnerHTML) {
          if (null != b.children) throw Error(p(60));
          if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));
        }
        if (null != b.style && "object" !== typeof b.style) throw Error(p(62));
      }
    }
    function vb(a, b) {
      if (-1 === a.indexOf("-")) return "string" === typeof b.is;
      switch (a) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return false;
        default:
          return true;
      }
    }
    var wb = null;
    function xb(a) {
      a = a.target || a.srcElement || window;
      a.correspondingUseElement && (a = a.correspondingUseElement);
      return 3 === a.nodeType ? a.parentNode : a;
    }
    var yb = null, zb = null, Ab = null;
    function Bb(a) {
      if (a = Cb(a)) {
        if ("function" !== typeof yb) throw Error(p(280));
        var b = a.stateNode;
        b && (b = Db(b), yb(a.stateNode, a.type, b));
      }
    }
    function Eb(a) {
      zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
    }
    function Fb() {
      if (zb) {
        var a = zb, b = Ab;
        Ab = zb = null;
        Bb(a);
        if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
      }
    }
    function Gb(a, b) {
      return a(b);
    }
    function Hb() {
    }
    var Ib = false;
    function Jb(a, b, c) {
      if (Ib) return a(b, c);
      Ib = true;
      try {
        return Gb(a, b, c);
      } finally {
        if (Ib = false, null !== zb || null !== Ab) Hb(), Fb();
      }
    }
    function Kb(a, b) {
      var c = a.stateNode;
      if (null === c) return null;
      var d = Db(c);
      if (null === d) return null;
      c = d[b];
      a: switch (b) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
          (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
          a = !d;
          break a;
        default:
          a = false;
      }
      if (a) return null;
      if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));
      return c;
    }
    var Lb = false;
    if (ia) try {
      var Mb = {};
      Object.defineProperty(Mb, "passive", { get: function() {
        Lb = true;
      } });
      window.addEventListener("test", Mb, Mb);
      window.removeEventListener("test", Mb, Mb);
    } catch (a) {
      Lb = false;
    }
    function Nb(a, b, c, d, e, f2, g, h, k2) {
      var l2 = Array.prototype.slice.call(arguments, 3);
      try {
        b.apply(c, l2);
      } catch (m2) {
        this.onError(m2);
      }
    }
    var Ob = false, Pb = null, Qb = false, Rb = null, Sb = { onError: function(a) {
      Ob = true;
      Pb = a;
    } };
    function Tb(a, b, c, d, e, f2, g, h, k2) {
      Ob = false;
      Pb = null;
      Nb.apply(Sb, arguments);
    }
    function Ub(a, b, c, d, e, f2, g, h, k2) {
      Tb.apply(this, arguments);
      if (Ob) {
        if (Ob) {
          var l2 = Pb;
          Ob = false;
          Pb = null;
        } else throw Error(p(198));
        Qb || (Qb = true, Rb = l2);
      }
    }
    function Vb(a) {
      var b = a, c = a;
      if (a.alternate) for (; b.return; ) b = b.return;
      else {
        a = b;
        do
          b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
        while (a);
      }
      return 3 === b.tag ? c : null;
    }
    function Wb(a) {
      if (13 === a.tag) {
        var b = a.memoizedState;
        null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
        if (null !== b) return b.dehydrated;
      }
      return null;
    }
    function Xb(a) {
      if (Vb(a) !== a) throw Error(p(188));
    }
    function Yb(a) {
      var b = a.alternate;
      if (!b) {
        b = Vb(a);
        if (null === b) throw Error(p(188));
        return b !== a ? null : a;
      }
      for (var c = a, d = b; ; ) {
        var e = c.return;
        if (null === e) break;
        var f2 = e.alternate;
        if (null === f2) {
          d = e.return;
          if (null !== d) {
            c = d;
            continue;
          }
          break;
        }
        if (e.child === f2.child) {
          for (f2 = e.child; f2; ) {
            if (f2 === c) return Xb(e), a;
            if (f2 === d) return Xb(e), b;
            f2 = f2.sibling;
          }
          throw Error(p(188));
        }
        if (c.return !== d.return) c = e, d = f2;
        else {
          for (var g = false, h = e.child; h; ) {
            if (h === c) {
              g = true;
              c = e;
              d = f2;
              break;
            }
            if (h === d) {
              g = true;
              d = e;
              c = f2;
              break;
            }
            h = h.sibling;
          }
          if (!g) {
            for (h = f2.child; h; ) {
              if (h === c) {
                g = true;
                c = f2;
                d = e;
                break;
              }
              if (h === d) {
                g = true;
                d = f2;
                c = e;
                break;
              }
              h = h.sibling;
            }
            if (!g) throw Error(p(189));
          }
        }
        if (c.alternate !== d) throw Error(p(190));
      }
      if (3 !== c.tag) throw Error(p(188));
      return c.stateNode.current === c ? a : b;
    }
    function Zb(a) {
      a = Yb(a);
      return null !== a ? $b(a) : null;
    }
    function $b(a) {
      if (5 === a.tag || 6 === a.tag) return a;
      for (a = a.child; null !== a; ) {
        var b = $b(a);
        if (null !== b) return b;
        a = a.sibling;
      }
      return null;
    }
    var ac = ca.unstable_scheduleCallback, bc = ca.unstable_cancelCallback, cc = ca.unstable_shouldYield, dc = ca.unstable_requestPaint, B = ca.unstable_now, ec = ca.unstable_getCurrentPriorityLevel, fc = ca.unstable_ImmediatePriority, gc = ca.unstable_UserBlockingPriority, hc = ca.unstable_NormalPriority, ic = ca.unstable_LowPriority, jc = ca.unstable_IdlePriority, kc = null, lc = null;
    function mc(a) {
      if (lc && "function" === typeof lc.onCommitFiberRoot) try {
        lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
      } catch (b) {
      }
    }
    var oc = Math.clz32 ? Math.clz32 : nc, pc = Math.log, qc = Math.LN2;
    function nc(a) {
      a >>>= 0;
      return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
    }
    var rc = 64, sc = 4194304;
    function tc(a) {
      switch (a & -a) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return a & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return a & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return a;
      }
    }
    function uc(a, b) {
      var c = a.pendingLanes;
      if (0 === c) return 0;
      var d = 0, e = a.suspendedLanes, f2 = a.pingedLanes, g = c & 268435455;
      if (0 !== g) {
        var h = g & ~e;
        0 !== h ? d = tc(h) : (f2 &= g, 0 !== f2 && (d = tc(f2)));
      } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f2 && (d = tc(f2));
      if (0 === d) return 0;
      if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f2 = b & -b, e >= f2 || 16 === e && 0 !== (f2 & 4194240))) return b;
      0 !== (d & 4) && (d |= c & 16);
      b = a.entangledLanes;
      if (0 !== b) for (a = a.entanglements, b &= d; 0 < b; ) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
      return d;
    }
    function vc(a, b) {
      switch (a) {
        case 1:
        case 2:
        case 4:
          return b + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return b + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function wc(a, b) {
      for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f2 = a.pendingLanes; 0 < f2; ) {
        var g = 31 - oc(f2), h = 1 << g, k2 = e[g];
        if (-1 === k2) {
          if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
        } else k2 <= b && (a.expiredLanes |= h);
        f2 &= ~h;
      }
    }
    function xc(a) {
      a = a.pendingLanes & -1073741825;
      return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
    }
    function yc() {
      var a = rc;
      rc <<= 1;
      0 === (rc & 4194240) && (rc = 64);
      return a;
    }
    function zc(a) {
      for (var b = [], c = 0; 31 > c; c++) b.push(a);
      return b;
    }
    function Ac(a, b, c) {
      a.pendingLanes |= b;
      536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
      a = a.eventTimes;
      b = 31 - oc(b);
      a[b] = c;
    }
    function Bc(a, b) {
      var c = a.pendingLanes & ~b;
      a.pendingLanes = b;
      a.suspendedLanes = 0;
      a.pingedLanes = 0;
      a.expiredLanes &= b;
      a.mutableReadLanes &= b;
      a.entangledLanes &= b;
      b = a.entanglements;
      var d = a.eventTimes;
      for (a = a.expirationTimes; 0 < c; ) {
        var e = 31 - oc(c), f2 = 1 << e;
        b[e] = 0;
        d[e] = -1;
        a[e] = -1;
        c &= ~f2;
      }
    }
    function Cc(a, b) {
      var c = a.entangledLanes |= b;
      for (a = a.entanglements; c; ) {
        var d = 31 - oc(c), e = 1 << d;
        e & b | a[d] & b && (a[d] |= b);
        c &= ~e;
      }
    }
    var C = 0;
    function Dc(a) {
      a &= -a;
      return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
    }
    var Ec, Fc, Gc, Hc, Ic, Jc = false, Kc = [], Lc = null, Mc = null, Nc = null, Oc = /* @__PURE__ */ new Map(), Pc = /* @__PURE__ */ new Map(), Qc = [], Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
    function Sc(a, b) {
      switch (a) {
        case "focusin":
        case "focusout":
          Lc = null;
          break;
        case "dragenter":
        case "dragleave":
          Mc = null;
          break;
        case "mouseover":
        case "mouseout":
          Nc = null;
          break;
        case "pointerover":
        case "pointerout":
          Oc.delete(b.pointerId);
          break;
        case "gotpointercapture":
        case "lostpointercapture":
          Pc.delete(b.pointerId);
      }
    }
    function Tc(a, b, c, d, e, f2) {
      if (null === a || a.nativeEvent !== f2) return a = { blockedOn: b, domEventName: c, eventSystemFlags: d, nativeEvent: f2, targetContainers: [e] }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
      a.eventSystemFlags |= d;
      b = a.targetContainers;
      null !== e && -1 === b.indexOf(e) && b.push(e);
      return a;
    }
    function Uc(a, b, c, d, e) {
      switch (b) {
        case "focusin":
          return Lc = Tc(Lc, a, b, c, d, e), true;
        case "dragenter":
          return Mc = Tc(Mc, a, b, c, d, e), true;
        case "mouseover":
          return Nc = Tc(Nc, a, b, c, d, e), true;
        case "pointerover":
          var f2 = e.pointerId;
          Oc.set(f2, Tc(Oc.get(f2) || null, a, b, c, d, e));
          return true;
        case "gotpointercapture":
          return f2 = e.pointerId, Pc.set(f2, Tc(Pc.get(f2) || null, a, b, c, d, e)), true;
      }
      return false;
    }
    function Vc(a) {
      var b = Wc(a.target);
      if (null !== b) {
        var c = Vb(b);
        if (null !== c) {
          if (b = c.tag, 13 === b) {
            if (b = Wb(c), null !== b) {
              a.blockedOn = b;
              Ic(a.priority, function() {
                Gc(c);
              });
              return;
            }
          } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
            a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
            return;
          }
        }
      }
      a.blockedOn = null;
    }
    function Xc(a) {
      if (null !== a.blockedOn) return false;
      for (var b = a.targetContainers; 0 < b.length; ) {
        var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
        if (null === c) {
          c = a.nativeEvent;
          var d = new c.constructor(c.type, c);
          wb = d;
          c.target.dispatchEvent(d);
          wb = null;
        } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, false;
        b.shift();
      }
      return true;
    }
    function Zc(a, b, c) {
      Xc(a) && c.delete(b);
    }
    function $c() {
      Jc = false;
      null !== Lc && Xc(Lc) && (Lc = null);
      null !== Mc && Xc(Mc) && (Mc = null);
      null !== Nc && Xc(Nc) && (Nc = null);
      Oc.forEach(Zc);
      Pc.forEach(Zc);
    }
    function ad(a, b) {
      a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
    }
    function bd(a) {
      function b(b2) {
        return ad(b2, a);
      }
      if (0 < Kc.length) {
        ad(Kc[0], a);
        for (var c = 1; c < Kc.length; c++) {
          var d = Kc[c];
          d.blockedOn === a && (d.blockedOn = null);
        }
      }
      null !== Lc && ad(Lc, a);
      null !== Mc && ad(Mc, a);
      null !== Nc && ad(Nc, a);
      Oc.forEach(b);
      Pc.forEach(b);
      for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
      for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn); ) Vc(c), null === c.blockedOn && Qc.shift();
    }
    var cd = ua.ReactCurrentBatchConfig, dd = true;
    function ed(a, b, c, d) {
      var e = C, f2 = cd.transition;
      cd.transition = null;
      try {
        C = 1, fd(a, b, c, d);
      } finally {
        C = e, cd.transition = f2;
      }
    }
    function gd(a, b, c, d) {
      var e = C, f2 = cd.transition;
      cd.transition = null;
      try {
        C = 4, fd(a, b, c, d);
      } finally {
        C = e, cd.transition = f2;
      }
    }
    function fd(a, b, c, d) {
      if (dd) {
        var e = Yc(a, b, c, d);
        if (null === e) hd(a, b, d, id, c), Sc(a, d);
        else if (Uc(e, a, b, c, d)) d.stopPropagation();
        else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
          for (; null !== e; ) {
            var f2 = Cb(e);
            null !== f2 && Ec(f2);
            f2 = Yc(a, b, c, d);
            null === f2 && hd(a, b, d, id, c);
            if (f2 === e) break;
            e = f2;
          }
          null !== e && d.stopPropagation();
        } else hd(a, b, d, null, c);
      }
    }
    var id = null;
    function Yc(a, b, c, d) {
      id = null;
      a = xb(d);
      a = Wc(a);
      if (null !== a) if (b = Vb(a), null === b) a = null;
      else if (c = b.tag, 13 === c) {
        a = Wb(b);
        if (null !== a) return a;
        a = null;
      } else if (3 === c) {
        if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
        a = null;
      } else b !== a && (a = null);
      id = a;
      return null;
    }
    function jd(a) {
      switch (a) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
          return 1;
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
          return 4;
        case "message":
          switch (ec()) {
            case fc:
              return 1;
            case gc:
              return 4;
            case hc:
            case ic:
              return 16;
            case jc:
              return 536870912;
            default:
              return 16;
          }
        default:
          return 16;
      }
    }
    var kd = null, ld = null, md = null;
    function nd() {
      if (md) return md;
      var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f2 = e.length;
      for (a = 0; a < c && b[a] === e[a]; a++) ;
      var g = c - a;
      for (d = 1; d <= g && b[c - d] === e[f2 - d]; d++) ;
      return md = e.slice(a, 1 < d ? 1 - d : void 0);
    }
    function od(a) {
      var b = a.keyCode;
      "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
      10 === a && (a = 13);
      return 32 <= a || 13 === a ? a : 0;
    }
    function pd() {
      return true;
    }
    function qd() {
      return false;
    }
    function rd(a) {
      function b(b2, d, e, f2, g) {
        this._reactName = b2;
        this._targetInst = e;
        this.type = d;
        this.nativeEvent = f2;
        this.target = g;
        this.currentTarget = null;
        for (var c in a) a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f2) : f2[c]);
        this.isDefaultPrevented = (null != f2.defaultPrevented ? f2.defaultPrevented : false === f2.returnValue) ? pd : qd;
        this.isPropagationStopped = qd;
        return this;
      }
      A(b.prototype, { preventDefault: function() {
        this.defaultPrevented = true;
        var a2 = this.nativeEvent;
        a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
      }, stopPropagation: function() {
        var a2 = this.nativeEvent;
        a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
      }, persist: function() {
      }, isPersistent: pd });
      return b;
    }
    var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a) {
      return a.timeStamp || Date.now();
    }, defaultPrevented: 0, isTrusted: 0 }, td = rd(sd), ud = A({}, sd, { view: 0, detail: 0 }), vd = rd(ud), wd, xd, yd, Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a) {
      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    }, movementX: function(a) {
      if ("movementX" in a) return a.movementX;
      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
      return wd;
    }, movementY: function(a) {
      return "movementY" in a ? a.movementY : xd;
    } }), Bd = rd(Ad), Cd = A({}, Ad, { dataTransfer: 0 }), Dd = rd(Cd), Ed = A({}, ud, { relatedTarget: 0 }), Fd = rd(Ed), Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 }), Hd = rd(Gd), Id = A({}, sd, { clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    } }), Jd = rd(Id), Kd = A({}, sd, { data: 0 }), Ld = rd(Kd), Md = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    }, Nd = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    }, Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
    function Pd(a) {
      var b = this.nativeEvent;
      return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : false;
    }
    function zd() {
      return Pd;
    }
    var Qd = A({}, ud, { key: function(a) {
      if (a.key) {
        var b = Md[a.key] || a.key;
        if ("Unidentified" !== b) return b;
      }
      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
    }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a) {
      return "keypress" === a.type ? od(a) : 0;
    }, keyCode: function(a) {
      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    }, which: function(a) {
      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
    } }), Rd = rd(Qd), Sd = A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 }), Td = rd(Sd), Ud = A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd }), Vd = rd(Ud), Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 }), Xd = rd(Wd), Yd = A({}, Ad, {
      deltaX: function(a) {
        return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
      },
      deltaY: function(a) {
        return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
      },
      deltaZ: 0,
      deltaMode: 0
    }), Zd = rd(Yd), $d = [9, 13, 27, 32], ae = ia && "CompositionEvent" in window, be = null;
    ia && "documentMode" in document && (be = document.documentMode);
    var ce = ia && "TextEvent" in window && !be, de = ia && (!ae || be && 8 < be && 11 >= be), ee = String.fromCharCode(32), fe = false;
    function ge(a, b) {
      switch (a) {
        case "keyup":
          return -1 !== $d.indexOf(b.keyCode);
        case "keydown":
          return 229 !== b.keyCode;
        case "keypress":
        case "mousedown":
        case "focusout":
          return true;
        default:
          return false;
      }
    }
    function he(a) {
      a = a.detail;
      return "object" === typeof a && "data" in a ? a.data : null;
    }
    var ie = false;
    function je(a, b) {
      switch (a) {
        case "compositionend":
          return he(b);
        case "keypress":
          if (32 !== b.which) return null;
          fe = true;
          return ee;
        case "textInput":
          return a = b.data, a === ee && fe ? null : a;
        default:
          return null;
      }
    }
    function ke(a, b) {
      if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
      switch (a) {
        case "paste":
          return null;
        case "keypress":
          if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
            if (b.char && 1 < b.char.length) return b.char;
            if (b.which) return String.fromCharCode(b.which);
          }
          return null;
        case "compositionend":
          return de && "ko" !== b.locale ? null : b.data;
        default:
          return null;
      }
    }
    var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
    function me(a) {
      var b = a && a.nodeName && a.nodeName.toLowerCase();
      return "input" === b ? !!le[a.type] : "textarea" === b ? true : false;
    }
    function ne(a, b, c, d) {
      Eb(d);
      b = oe(b, "onChange");
      0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b }));
    }
    var pe = null, qe = null;
    function re(a) {
      se(a, 0);
    }
    function te(a) {
      var b = ue(a);
      if (Wa(b)) return a;
    }
    function ve(a, b) {
      if ("change" === a) return b;
    }
    var we = false;
    if (ia) {
      var xe;
      if (ia) {
        var ye = "oninput" in document;
        if (!ye) {
          var ze = document.createElement("div");
          ze.setAttribute("oninput", "return;");
          ye = "function" === typeof ze.oninput;
        }
        xe = ye;
      } else xe = false;
      we = xe && (!document.documentMode || 9 < document.documentMode);
    }
    function Ae() {
      pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
    }
    function Be(a) {
      if ("value" === a.propertyName && te(qe)) {
        var b = [];
        ne(b, qe, a, xb(a));
        Jb(re, b);
      }
    }
    function Ce(a, b, c) {
      "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
    }
    function De(a) {
      if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
    }
    function Ee(a, b) {
      if ("click" === a) return te(b);
    }
    function Fe(a, b) {
      if ("input" === a || "change" === a) return te(b);
    }
    function Ge(a, b) {
      return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
    }
    var He = "function" === typeof Object.is ? Object.is : Ge;
    function Ie(a, b) {
      if (He(a, b)) return true;
      if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return false;
      var c = Object.keys(a), d = Object.keys(b);
      if (c.length !== d.length) return false;
      for (d = 0; d < c.length; d++) {
        var e = c[d];
        if (!ja.call(b, e) || !He(a[e], b[e])) return false;
      }
      return true;
    }
    function Je(a) {
      for (; a && a.firstChild; ) a = a.firstChild;
      return a;
    }
    function Ke(a, b) {
      var c = Je(a);
      a = 0;
      for (var d; c; ) {
        if (3 === c.nodeType) {
          d = a + c.textContent.length;
          if (a <= b && d >= b) return { node: c, offset: b - a };
          a = d;
        }
        a: {
          for (; c; ) {
            if (c.nextSibling) {
              c = c.nextSibling;
              break a;
            }
            c = c.parentNode;
          }
          c = void 0;
        }
        c = Je(c);
      }
    }
    function Le(a, b) {
      return a && b ? a === b ? true : a && 3 === a.nodeType ? false : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : false : false;
    }
    function Me() {
      for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
        try {
          var c = "string" === typeof b.contentWindow.location.href;
        } catch (d) {
          c = false;
        }
        if (c) a = b.contentWindow;
        else break;
        b = Xa(a.document);
      }
      return b;
    }
    function Ne(a) {
      var b = a && a.nodeName && a.nodeName.toLowerCase();
      return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
    }
    function Oe(a) {
      var b = Me(), c = a.focusedElem, d = a.selectionRange;
      if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
        if (null !== d && Ne(c)) {
          if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
          else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
            a = a.getSelection();
            var e = c.textContent.length, f2 = Math.min(d.start, e);
            d = void 0 === d.end ? f2 : Math.min(d.end, e);
            !a.extend && f2 > d && (e = d, d = f2, f2 = e);
            e = Ke(c, f2);
            var g = Ke(
              c,
              d
            );
            e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f2 > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
          }
        }
        b = [];
        for (a = c; a = a.parentNode; ) 1 === a.nodeType && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
        "function" === typeof c.focus && c.focus();
        for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
      }
    }
    var Pe = ia && "documentMode" in document && 11 >= document.documentMode, Qe = null, Re = null, Se = null, Te = false;
    function Ue(a, b, c) {
      var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
      Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({ event: b, listeners: d }), b.target = Qe)));
    }
    function Ve(a, b) {
      var c = {};
      c[a.toLowerCase()] = b.toLowerCase();
      c["Webkit" + a] = "webkit" + b;
      c["Moz" + a] = "moz" + b;
      return c;
    }
    var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") }, Xe = {}, Ye = {};
    ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
    function Ze(a) {
      if (Xe[a]) return Xe[a];
      if (!We[a]) return a;
      var b = We[a], c;
      for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
      return a;
    }
    var $e = Ze("animationend"), af = Ze("animationiteration"), bf = Ze("animationstart"), cf = Ze("transitionend"), df = /* @__PURE__ */ new Map(), ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
    function ff(a, b) {
      df.set(a, b);
      fa(b, [a]);
    }
    for (var gf = 0; gf < ef.length; gf++) {
      var hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
      ff(jf, "on" + kf);
    }
    ff($e, "onAnimationEnd");
    ff(af, "onAnimationIteration");
    ff(bf, "onAnimationStart");
    ff("dblclick", "onDoubleClick");
    ff("focusin", "onFocus");
    ff("focusout", "onBlur");
    ff(cf, "onTransitionEnd");
    ha("onMouseEnter", ["mouseout", "mouseover"]);
    ha("onMouseLeave", ["mouseout", "mouseover"]);
    ha("onPointerEnter", ["pointerout", "pointerover"]);
    ha("onPointerLeave", ["pointerout", "pointerover"]);
    fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
    fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
    fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
    fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
    fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
    var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "), mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
    function nf(a, b, c) {
      var d = a.type || "unknown-event";
      a.currentTarget = c;
      Ub(d, b, void 0, a);
      a.currentTarget = null;
    }
    function se(a, b) {
      b = 0 !== (b & 4);
      for (var c = 0; c < a.length; c++) {
        var d = a[c], e = d.event;
        d = d.listeners;
        a: {
          var f2 = void 0;
          if (b) for (var g = d.length - 1; 0 <= g; g--) {
            var h = d[g], k2 = h.instance, l2 = h.currentTarget;
            h = h.listener;
            if (k2 !== f2 && e.isPropagationStopped()) break a;
            nf(e, h, l2);
            f2 = k2;
          }
          else for (g = 0; g < d.length; g++) {
            h = d[g];
            k2 = h.instance;
            l2 = h.currentTarget;
            h = h.listener;
            if (k2 !== f2 && e.isPropagationStopped()) break a;
            nf(e, h, l2);
            f2 = k2;
          }
        }
      }
      if (Qb) throw a = Rb, Qb = false, Rb = null, a;
    }
    function D(a, b) {
      var c = b[of];
      void 0 === c && (c = b[of] = /* @__PURE__ */ new Set());
      var d = a + "__bubble";
      c.has(d) || (pf(b, a, 2, false), c.add(d));
    }
    function qf(a, b, c) {
      var d = 0;
      b && (d |= 4);
      pf(c, a, d, b);
    }
    var rf = "_reactListening" + Math.random().toString(36).slice(2);
    function sf(a) {
      if (!a[rf]) {
        a[rf] = true;
        da.forEach(function(b2) {
          "selectionchange" !== b2 && (mf.has(b2) || qf(b2, false, a), qf(b2, true, a));
        });
        var b = 9 === a.nodeType ? a : a.ownerDocument;
        null === b || b[rf] || (b[rf] = true, qf("selectionchange", false, b));
      }
    }
    function pf(a, b, c, d) {
      switch (jd(b)) {
        case 1:
          var e = ed;
          break;
        case 4:
          e = gd;
          break;
        default:
          e = fd;
      }
      c = e.bind(null, b, c, a);
      e = void 0;
      !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = true);
      d ? void 0 !== e ? a.addEventListener(b, c, { capture: true, passive: e }) : a.addEventListener(b, c, true) : void 0 !== e ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, false);
    }
    function hd(a, b, c, d, e) {
      var f2 = d;
      if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (; ; ) {
        if (null === d) return;
        var g = d.tag;
        if (3 === g || 4 === g) {
          var h = d.stateNode.containerInfo;
          if (h === e || 8 === h.nodeType && h.parentNode === e) break;
          if (4 === g) for (g = d.return; null !== g; ) {
            var k2 = g.tag;
            if (3 === k2 || 4 === k2) {
              if (k2 = g.stateNode.containerInfo, k2 === e || 8 === k2.nodeType && k2.parentNode === e) return;
            }
            g = g.return;
          }
          for (; null !== h; ) {
            g = Wc(h);
            if (null === g) return;
            k2 = g.tag;
            if (5 === k2 || 6 === k2) {
              d = f2 = g;
              continue a;
            }
            h = h.parentNode;
          }
        }
        d = d.return;
      }
      Jb(function() {
        var d2 = f2, e2 = xb(c), g2 = [];
        a: {
          var h2 = df.get(a);
          if (void 0 !== h2) {
            var k3 = td, n2 = a;
            switch (a) {
              case "keypress":
                if (0 === od(c)) break a;
              case "keydown":
              case "keyup":
                k3 = Rd;
                break;
              case "focusin":
                n2 = "focus";
                k3 = Fd;
                break;
              case "focusout":
                n2 = "blur";
                k3 = Fd;
                break;
              case "beforeblur":
              case "afterblur":
                k3 = Fd;
                break;
              case "click":
                if (2 === c.button) break a;
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                k3 = Bd;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                k3 = Dd;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                k3 = Vd;
                break;
              case $e:
              case af:
              case bf:
                k3 = Hd;
                break;
              case cf:
                k3 = Xd;
                break;
              case "scroll":
                k3 = vd;
                break;
              case "wheel":
                k3 = Zd;
                break;
              case "copy":
              case "cut":
              case "paste":
                k3 = Jd;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                k3 = Td;
            }
            var t2 = 0 !== (b & 4), J2 = !t2 && "scroll" === a, x2 = t2 ? null !== h2 ? h2 + "Capture" : null : h2;
            t2 = [];
            for (var w2 = d2, u2; null !== w2; ) {
              u2 = w2;
              var F2 = u2.stateNode;
              5 === u2.tag && null !== F2 && (u2 = F2, null !== x2 && (F2 = Kb(w2, x2), null != F2 && t2.push(tf(w2, F2, u2))));
              if (J2) break;
              w2 = w2.return;
            }
            0 < t2.length && (h2 = new k3(h2, n2, null, c, e2), g2.push({ event: h2, listeners: t2 }));
          }
        }
        if (0 === (b & 7)) {
          a: {
            h2 = "mouseover" === a || "pointerover" === a;
            k3 = "mouseout" === a || "pointerout" === a;
            if (h2 && c !== wb && (n2 = c.relatedTarget || c.fromElement) && (Wc(n2) || n2[uf])) break a;
            if (k3 || h2) {
              h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window;
              if (k3) {
                if (n2 = c.relatedTarget || c.toElement, k3 = d2, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag)) n2 = null;
              } else k3 = null, n2 = d2;
              if (k3 !== n2) {
                t2 = Bd;
                F2 = "onMouseLeave";
                x2 = "onMouseEnter";
                w2 = "mouse";
                if ("pointerout" === a || "pointerover" === a) t2 = Td, F2 = "onPointerLeave", x2 = "onPointerEnter", w2 = "pointer";
                J2 = null == k3 ? h2 : ue(k3);
                u2 = null == n2 ? h2 : ue(n2);
                h2 = new t2(F2, w2 + "leave", k3, c, e2);
                h2.target = J2;
                h2.relatedTarget = u2;
                F2 = null;
                Wc(e2) === d2 && (t2 = new t2(x2, w2 + "enter", n2, c, e2), t2.target = u2, t2.relatedTarget = J2, F2 = t2);
                J2 = F2;
                if (k3 && n2) b: {
                  t2 = k3;
                  x2 = n2;
                  w2 = 0;
                  for (u2 = t2; u2; u2 = vf(u2)) w2++;
                  u2 = 0;
                  for (F2 = x2; F2; F2 = vf(F2)) u2++;
                  for (; 0 < w2 - u2; ) t2 = vf(t2), w2--;
                  for (; 0 < u2 - w2; ) x2 = vf(x2), u2--;
                  for (; w2--; ) {
                    if (t2 === x2 || null !== x2 && t2 === x2.alternate) break b;
                    t2 = vf(t2);
                    x2 = vf(x2);
                  }
                  t2 = null;
                }
                else t2 = null;
                null !== k3 && wf(g2, h2, k3, t2, false);
                null !== n2 && null !== J2 && wf(g2, J2, n2, t2, true);
              }
            }
          }
          a: {
            h2 = d2 ? ue(d2) : window;
            k3 = h2.nodeName && h2.nodeName.toLowerCase();
            if ("select" === k3 || "input" === k3 && "file" === h2.type) var na = ve;
            else if (me(h2)) if (we) na = Fe;
            else {
              na = De;
              var xa = Ce;
            }
            else (k3 = h2.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h2.type || "radio" === h2.type) && (na = Ee);
            if (na && (na = na(a, d2))) {
              ne(g2, na, c, e2);
              break a;
            }
            xa && xa(a, h2, d2);
            "focusout" === a && (xa = h2._wrapperState) && xa.controlled && "number" === h2.type && cb(h2, "number", h2.value);
          }
          xa = d2 ? ue(d2) : window;
          switch (a) {
            case "focusin":
              if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d2, Se = null;
              break;
            case "focusout":
              Se = Re = Qe = null;
              break;
            case "mousedown":
              Te = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              Te = false;
              Ue(g2, c, e2);
              break;
            case "selectionchange":
              if (Pe) break;
            case "keydown":
            case "keyup":
              Ue(g2, c, e2);
          }
          var $a;
          if (ae) b: {
            switch (a) {
              case "compositionstart":
                var ba = "onCompositionStart";
                break b;
              case "compositionend":
                ba = "onCompositionEnd";
                break b;
              case "compositionupdate":
                ba = "onCompositionUpdate";
                break b;
            }
            ba = void 0;
          }
          else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
          ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d2, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e2), g2.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
          if ($a = ce ? je(a, c) : ke(a, c)) d2 = oe(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({ event: e2, listeners: d2 }), e2.data = $a);
        }
        se(g2, b);
      });
    }
    function tf(a, b, c) {
      return { instance: a, listener: b, currentTarget: c };
    }
    function oe(a, b) {
      for (var c = b + "Capture", d = []; null !== a; ) {
        var e = a, f2 = e.stateNode;
        5 === e.tag && null !== f2 && (e = f2, f2 = Kb(a, c), null != f2 && d.unshift(tf(a, f2, e)), f2 = Kb(a, b), null != f2 && d.push(tf(a, f2, e)));
        a = a.return;
      }
      return d;
    }
    function vf(a) {
      if (null === a) return null;
      do
        a = a.return;
      while (a && 5 !== a.tag);
      return a ? a : null;
    }
    function wf(a, b, c, d, e) {
      for (var f2 = b._reactName, g = []; null !== c && c !== d; ) {
        var h = c, k2 = h.alternate, l2 = h.stateNode;
        if (null !== k2 && k2 === d) break;
        5 === h.tag && null !== l2 && (h = l2, e ? (k2 = Kb(c, f2), null != k2 && g.unshift(tf(c, k2, h))) : e || (k2 = Kb(c, f2), null != k2 && g.push(tf(c, k2, h))));
        c = c.return;
      }
      0 !== g.length && a.push({ event: b, listeners: g });
    }
    var xf = /\r\n?/g, yf = /\u0000|\uFFFD/g;
    function zf(a) {
      return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
    }
    function Af(a, b, c) {
      b = zf(b);
      if (zf(a) !== b && c) throw Error(p(425));
    }
    function Bf() {
    }
    var Cf = null, Df = null;
    function Ef(a, b) {
      return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
    }
    var Ff = "function" === typeof setTimeout ? setTimeout : void 0, Gf = "function" === typeof clearTimeout ? clearTimeout : void 0, Hf = "function" === typeof Promise ? Promise : void 0, Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
      return Hf.resolve(null).then(a).catch(If);
    } : Ff;
    function If(a) {
      setTimeout(function() {
        throw a;
      });
    }
    function Kf(a, b) {
      var c = b, d = 0;
      do {
        var e = c.nextSibling;
        a.removeChild(c);
        if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
          if (0 === d) {
            a.removeChild(e);
            bd(b);
            return;
          }
          d--;
        } else "$" !== c && "$?" !== c && "$!" !== c || d++;
        c = e;
      } while (c);
      bd(b);
    }
    function Lf(a) {
      for (; null != a; a = a.nextSibling) {
        var b = a.nodeType;
        if (1 === b || 3 === b) break;
        if (8 === b) {
          b = a.data;
          if ("$" === b || "$!" === b || "$?" === b) break;
          if ("/$" === b) return null;
        }
      }
      return a;
    }
    function Mf(a) {
      a = a.previousSibling;
      for (var b = 0; a; ) {
        if (8 === a.nodeType) {
          var c = a.data;
          if ("$" === c || "$!" === c || "$?" === c) {
            if (0 === b) return a;
            b--;
          } else "/$" === c && b++;
        }
        a = a.previousSibling;
      }
      return null;
    }
    var Nf = Math.random().toString(36).slice(2), Of = "__reactFiber$" + Nf, Pf = "__reactProps$" + Nf, uf = "__reactContainer$" + Nf, of = "__reactEvents$" + Nf, Qf = "__reactListeners$" + Nf, Rf = "__reactHandles$" + Nf;
    function Wc(a) {
      var b = a[Of];
      if (b) return b;
      for (var c = a.parentNode; c; ) {
        if (b = c[uf] || c[Of]) {
          c = b.alternate;
          if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a; ) {
            if (c = a[Of]) return c;
            a = Mf(a);
          }
          return b;
        }
        a = c;
        c = a.parentNode;
      }
      return null;
    }
    function Cb(a) {
      a = a[Of] || a[uf];
      return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
    }
    function ue(a) {
      if (5 === a.tag || 6 === a.tag) return a.stateNode;
      throw Error(p(33));
    }
    function Db(a) {
      return a[Pf] || null;
    }
    var Sf = [], Tf = -1;
    function Uf(a) {
      return { current: a };
    }
    function E(a) {
      0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
    }
    function G(a, b) {
      Tf++;
      Sf[Tf] = a.current;
      a.current = b;
    }
    var Vf = {}, H = Uf(Vf), Wf = Uf(false), Xf = Vf;
    function Yf(a, b) {
      var c = a.type.contextTypes;
      if (!c) return Vf;
      var d = a.stateNode;
      if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
      var e = {}, f2;
      for (f2 in c) e[f2] = b[f2];
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
      return e;
    }
    function Zf(a) {
      a = a.childContextTypes;
      return null !== a && void 0 !== a;
    }
    function $f() {
      E(Wf);
      E(H);
    }
    function ag(a, b, c) {
      if (H.current !== Vf) throw Error(p(168));
      G(H, b);
      G(Wf, c);
    }
    function bg(a, b, c) {
      var d = a.stateNode;
      b = b.childContextTypes;
      if ("function" !== typeof d.getChildContext) return c;
      d = d.getChildContext();
      for (var e in d) if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));
      return A({}, c, d);
    }
    function cg(a) {
      a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
      Xf = H.current;
      G(H, a);
      G(Wf, Wf.current);
      return true;
    }
    function dg(a, b, c) {
      var d = a.stateNode;
      if (!d) throw Error(p(169));
      c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
      G(Wf, c);
    }
    var eg = null, fg = false, gg = false;
    function hg(a) {
      null === eg ? eg = [a] : eg.push(a);
    }
    function ig(a) {
      fg = true;
      hg(a);
    }
    function jg() {
      if (!gg && null !== eg) {
        gg = true;
        var a = 0, b = C;
        try {
          var c = eg;
          for (C = 1; a < c.length; a++) {
            var d = c[a];
            do
              d = d(true);
            while (null !== d);
          }
          eg = null;
          fg = false;
        } catch (e) {
          throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
        } finally {
          C = b, gg = false;
        }
      }
      return null;
    }
    var kg = [], lg = 0, mg = null, ng = 0, og = [], pg = 0, qg = null, rg = 1, sg = "";
    function tg(a, b) {
      kg[lg++] = ng;
      kg[lg++] = mg;
      mg = a;
      ng = b;
    }
    function ug(a, b, c) {
      og[pg++] = rg;
      og[pg++] = sg;
      og[pg++] = qg;
      qg = a;
      var d = rg;
      a = sg;
      var e = 32 - oc(d) - 1;
      d &= ~(1 << e);
      c += 1;
      var f2 = 32 - oc(b) + e;
      if (30 < f2) {
        var g = e - e % 5;
        f2 = (d & (1 << g) - 1).toString(32);
        d >>= g;
        e -= g;
        rg = 1 << 32 - oc(b) + e | c << e | d;
        sg = f2 + a;
      } else rg = 1 << f2 | c << e | d, sg = a;
    }
    function vg(a) {
      null !== a.return && (tg(a, 1), ug(a, 1, 0));
    }
    function wg(a) {
      for (; a === mg; ) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
      for (; a === qg; ) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
    }
    var xg = null, yg = null, I = false, zg = null;
    function Ag(a, b) {
      var c = Bg(5, null, null, 0);
      c.elementType = "DELETED";
      c.stateNode = b;
      c.return = a;
      b = a.deletions;
      null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
    }
    function Cg(a, b) {
      switch (a.tag) {
        case 5:
          var c = a.type;
          b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
          return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), true) : false;
        case 6:
          return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, true) : false;
        case 13:
          return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b, treeContext: c, retryLane: 1073741824 }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, true) : false;
        default:
          return false;
      }
    }
    function Dg(a) {
      return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
    }
    function Eg(a) {
      if (I) {
        var b = yg;
        if (b) {
          var c = b;
          if (!Cg(a, b)) {
            if (Dg(a)) throw Error(p(418));
            b = Lf(c.nextSibling);
            var d = xg;
            b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
          }
        } else {
          if (Dg(a)) throw Error(p(418));
          a.flags = a.flags & -4097 | 2;
          I = false;
          xg = a;
        }
      }
    }
    function Fg(a) {
      for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; ) a = a.return;
      xg = a;
    }
    function Gg(a) {
      if (a !== xg) return false;
      if (!I) return Fg(a), I = true, false;
      var b;
      (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
      if (b && (b = yg)) {
        if (Dg(a)) throw Hg(), Error(p(418));
        for (; b; ) Ag(a, b), b = Lf(b.nextSibling);
      }
      Fg(a);
      if (13 === a.tag) {
        a = a.memoizedState;
        a = null !== a ? a.dehydrated : null;
        if (!a) throw Error(p(317));
        a: {
          a = a.nextSibling;
          for (b = 0; a; ) {
            if (8 === a.nodeType) {
              var c = a.data;
              if ("/$" === c) {
                if (0 === b) {
                  yg = Lf(a.nextSibling);
                  break a;
                }
                b--;
              } else "$" !== c && "$!" !== c && "$?" !== c || b++;
            }
            a = a.nextSibling;
          }
          yg = null;
        }
      } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
      return true;
    }
    function Hg() {
      for (var a = yg; a; ) a = Lf(a.nextSibling);
    }
    function Ig() {
      yg = xg = null;
      I = false;
    }
    function Jg(a) {
      null === zg ? zg = [a] : zg.push(a);
    }
    var Kg = ua.ReactCurrentBatchConfig;
    function Lg(a, b, c) {
      a = c.ref;
      if (null !== a && "function" !== typeof a && "object" !== typeof a) {
        if (c._owner) {
          c = c._owner;
          if (c) {
            if (1 !== c.tag) throw Error(p(309));
            var d = c.stateNode;
          }
          if (!d) throw Error(p(147, a));
          var e = d, f2 = "" + a;
          if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f2) return b.ref;
          b = function(a2) {
            var b2 = e.refs;
            null === a2 ? delete b2[f2] : b2[f2] = a2;
          };
          b._stringRef = f2;
          return b;
        }
        if ("string" !== typeof a) throw Error(p(284));
        if (!c._owner) throw Error(p(290, a));
      }
      return a;
    }
    function Mg(a, b) {
      a = Object.prototype.toString.call(b);
      throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
    }
    function Ng(a) {
      var b = a._init;
      return b(a._payload);
    }
    function Og(a) {
      function b(b2, c2) {
        if (a) {
          var d2 = b2.deletions;
          null === d2 ? (b2.deletions = [c2], b2.flags |= 16) : d2.push(c2);
        }
      }
      function c(c2, d2) {
        if (!a) return null;
        for (; null !== d2; ) b(c2, d2), d2 = d2.sibling;
        return null;
      }
      function d(a2, b2) {
        for (a2 = /* @__PURE__ */ new Map(); null !== b2; ) null !== b2.key ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
        return a2;
      }
      function e(a2, b2) {
        a2 = Pg(a2, b2);
        a2.index = 0;
        a2.sibling = null;
        return a2;
      }
      function f2(b2, c2, d2) {
        b2.index = d2;
        if (!a) return b2.flags |= 1048576, c2;
        d2 = b2.alternate;
        if (null !== d2) return d2 = d2.index, d2 < c2 ? (b2.flags |= 2, c2) : d2;
        b2.flags |= 2;
        return c2;
      }
      function g(b2) {
        a && null === b2.alternate && (b2.flags |= 2);
        return b2;
      }
      function h(a2, b2, c2, d2) {
        if (null === b2 || 6 !== b2.tag) return b2 = Qg(c2, a2.mode, d2), b2.return = a2, b2;
        b2 = e(b2, c2);
        b2.return = a2;
        return b2;
      }
      function k2(a2, b2, c2, d2) {
        var f3 = c2.type;
        if (f3 === ya) return m2(a2, b2, c2.props.children, d2, c2.key);
        if (null !== b2 && (b2.elementType === f3 || "object" === typeof f3 && null !== f3 && f3.$$typeof === Ha && Ng(f3) === b2.type)) return d2 = e(b2, c2.props), d2.ref = Lg(a2, b2, c2), d2.return = a2, d2;
        d2 = Rg(c2.type, c2.key, c2.props, null, a2.mode, d2);
        d2.ref = Lg(a2, b2, c2);
        d2.return = a2;
        return d2;
      }
      function l2(a2, b2, c2, d2) {
        if (null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation) return b2 = Sg(c2, a2.mode, d2), b2.return = a2, b2;
        b2 = e(b2, c2.children || []);
        b2.return = a2;
        return b2;
      }
      function m2(a2, b2, c2, d2, f3) {
        if (null === b2 || 7 !== b2.tag) return b2 = Tg(c2, a2.mode, d2, f3), b2.return = a2, b2;
        b2 = e(b2, c2);
        b2.return = a2;
        return b2;
      }
      function q2(a2, b2, c2) {
        if ("string" === typeof b2 && "" !== b2 || "number" === typeof b2) return b2 = Qg("" + b2, a2.mode, c2), b2.return = a2, b2;
        if ("object" === typeof b2 && null !== b2) {
          switch (b2.$$typeof) {
            case va:
              return c2 = Rg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Lg(a2, null, b2), c2.return = a2, c2;
            case wa:
              return b2 = Sg(b2, a2.mode, c2), b2.return = a2, b2;
            case Ha:
              var d2 = b2._init;
              return q2(a2, d2(b2._payload), c2);
          }
          if (eb(b2) || Ka(b2)) return b2 = Tg(b2, a2.mode, c2, null), b2.return = a2, b2;
          Mg(a2, b2);
        }
        return null;
      }
      function r2(a2, b2, c2, d2) {
        var e2 = null !== b2 ? b2.key : null;
        if ("string" === typeof c2 && "" !== c2 || "number" === typeof c2) return null !== e2 ? null : h(a2, b2, "" + c2, d2);
        if ("object" === typeof c2 && null !== c2) {
          switch (c2.$$typeof) {
            case va:
              return c2.key === e2 ? k2(a2, b2, c2, d2) : null;
            case wa:
              return c2.key === e2 ? l2(a2, b2, c2, d2) : null;
            case Ha:
              return e2 = c2._init, r2(
                a2,
                b2,
                e2(c2._payload),
                d2
              );
          }
          if (eb(c2) || Ka(c2)) return null !== e2 ? null : m2(a2, b2, c2, d2, null);
          Mg(a2, c2);
        }
        return null;
      }
      function y2(a2, b2, c2, d2, e2) {
        if ("string" === typeof d2 && "" !== d2 || "number" === typeof d2) return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
        if ("object" === typeof d2 && null !== d2) {
          switch (d2.$$typeof) {
            case va:
              return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, k2(b2, a2, d2, e2);
            case wa:
              return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l2(b2, a2, d2, e2);
            case Ha:
              var f3 = d2._init;
              return y2(a2, b2, c2, f3(d2._payload), e2);
          }
          if (eb(d2) || Ka(d2)) return a2 = a2.get(c2) || null, m2(b2, a2, d2, e2, null);
          Mg(b2, d2);
        }
        return null;
      }
      function n2(e2, g2, h2, k3) {
        for (var l3 = null, m3 = null, u2 = g2, w2 = g2 = 0, x2 = null; null !== u2 && w2 < h2.length; w2++) {
          u2.index > w2 ? (x2 = u2, u2 = null) : x2 = u2.sibling;
          var n3 = r2(e2, u2, h2[w2], k3);
          if (null === n3) {
            null === u2 && (u2 = x2);
            break;
          }
          a && u2 && null === n3.alternate && b(e2, u2);
          g2 = f2(n3, g2, w2);
          null === m3 ? l3 = n3 : m3.sibling = n3;
          m3 = n3;
          u2 = x2;
        }
        if (w2 === h2.length) return c(e2, u2), I && tg(e2, w2), l3;
        if (null === u2) {
          for (; w2 < h2.length; w2++) u2 = q2(e2, h2[w2], k3), null !== u2 && (g2 = f2(u2, g2, w2), null === m3 ? l3 = u2 : m3.sibling = u2, m3 = u2);
          I && tg(e2, w2);
          return l3;
        }
        for (u2 = d(e2, u2); w2 < h2.length; w2++) x2 = y2(u2, e2, w2, h2[w2], k3), null !== x2 && (a && null !== x2.alternate && u2.delete(null === x2.key ? w2 : x2.key), g2 = f2(x2, g2, w2), null === m3 ? l3 = x2 : m3.sibling = x2, m3 = x2);
        a && u2.forEach(function(a2) {
          return b(e2, a2);
        });
        I && tg(e2, w2);
        return l3;
      }
      function t2(e2, g2, h2, k3) {
        var l3 = Ka(h2);
        if ("function" !== typeof l3) throw Error(p(150));
        h2 = l3.call(h2);
        if (null == h2) throw Error(p(151));
        for (var u2 = l3 = null, m3 = g2, w2 = g2 = 0, x2 = null, n3 = h2.next(); null !== m3 && !n3.done; w2++, n3 = h2.next()) {
          m3.index > w2 ? (x2 = m3, m3 = null) : x2 = m3.sibling;
          var t3 = r2(e2, m3, n3.value, k3);
          if (null === t3) {
            null === m3 && (m3 = x2);
            break;
          }
          a && m3 && null === t3.alternate && b(e2, m3);
          g2 = f2(t3, g2, w2);
          null === u2 ? l3 = t3 : u2.sibling = t3;
          u2 = t3;
          m3 = x2;
        }
        if (n3.done) return c(
          e2,
          m3
        ), I && tg(e2, w2), l3;
        if (null === m3) {
          for (; !n3.done; w2++, n3 = h2.next()) n3 = q2(e2, n3.value, k3), null !== n3 && (g2 = f2(n3, g2, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
          I && tg(e2, w2);
          return l3;
        }
        for (m3 = d(e2, m3); !n3.done; w2++, n3 = h2.next()) n3 = y2(m3, e2, w2, n3.value, k3), null !== n3 && (a && null !== n3.alternate && m3.delete(null === n3.key ? w2 : n3.key), g2 = f2(n3, g2, w2), null === u2 ? l3 = n3 : u2.sibling = n3, u2 = n3);
        a && m3.forEach(function(a2) {
          return b(e2, a2);
        });
        I && tg(e2, w2);
        return l3;
      }
      function J2(a2, d2, f3, h2) {
        "object" === typeof f3 && null !== f3 && f3.type === ya && null === f3.key && (f3 = f3.props.children);
        if ("object" === typeof f3 && null !== f3) {
          switch (f3.$$typeof) {
            case va:
              a: {
                for (var k3 = f3.key, l3 = d2; null !== l3; ) {
                  if (l3.key === k3) {
                    k3 = f3.type;
                    if (k3 === ya) {
                      if (7 === l3.tag) {
                        c(a2, l3.sibling);
                        d2 = e(l3, f3.props.children);
                        d2.return = a2;
                        a2 = d2;
                        break a;
                      }
                    } else if (l3.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && Ng(k3) === l3.type) {
                      c(a2, l3.sibling);
                      d2 = e(l3, f3.props);
                      d2.ref = Lg(a2, l3, f3);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    }
                    c(a2, l3);
                    break;
                  } else b(a2, l3);
                  l3 = l3.sibling;
                }
                f3.type === ya ? (d2 = Tg(f3.props.children, a2.mode, h2, f3.key), d2.return = a2, a2 = d2) : (h2 = Rg(f3.type, f3.key, f3.props, null, a2.mode, h2), h2.ref = Lg(a2, d2, f3), h2.return = a2, a2 = h2);
              }
              return g(a2);
            case wa:
              a: {
                for (l3 = f3.key; null !== d2; ) {
                  if (d2.key === l3) if (4 === d2.tag && d2.stateNode.containerInfo === f3.containerInfo && d2.stateNode.implementation === f3.implementation) {
                    c(a2, d2.sibling);
                    d2 = e(d2, f3.children || []);
                    d2.return = a2;
                    a2 = d2;
                    break a;
                  } else {
                    c(a2, d2);
                    break;
                  }
                  else b(a2, d2);
                  d2 = d2.sibling;
                }
                d2 = Sg(f3, a2.mode, h2);
                d2.return = a2;
                a2 = d2;
              }
              return g(a2);
            case Ha:
              return l3 = f3._init, J2(a2, d2, l3(f3._payload), h2);
          }
          if (eb(f3)) return n2(a2, d2, f3, h2);
          if (Ka(f3)) return t2(a2, d2, f3, h2);
          Mg(a2, f3);
        }
        return "string" === typeof f3 && "" !== f3 || "number" === typeof f3 ? (f3 = "" + f3, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f3), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Qg(f3, a2.mode, h2), d2.return = a2, a2 = d2), g(a2)) : c(a2, d2);
      }
      return J2;
    }
    var Ug = Og(true), Vg = Og(false), Wg = Uf(null), Xg = null, Yg = null, Zg = null;
    function $g() {
      Zg = Yg = Xg = null;
    }
    function ah(a) {
      var b = Wg.current;
      E(Wg);
      a._currentValue = b;
    }
    function bh(a, b, c) {
      for (; null !== a; ) {
        var d = a.alternate;
        (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
        if (a === c) break;
        a = a.return;
      }
    }
    function ch(a, b) {
      Xg = a;
      Zg = Yg = null;
      a = a.dependencies;
      null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (dh = true), a.firstContext = null);
    }
    function eh(a) {
      var b = a._currentValue;
      if (Zg !== a) if (a = { context: a, memoizedValue: b, next: null }, null === Yg) {
        if (null === Xg) throw Error(p(308));
        Yg = a;
        Xg.dependencies = { lanes: 0, firstContext: a };
      } else Yg = Yg.next = a;
      return b;
    }
    var fh = null;
    function gh(a) {
      null === fh ? fh = [a] : fh.push(a);
    }
    function hh(a, b, c, d) {
      var e = b.interleaved;
      null === e ? (c.next = c, gh(b)) : (c.next = e.next, e.next = c);
      b.interleaved = c;
      return ih(a, d);
    }
    function ih(a, b) {
      a.lanes |= b;
      var c = a.alternate;
      null !== c && (c.lanes |= b);
      c = a;
      for (a = a.return; null !== a; ) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
      return 3 === c.tag ? c.stateNode : null;
    }
    var jh = false;
    function kh(a) {
      a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function lh(a, b) {
      a = a.updateQueue;
      b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
    }
    function mh(a, b) {
      return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
    }
    function nh(a, b, c) {
      var d = a.updateQueue;
      if (null === d) return null;
      d = d.shared;
      if (0 !== (K & 2)) {
        var e = d.pending;
        null === e ? b.next = b : (b.next = e.next, e.next = b);
        d.pending = b;
        return ih(a, c);
      }
      e = d.interleaved;
      null === e ? (b.next = b, gh(d)) : (b.next = e.next, e.next = b);
      d.interleaved = b;
      return ih(a, c);
    }
    function oh(a, b, c) {
      b = b.updateQueue;
      if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
        var d = b.lanes;
        d &= a.pendingLanes;
        c |= d;
        b.lanes = c;
        Cc(a, c);
      }
    }
    function ph(a, b) {
      var c = a.updateQueue, d = a.alternate;
      if (null !== d && (d = d.updateQueue, c === d)) {
        var e = null, f2 = null;
        c = c.firstBaseUpdate;
        if (null !== c) {
          do {
            var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
            null === f2 ? e = f2 = g : f2 = f2.next = g;
            c = c.next;
          } while (null !== c);
          null === f2 ? e = f2 = b : f2 = f2.next = b;
        } else e = f2 = b;
        c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f2, shared: d.shared, effects: d.effects };
        a.updateQueue = c;
        return;
      }
      a = c.lastBaseUpdate;
      null === a ? c.firstBaseUpdate = b : a.next = b;
      c.lastBaseUpdate = b;
    }
    function qh(a, b, c, d) {
      var e = a.updateQueue;
      jh = false;
      var f2 = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
      if (null !== h) {
        e.shared.pending = null;
        var k2 = h, l2 = k2.next;
        k2.next = null;
        null === g ? f2 = l2 : g.next = l2;
        g = k2;
        var m2 = a.alternate;
        null !== m2 && (m2 = m2.updateQueue, h = m2.lastBaseUpdate, h !== g && (null === h ? m2.firstBaseUpdate = l2 : h.next = l2, m2.lastBaseUpdate = k2));
      }
      if (null !== f2) {
        var q2 = e.baseState;
        g = 0;
        m2 = l2 = k2 = null;
        h = f2;
        do {
          var r2 = h.lane, y2 = h.eventTime;
          if ((d & r2) === r2) {
            null !== m2 && (m2 = m2.next = {
              eventTime: y2,
              lane: 0,
              tag: h.tag,
              payload: h.payload,
              callback: h.callback,
              next: null
            });
            a: {
              var n2 = a, t2 = h;
              r2 = b;
              y2 = c;
              switch (t2.tag) {
                case 1:
                  n2 = t2.payload;
                  if ("function" === typeof n2) {
                    q2 = n2.call(y2, q2, r2);
                    break a;
                  }
                  q2 = n2;
                  break a;
                case 3:
                  n2.flags = n2.flags & -65537 | 128;
                case 0:
                  n2 = t2.payload;
                  r2 = "function" === typeof n2 ? n2.call(y2, q2, r2) : n2;
                  if (null === r2 || void 0 === r2) break a;
                  q2 = A({}, q2, r2);
                  break a;
                case 2:
                  jh = true;
              }
            }
            null !== h.callback && 0 !== h.lane && (a.flags |= 64, r2 = e.effects, null === r2 ? e.effects = [h] : r2.push(h));
          } else y2 = { eventTime: y2, lane: r2, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, null === m2 ? (l2 = m2 = y2, k2 = q2) : m2 = m2.next = y2, g |= r2;
          h = h.next;
          if (null === h) if (h = e.shared.pending, null === h) break;
          else r2 = h, h = r2.next, r2.next = null, e.lastBaseUpdate = r2, e.shared.pending = null;
        } while (1);
        null === m2 && (k2 = q2);
        e.baseState = k2;
        e.firstBaseUpdate = l2;
        e.lastBaseUpdate = m2;
        b = e.shared.interleaved;
        if (null !== b) {
          e = b;
          do
            g |= e.lane, e = e.next;
          while (e !== b);
        } else null === f2 && (e.shared.lanes = 0);
        rh |= g;
        a.lanes = g;
        a.memoizedState = q2;
      }
    }
    function sh(a, b, c) {
      a = b.effects;
      b.effects = null;
      if (null !== a) for (b = 0; b < a.length; b++) {
        var d = a[b], e = d.callback;
        if (null !== e) {
          d.callback = null;
          d = c;
          if ("function" !== typeof e) throw Error(p(191, e));
          e.call(d);
        }
      }
    }
    var th = {}, uh = Uf(th), vh = Uf(th), wh = Uf(th);
    function xh(a) {
      if (a === th) throw Error(p(174));
      return a;
    }
    function yh(a, b) {
      G(wh, b);
      G(vh, a);
      G(uh, th);
      a = b.nodeType;
      switch (a) {
        case 9:
        case 11:
          b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
          break;
        default:
          a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
      }
      E(uh);
      G(uh, b);
    }
    function zh() {
      E(uh);
      E(vh);
      E(wh);
    }
    function Ah(a) {
      xh(wh.current);
      var b = xh(uh.current);
      var c = lb(b, a.type);
      b !== c && (G(vh, a), G(uh, c));
    }
    function Bh(a) {
      vh.current === a && (E(uh), E(vh));
    }
    var L = Uf(0);
    function Ch(a) {
      for (var b = a; null !== b; ) {
        if (13 === b.tag) {
          var c = b.memoizedState;
          if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
        } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
          if (0 !== (b.flags & 128)) return b;
        } else if (null !== b.child) {
          b.child.return = b;
          b = b.child;
          continue;
        }
        if (b === a) break;
        for (; null === b.sibling; ) {
          if (null === b.return || b.return === a) return null;
          b = b.return;
        }
        b.sibling.return = b.return;
        b = b.sibling;
      }
      return null;
    }
    var Dh = [];
    function Eh() {
      for (var a = 0; a < Dh.length; a++) Dh[a]._workInProgressVersionPrimary = null;
      Dh.length = 0;
    }
    var Fh = ua.ReactCurrentDispatcher, Gh = ua.ReactCurrentBatchConfig, Hh = 0, M = null, N = null, O = null, Ih = false, Jh = false, Kh = 0, Lh = 0;
    function P() {
      throw Error(p(321));
    }
    function Mh(a, b) {
      if (null === b) return false;
      for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return false;
      return true;
    }
    function Nh(a, b, c, d, e, f2) {
      Hh = f2;
      M = b;
      b.memoizedState = null;
      b.updateQueue = null;
      b.lanes = 0;
      Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
      a = c(d, e);
      if (Jh) {
        f2 = 0;
        do {
          Jh = false;
          Kh = 0;
          if (25 <= f2) throw Error(p(301));
          f2 += 1;
          O = N = null;
          b.updateQueue = null;
          Fh.current = Qh;
          a = c(d, e);
        } while (Jh);
      }
      Fh.current = Rh;
      b = null !== N && null !== N.next;
      Hh = 0;
      O = N = M = null;
      Ih = false;
      if (b) throw Error(p(300));
      return a;
    }
    function Sh() {
      var a = 0 !== Kh;
      Kh = 0;
      return a;
    }
    function Th() {
      var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      null === O ? M.memoizedState = O = a : O = O.next = a;
      return O;
    }
    function Uh() {
      if (null === N) {
        var a = M.alternate;
        a = null !== a ? a.memoizedState : null;
      } else a = N.next;
      var b = null === O ? M.memoizedState : O.next;
      if (null !== b) O = b, N = a;
      else {
        if (null === a) throw Error(p(310));
        N = a;
        a = { memoizedState: N.memoizedState, baseState: N.baseState, baseQueue: N.baseQueue, queue: N.queue, next: null };
        null === O ? M.memoizedState = O = a : O = O.next = a;
      }
      return O;
    }
    function Vh(a, b) {
      return "function" === typeof b ? b(a) : b;
    }
    function Wh(a) {
      var b = Uh(), c = b.queue;
      if (null === c) throw Error(p(311));
      c.lastRenderedReducer = a;
      var d = N, e = d.baseQueue, f2 = c.pending;
      if (null !== f2) {
        if (null !== e) {
          var g = e.next;
          e.next = f2.next;
          f2.next = g;
        }
        d.baseQueue = e = f2;
        c.pending = null;
      }
      if (null !== e) {
        f2 = e.next;
        d = d.baseState;
        var h = g = null, k2 = null, l2 = f2;
        do {
          var m2 = l2.lane;
          if ((Hh & m2) === m2) null !== k2 && (k2 = k2.next = { lane: 0, action: l2.action, hasEagerState: l2.hasEagerState, eagerState: l2.eagerState, next: null }), d = l2.hasEagerState ? l2.eagerState : a(d, l2.action);
          else {
            var q2 = {
              lane: m2,
              action: l2.action,
              hasEagerState: l2.hasEagerState,
              eagerState: l2.eagerState,
              next: null
            };
            null === k2 ? (h = k2 = q2, g = d) : k2 = k2.next = q2;
            M.lanes |= m2;
            rh |= m2;
          }
          l2 = l2.next;
        } while (null !== l2 && l2 !== f2);
        null === k2 ? g = d : k2.next = h;
        He(d, b.memoizedState) || (dh = true);
        b.memoizedState = d;
        b.baseState = g;
        b.baseQueue = k2;
        c.lastRenderedState = d;
      }
      a = c.interleaved;
      if (null !== a) {
        e = a;
        do
          f2 = e.lane, M.lanes |= f2, rh |= f2, e = e.next;
        while (e !== a);
      } else null === e && (c.lanes = 0);
      return [b.memoizedState, c.dispatch];
    }
    function Xh(a) {
      var b = Uh(), c = b.queue;
      if (null === c) throw Error(p(311));
      c.lastRenderedReducer = a;
      var d = c.dispatch, e = c.pending, f2 = b.memoizedState;
      if (null !== e) {
        c.pending = null;
        var g = e = e.next;
        do
          f2 = a(f2, g.action), g = g.next;
        while (g !== e);
        He(f2, b.memoizedState) || (dh = true);
        b.memoizedState = f2;
        null === b.baseQueue && (b.baseState = f2);
        c.lastRenderedState = f2;
      }
      return [f2, d];
    }
    function Yh() {
    }
    function Zh(a, b) {
      var c = M, d = Uh(), e = b(), f2 = !He(d.memoizedState, e);
      f2 && (d.memoizedState = e, dh = true);
      d = d.queue;
      $h(ai.bind(null, c, d, a), [a]);
      if (d.getSnapshot !== b || f2 || null !== O && O.memoizedState.tag & 1) {
        c.flags |= 2048;
        bi(9, ci.bind(null, c, d, e, b), void 0, null);
        if (null === Q) throw Error(p(349));
        0 !== (Hh & 30) || di(c, b, e);
      }
      return e;
    }
    function di(a, b, c) {
      a.flags |= 16384;
      a = { getSnapshot: b, value: c };
      b = M.updateQueue;
      null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
    }
    function ci(a, b, c, d) {
      b.value = c;
      b.getSnapshot = d;
      ei(b) && fi(a);
    }
    function ai(a, b, c) {
      return c(function() {
        ei(b) && fi(a);
      });
    }
    function ei(a) {
      var b = a.getSnapshot;
      a = a.value;
      try {
        var c = b();
        return !He(a, c);
      } catch (d) {
        return true;
      }
    }
    function fi(a) {
      var b = ih(a, 1);
      null !== b && gi(b, a, 1, -1);
    }
    function hi(a) {
      var b = Th();
      "function" === typeof a && (a = a());
      b.memoizedState = b.baseState = a;
      a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a };
      b.queue = a;
      a = a.dispatch = ii.bind(null, M, a);
      return [b.memoizedState, a];
    }
    function bi(a, b, c, d) {
      a = { tag: a, create: b, destroy: c, deps: d, next: null };
      b = M.updateQueue;
      null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
      return a;
    }
    function ji() {
      return Uh().memoizedState;
    }
    function ki(a, b, c, d) {
      var e = Th();
      M.flags |= a;
      e.memoizedState = bi(1 | b, c, void 0, void 0 === d ? null : d);
    }
    function li(a, b, c, d) {
      var e = Uh();
      d = void 0 === d ? null : d;
      var f2 = void 0;
      if (null !== N) {
        var g = N.memoizedState;
        f2 = g.destroy;
        if (null !== d && Mh(d, g.deps)) {
          e.memoizedState = bi(b, c, f2, d);
          return;
        }
      }
      M.flags |= a;
      e.memoizedState = bi(1 | b, c, f2, d);
    }
    function mi(a, b) {
      return ki(8390656, 8, a, b);
    }
    function $h(a, b) {
      return li(2048, 8, a, b);
    }
    function ni(a, b) {
      return li(4, 2, a, b);
    }
    function oi(a, b) {
      return li(4, 4, a, b);
    }
    function pi(a, b) {
      if ("function" === typeof b) return a = a(), b(a), function() {
        b(null);
      };
      if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {
        b.current = null;
      };
    }
    function qi(a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return li(4, 4, pi.bind(null, b, a), c);
    }
    function ri() {
    }
    function si(a, b) {
      var c = Uh();
      b = void 0 === b ? null : b;
      var d = c.memoizedState;
      if (null !== d && null !== b && Mh(b, d[1])) return d[0];
      c.memoizedState = [a, b];
      return a;
    }
    function ti(a, b) {
      var c = Uh();
      b = void 0 === b ? null : b;
      var d = c.memoizedState;
      if (null !== d && null !== b && Mh(b, d[1])) return d[0];
      a = a();
      c.memoizedState = [a, b];
      return a;
    }
    function ui(a, b, c) {
      if (0 === (Hh & 21)) return a.baseState && (a.baseState = false, dh = true), a.memoizedState = c;
      He(c, b) || (c = yc(), M.lanes |= c, rh |= c, a.baseState = true);
      return b;
    }
    function vi(a, b) {
      var c = C;
      C = 0 !== c && 4 > c ? c : 4;
      a(true);
      var d = Gh.transition;
      Gh.transition = {};
      try {
        a(false), b();
      } finally {
        C = c, Gh.transition = d;
      }
    }
    function wi() {
      return Uh().memoizedState;
    }
    function xi(a, b, c) {
      var d = yi(a);
      c = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
      if (zi(a)) Ai(b, c);
      else if (c = hh(a, b, c, d), null !== c) {
        var e = R();
        gi(c, a, d, e);
        Bi(c, b, d);
      }
    }
    function ii(a, b, c) {
      var d = yi(a), e = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
      if (zi(a)) Ai(b, e);
      else {
        var f2 = a.alternate;
        if (0 === a.lanes && (null === f2 || 0 === f2.lanes) && (f2 = b.lastRenderedReducer, null !== f2)) try {
          var g = b.lastRenderedState, h = f2(g, c);
          e.hasEagerState = true;
          e.eagerState = h;
          if (He(h, g)) {
            var k2 = b.interleaved;
            null === k2 ? (e.next = e, gh(b)) : (e.next = k2.next, k2.next = e);
            b.interleaved = e;
            return;
          }
        } catch (l2) {
        } finally {
        }
        c = hh(a, b, e, d);
        null !== c && (e = R(), gi(c, a, d, e), Bi(c, b, d));
      }
    }
    function zi(a) {
      var b = a.alternate;
      return a === M || null !== b && b === M;
    }
    function Ai(a, b) {
      Jh = Ih = true;
      var c = a.pending;
      null === c ? b.next = b : (b.next = c.next, c.next = b);
      a.pending = b;
    }
    function Bi(a, b, c) {
      if (0 !== (c & 4194240)) {
        var d = b.lanes;
        d &= a.pendingLanes;
        c |= d;
        b.lanes = c;
        Cc(a, c);
      }
    }
    var Rh = { readContext: eh, useCallback: P, useContext: P, useEffect: P, useImperativeHandle: P, useInsertionEffect: P, useLayoutEffect: P, useMemo: P, useReducer: P, useRef: P, useState: P, useDebugValue: P, useDeferredValue: P, useTransition: P, useMutableSource: P, useSyncExternalStore: P, useId: P, unstable_isNewReconciler: false }, Oh = { readContext: eh, useCallback: function(a, b) {
      Th().memoizedState = [a, void 0 === b ? null : b];
      return a;
    }, useContext: eh, useEffect: mi, useImperativeHandle: function(a, b, c) {
      c = null !== c && void 0 !== c ? c.concat([a]) : null;
      return ki(
        4194308,
        4,
        pi.bind(null, b, a),
        c
      );
    }, useLayoutEffect: function(a, b) {
      return ki(4194308, 4, a, b);
    }, useInsertionEffect: function(a, b) {
      return ki(4, 2, a, b);
    }, useMemo: function(a, b) {
      var c = Th();
      b = void 0 === b ? null : b;
      a = a();
      c.memoizedState = [a, b];
      return a;
    }, useReducer: function(a, b, c) {
      var d = Th();
      b = void 0 !== c ? c(b) : b;
      d.memoizedState = d.baseState = b;
      a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
      d.queue = a;
      a = a.dispatch = xi.bind(null, M, a);
      return [d.memoizedState, a];
    }, useRef: function(a) {
      var b = Th();
      a = { current: a };
      return b.memoizedState = a;
    }, useState: hi, useDebugValue: ri, useDeferredValue: function(a) {
      return Th().memoizedState = a;
    }, useTransition: function() {
      var a = hi(false), b = a[0];
      a = vi.bind(null, a[1]);
      Th().memoizedState = a;
      return [b, a];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(a, b, c) {
      var d = M, e = Th();
      if (I) {
        if (void 0 === c) throw Error(p(407));
        c = c();
      } else {
        c = b();
        if (null === Q) throw Error(p(349));
        0 !== (Hh & 30) || di(d, b, c);
      }
      e.memoizedState = c;
      var f2 = { value: c, getSnapshot: b };
      e.queue = f2;
      mi(ai.bind(
        null,
        d,
        f2,
        a
      ), [a]);
      d.flags |= 2048;
      bi(9, ci.bind(null, d, f2, c, b), void 0, null);
      return c;
    }, useId: function() {
      var a = Th(), b = Q.identifierPrefix;
      if (I) {
        var c = sg;
        var d = rg;
        c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
        b = ":" + b + "R" + c;
        c = Kh++;
        0 < c && (b += "H" + c.toString(32));
        b += ":";
      } else c = Lh++, b = ":" + b + "r" + c.toString(32) + ":";
      return a.memoizedState = b;
    }, unstable_isNewReconciler: false }, Ph = {
      readContext: eh,
      useCallback: si,
      useContext: eh,
      useEffect: $h,
      useImperativeHandle: qi,
      useInsertionEffect: ni,
      useLayoutEffect: oi,
      useMemo: ti,
      useReducer: Wh,
      useRef: ji,
      useState: function() {
        return Wh(Vh);
      },
      useDebugValue: ri,
      useDeferredValue: function(a) {
        var b = Uh();
        return ui(b, N.memoizedState, a);
      },
      useTransition: function() {
        var a = Wh(Vh)[0], b = Uh().memoizedState;
        return [a, b];
      },
      useMutableSource: Yh,
      useSyncExternalStore: Zh,
      useId: wi,
      unstable_isNewReconciler: false
    }, Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: function() {
      return Xh(Vh);
    }, useDebugValue: ri, useDeferredValue: function(a) {
      var b = Uh();
      return null === N ? b.memoizedState = a : ui(b, N.memoizedState, a);
    }, useTransition: function() {
      var a = Xh(Vh)[0], b = Uh().memoizedState;
      return [a, b];
    }, useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: false };
    function Ci(a, b) {
      if (a && a.defaultProps) {
        b = A({}, b);
        a = a.defaultProps;
        for (var c in a) void 0 === b[c] && (b[c] = a[c]);
        return b;
      }
      return b;
    }
    function Di(a, b, c, d) {
      b = a.memoizedState;
      c = c(d, b);
      c = null === c || void 0 === c ? b : A({}, b, c);
      a.memoizedState = c;
      0 === a.lanes && (a.updateQueue.baseState = c);
    }
    var Ei = { isMounted: function(a) {
      return (a = a._reactInternals) ? Vb(a) === a : false;
    }, enqueueSetState: function(a, b, c) {
      a = a._reactInternals;
      var d = R(), e = yi(a), f2 = mh(d, e);
      f2.payload = b;
      void 0 !== c && null !== c && (f2.callback = c);
      b = nh(a, f2, e);
      null !== b && (gi(b, a, e, d), oh(b, a, e));
    }, enqueueReplaceState: function(a, b, c) {
      a = a._reactInternals;
      var d = R(), e = yi(a), f2 = mh(d, e);
      f2.tag = 1;
      f2.payload = b;
      void 0 !== c && null !== c && (f2.callback = c);
      b = nh(a, f2, e);
      null !== b && (gi(b, a, e, d), oh(b, a, e));
    }, enqueueForceUpdate: function(a, b) {
      a = a._reactInternals;
      var c = R(), d = yi(a), e = mh(c, d);
      e.tag = 2;
      void 0 !== b && null !== b && (e.callback = b);
      b = nh(a, e, d);
      null !== b && (gi(b, a, d, c), oh(b, a, d));
    } };
    function Fi(a, b, c, d, e, f2, g) {
      a = a.stateNode;
      return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f2, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f2) : true;
    }
    function Gi(a, b, c) {
      var d = false, e = Vf;
      var f2 = b.contextType;
      "object" === typeof f2 && null !== f2 ? f2 = eh(f2) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f2 = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
      b = new b(c, f2);
      a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
      b.updater = Ei;
      a.stateNode = b;
      b._reactInternals = a;
      d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f2);
      return b;
    }
    function Hi(a, b, c, d) {
      a = b.state;
      "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
      "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
      b.state !== a && Ei.enqueueReplaceState(b, b.state, null);
    }
    function Ii(a, b, c, d) {
      var e = a.stateNode;
      e.props = c;
      e.state = a.memoizedState;
      e.refs = {};
      kh(a);
      var f2 = b.contextType;
      "object" === typeof f2 && null !== f2 ? e.context = eh(f2) : (f2 = Zf(b) ? Xf : H.current, e.context = Yf(a, f2));
      e.state = a.memoizedState;
      f2 = b.getDerivedStateFromProps;
      "function" === typeof f2 && (Di(a, b, f2, c), e.state = a.memoizedState);
      "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c, e, d), e.state = a.memoizedState);
      "function" === typeof e.componentDidMount && (a.flags |= 4194308);
    }
    function Ji(a, b) {
      try {
        var c = "", d = b;
        do
          c += Pa(d), d = d.return;
        while (d);
        var e = c;
      } catch (f2) {
        e = "\nError generating stack: " + f2.message + "\n" + f2.stack;
      }
      return { value: a, source: b, stack: e, digest: null };
    }
    function Ki(a, b, c) {
      return { value: a, source: null, stack: null != c ? c : null, digest: null != b ? b : null };
    }
    function Li(a, b) {
      try {
        console.error(b.value);
      } catch (c) {
        setTimeout(function() {
          throw c;
        });
      }
    }
    var Mi = "function" === typeof WeakMap ? WeakMap : Map;
    function Ni(a, b, c) {
      c = mh(-1, c);
      c.tag = 3;
      c.payload = { element: null };
      var d = b.value;
      c.callback = function() {
        Oi || (Oi = true, Pi = d);
        Li(a, b);
      };
      return c;
    }
    function Qi(a, b, c) {
      c = mh(-1, c);
      c.tag = 3;
      var d = a.type.getDerivedStateFromError;
      if ("function" === typeof d) {
        var e = b.value;
        c.payload = function() {
          return d(e);
        };
        c.callback = function() {
          Li(a, b);
        };
      }
      var f2 = a.stateNode;
      null !== f2 && "function" === typeof f2.componentDidCatch && (c.callback = function() {
        Li(a, b);
        "function" !== typeof d && (null === Ri ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
        var c2 = b.stack;
        this.componentDidCatch(b.value, { componentStack: null !== c2 ? c2 : "" });
      });
      return c;
    }
    function Si(a, b, c) {
      var d = a.pingCache;
      if (null === d) {
        d = a.pingCache = new Mi();
        var e = /* @__PURE__ */ new Set();
        d.set(b, e);
      } else e = d.get(b), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b, e));
      e.has(c) || (e.add(c), a = Ti.bind(null, a, b, c), b.then(a, a));
    }
    function Ui(a) {
      do {
        var b;
        if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? true : false : true;
        if (b) return a;
        a = a.return;
      } while (null !== a);
      return null;
    }
    function Vi(a, b, c, d, e) {
      if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = mh(-1, 1), b.tag = 2, nh(c, b, 1))), c.lanes |= 1), a;
      a.flags |= 65536;
      a.lanes = e;
      return a;
    }
    var Wi = ua.ReactCurrentOwner, dh = false;
    function Xi(a, b, c, d) {
      b.child = null === a ? Vg(b, null, c, d) : Ug(b, a.child, c, d);
    }
    function Yi(a, b, c, d, e) {
      c = c.render;
      var f2 = b.ref;
      ch(b, e);
      d = Nh(a, b, c, d, f2, e);
      c = Sh();
      if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
      I && c && vg(b);
      b.flags |= 1;
      Xi(a, b, d, e);
      return b.child;
    }
    function $i(a, b, c, d, e) {
      if (null === a) {
        var f2 = c.type;
        if ("function" === typeof f2 && !aj(f2) && void 0 === f2.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f2, bj(a, b, f2, d, e);
        a = Rg(c.type, null, d, b, b.mode, e);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
      }
      f2 = a.child;
      if (0 === (a.lanes & e)) {
        var g = f2.memoizedProps;
        c = c.compare;
        c = null !== c ? c : Ie;
        if (c(g, d) && a.ref === b.ref) return Zi(a, b, e);
      }
      b.flags |= 1;
      a = Pg(f2, d);
      a.ref = b.ref;
      a.return = b;
      return b.child = a;
    }
    function bj(a, b, c, d, e) {
      if (null !== a) {
        var f2 = a.memoizedProps;
        if (Ie(f2, d) && a.ref === b.ref) if (dh = false, b.pendingProps = d = f2, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (dh = true);
        else return b.lanes = a.lanes, Zi(a, b, e);
      }
      return cj(a, b, c, d, e);
    }
    function dj(a, b, c) {
      var d = b.pendingProps, e = d.children, f2 = null !== a ? a.memoizedState : null;
      if ("hidden" === d.mode) if (0 === (b.mode & 1)) b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(ej, fj), fj |= c;
      else {
        if (0 === (c & 1073741824)) return a = null !== f2 ? f2.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b.updateQueue = null, G(ej, fj), fj |= a, null;
        b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
        d = null !== f2 ? f2.baseLanes : c;
        G(ej, fj);
        fj |= d;
      }
      else null !== f2 ? (d = f2.baseLanes | c, b.memoizedState = null) : d = c, G(ej, fj), fj |= d;
      Xi(a, b, e, c);
      return b.child;
    }
    function gj(a, b) {
      var c = b.ref;
      if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
    }
    function cj(a, b, c, d, e) {
      var f2 = Zf(c) ? Xf : H.current;
      f2 = Yf(b, f2);
      ch(b, e);
      c = Nh(a, b, c, d, f2, e);
      d = Sh();
      if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
      I && d && vg(b);
      b.flags |= 1;
      Xi(a, b, c, e);
      return b.child;
    }
    function hj(a, b, c, d, e) {
      if (Zf(c)) {
        var f2 = true;
        cg(b);
      } else f2 = false;
      ch(b, e);
      if (null === b.stateNode) ij(a, b), Gi(b, c, d), Ii(b, c, d, e), d = true;
      else if (null === a) {
        var g = b.stateNode, h = b.memoizedProps;
        g.props = h;
        var k2 = g.context, l2 = c.contextType;
        "object" === typeof l2 && null !== l2 ? l2 = eh(l2) : (l2 = Zf(c) ? Xf : H.current, l2 = Yf(b, l2));
        var m2 = c.getDerivedStateFromProps, q2 = "function" === typeof m2 || "function" === typeof g.getSnapshotBeforeUpdate;
        q2 || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k2 !== l2) && Hi(b, g, d, l2);
        jh = false;
        var r2 = b.memoizedState;
        g.state = r2;
        qh(b, d, g, e);
        k2 = b.memoizedState;
        h !== d || r2 !== k2 || Wf.current || jh ? ("function" === typeof m2 && (Di(b, c, m2, d), k2 = b.memoizedState), (h = jh || Fi(b, c, h, d, r2, k2, l2)) ? (q2 || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k2), g.props = d, g.state = k2, g.context = l2, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = false);
      } else {
        g = b.stateNode;
        lh(a, b);
        h = b.memoizedProps;
        l2 = b.type === b.elementType ? h : Ci(b.type, h);
        g.props = l2;
        q2 = b.pendingProps;
        r2 = g.context;
        k2 = c.contextType;
        "object" === typeof k2 && null !== k2 ? k2 = eh(k2) : (k2 = Zf(c) ? Xf : H.current, k2 = Yf(b, k2));
        var y2 = c.getDerivedStateFromProps;
        (m2 = "function" === typeof y2 || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q2 || r2 !== k2) && Hi(b, g, d, k2);
        jh = false;
        r2 = b.memoizedState;
        g.state = r2;
        qh(b, d, g, e);
        var n2 = b.memoizedState;
        h !== q2 || r2 !== n2 || Wf.current || jh ? ("function" === typeof y2 && (Di(b, c, y2, d), n2 = b.memoizedState), (l2 = jh || Fi(b, c, l2, d, r2, n2, k2) || false) ? (m2 || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n2, k2), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n2, k2)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n2), g.props = d, g.state = n2, g.context = k2, d = l2) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r2 === a.memoizedState || (b.flags |= 1024), d = false);
      }
      return jj(a, b, c, d, f2, e);
    }
    function jj(a, b, c, d, e, f2) {
      gj(a, b);
      var g = 0 !== (b.flags & 128);
      if (!d && !g) return e && dg(b, c, false), Zi(a, b, f2);
      d = b.stateNode;
      Wi.current = b;
      var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
      b.flags |= 1;
      null !== a && g ? (b.child = Ug(b, a.child, null, f2), b.child = Ug(b, null, h, f2)) : Xi(a, b, h, f2);
      b.memoizedState = d.state;
      e && dg(b, c, true);
      return b.child;
    }
    function kj(a) {
      var b = a.stateNode;
      b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, false);
      yh(a, b.containerInfo);
    }
    function lj(a, b, c, d, e) {
      Ig();
      Jg(e);
      b.flags |= 256;
      Xi(a, b, c, d);
      return b.child;
    }
    var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
    function nj(a) {
      return { baseLanes: a, cachePool: null, transitions: null };
    }
    function oj(a, b, c) {
      var d = b.pendingProps, e = L.current, f2 = false, g = 0 !== (b.flags & 128), h;
      (h = g) || (h = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
      if (h) f2 = true, b.flags &= -129;
      else if (null === a || null !== a.memoizedState) e |= 1;
      G(L, e & 1);
      if (null === a) {
        Eg(b);
        a = b.memoizedState;
        if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
        g = d.children;
        a = d.fallback;
        return f2 ? (d = b.mode, f2 = b.child, g = { mode: "hidden", children: g }, 0 === (d & 1) && null !== f2 ? (f2.childLanes = 0, f2.pendingProps = g) : f2 = pj(g, d, 0, null), a = Tg(a, d, c, null), f2.return = b, a.return = b, f2.sibling = a, b.child = f2, b.child.memoizedState = nj(c), b.memoizedState = mj, a) : qj(b, g);
      }
      e = a.memoizedState;
      if (null !== e && (h = e.dehydrated, null !== h)) return rj(a, b, g, d, h, e, c);
      if (f2) {
        f2 = d.fallback;
        g = b.mode;
        e = a.child;
        h = e.sibling;
        var k2 = { mode: "hidden", children: d.children };
        0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k2, b.deletions = null) : (d = Pg(e, k2), d.subtreeFlags = e.subtreeFlags & 14680064);
        null !== h ? f2 = Pg(h, f2) : (f2 = Tg(f2, g, c, null), f2.flags |= 2);
        f2.return = b;
        d.return = b;
        d.sibling = f2;
        b.child = d;
        d = f2;
        f2 = b.child;
        g = a.child.memoizedState;
        g = null === g ? nj(c) : { baseLanes: g.baseLanes | c, cachePool: null, transitions: g.transitions };
        f2.memoizedState = g;
        f2.childLanes = a.childLanes & ~c;
        b.memoizedState = mj;
        return d;
      }
      f2 = a.child;
      a = f2.sibling;
      d = Pg(f2, { mode: "visible", children: d.children });
      0 === (b.mode & 1) && (d.lanes = c);
      d.return = b;
      d.sibling = null;
      null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
      b.child = d;
      b.memoizedState = null;
      return d;
    }
    function qj(a, b) {
      b = pj({ mode: "visible", children: b }, a.mode, 0, null);
      b.return = a;
      return a.child = b;
    }
    function sj(a, b, c, d) {
      null !== d && Jg(d);
      Ug(b, a.child, null, c);
      a = qj(b, b.pendingProps.children);
      a.flags |= 2;
      b.memoizedState = null;
      return a;
    }
    function rj(a, b, c, d, e, f2, g) {
      if (c) {
        if (b.flags & 256) return b.flags &= -257, d = Ki(Error(p(422))), sj(a, b, g, d);
        if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
        f2 = d.fallback;
        e = b.mode;
        d = pj({ mode: "visible", children: d.children }, e, 0, null);
        f2 = Tg(f2, e, g, null);
        f2.flags |= 2;
        d.return = b;
        f2.return = b;
        d.sibling = f2;
        b.child = d;
        0 !== (b.mode & 1) && Ug(b, a.child, null, g);
        b.child.memoizedState = nj(g);
        b.memoizedState = mj;
        return f2;
      }
      if (0 === (b.mode & 1)) return sj(a, b, g, null);
      if ("$!" === e.data) {
        d = e.nextSibling && e.nextSibling.dataset;
        if (d) var h = d.dgst;
        d = h;
        f2 = Error(p(419));
        d = Ki(f2, d, void 0);
        return sj(a, b, g, d);
      }
      h = 0 !== (g & a.childLanes);
      if (dh || h) {
        d = Q;
        if (null !== d) {
          switch (g & -g) {
            case 4:
              e = 2;
              break;
            case 16:
              e = 8;
              break;
            case 64:
            case 128:
            case 256:
            case 512:
            case 1024:
            case 2048:
            case 4096:
            case 8192:
            case 16384:
            case 32768:
            case 65536:
            case 131072:
            case 262144:
            case 524288:
            case 1048576:
            case 2097152:
            case 4194304:
            case 8388608:
            case 16777216:
            case 33554432:
            case 67108864:
              e = 32;
              break;
            case 536870912:
              e = 268435456;
              break;
            default:
              e = 0;
          }
          e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
          0 !== e && e !== f2.retryLane && (f2.retryLane = e, ih(a, e), gi(d, a, e, -1));
        }
        tj();
        d = Ki(Error(p(421)));
        return sj(a, b, g, d);
      }
      if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = uj.bind(null, a), e._reactRetry = b, null;
      a = f2.treeContext;
      yg = Lf(e.nextSibling);
      xg = b;
      I = true;
      zg = null;
      null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
      b = qj(b, d.children);
      b.flags |= 4096;
      return b;
    }
    function vj(a, b, c) {
      a.lanes |= b;
      var d = a.alternate;
      null !== d && (d.lanes |= b);
      bh(a.return, b, c);
    }
    function wj(a, b, c, d, e) {
      var f2 = a.memoizedState;
      null === f2 ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f2.isBackwards = b, f2.rendering = null, f2.renderingStartTime = 0, f2.last = d, f2.tail = c, f2.tailMode = e);
    }
    function xj(a, b, c) {
      var d = b.pendingProps, e = d.revealOrder, f2 = d.tail;
      Xi(a, b, d.children, c);
      d = L.current;
      if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;
      else {
        if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a; ) {
          if (13 === a.tag) null !== a.memoizedState && vj(a, c, b);
          else if (19 === a.tag) vj(a, c, b);
          else if (null !== a.child) {
            a.child.return = a;
            a = a.child;
            continue;
          }
          if (a === b) break a;
          for (; null === a.sibling; ) {
            if (null === a.return || a.return === b) break a;
            a = a.return;
          }
          a.sibling.return = a.return;
          a = a.sibling;
        }
        d &= 1;
      }
      G(L, d);
      if (0 === (b.mode & 1)) b.memoizedState = null;
      else switch (e) {
        case "forwards":
          c = b.child;
          for (e = null; null !== c; ) a = c.alternate, null !== a && null === Ch(a) && (e = c), c = c.sibling;
          c = e;
          null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
          wj(b, false, e, c, f2);
          break;
        case "backwards":
          c = null;
          e = b.child;
          for (b.child = null; null !== e; ) {
            a = e.alternate;
            if (null !== a && null === Ch(a)) {
              b.child = e;
              break;
            }
            a = e.sibling;
            e.sibling = c;
            c = e;
            e = a;
          }
          wj(b, true, c, null, f2);
          break;
        case "together":
          wj(b, false, null, null, void 0);
          break;
        default:
          b.memoizedState = null;
      }
      return b.child;
    }
    function ij(a, b) {
      0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
    }
    function Zi(a, b, c) {
      null !== a && (b.dependencies = a.dependencies);
      rh |= b.lanes;
      if (0 === (c & b.childLanes)) return null;
      if (null !== a && b.child !== a.child) throw Error(p(153));
      if (null !== b.child) {
        a = b.child;
        c = Pg(a, a.pendingProps);
        b.child = c;
        for (c.return = b; null !== a.sibling; ) a = a.sibling, c = c.sibling = Pg(a, a.pendingProps), c.return = b;
        c.sibling = null;
      }
      return b.child;
    }
    function yj(a, b, c) {
      switch (b.tag) {
        case 3:
          kj(b);
          Ig();
          break;
        case 5:
          Ah(b);
          break;
        case 1:
          Zf(b.type) && cg(b);
          break;
        case 4:
          yh(b, b.stateNode.containerInfo);
          break;
        case 10:
          var d = b.type._context, e = b.memoizedProps.value;
          G(Wg, d._currentValue);
          d._currentValue = e;
          break;
        case 13:
          d = b.memoizedState;
          if (null !== d) {
            if (null !== d.dehydrated) return G(L, L.current & 1), b.flags |= 128, null;
            if (0 !== (c & b.child.childLanes)) return oj(a, b, c);
            G(L, L.current & 1);
            a = Zi(a, b, c);
            return null !== a ? a.sibling : null;
          }
          G(L, L.current & 1);
          break;
        case 19:
          d = 0 !== (c & b.childLanes);
          if (0 !== (a.flags & 128)) {
            if (d) return xj(a, b, c);
            b.flags |= 128;
          }
          e = b.memoizedState;
          null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
          G(L, L.current);
          if (d) break;
          else return null;
        case 22:
        case 23:
          return b.lanes = 0, dj(a, b, c);
      }
      return Zi(a, b, c);
    }
    var zj, Aj, Bj, Cj;
    zj = function(a, b) {
      for (var c = b.child; null !== c; ) {
        if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
        else if (4 !== c.tag && null !== c.child) {
          c.child.return = c;
          c = c.child;
          continue;
        }
        if (c === b) break;
        for (; null === c.sibling; ) {
          if (null === c.return || c.return === b) return;
          c = c.return;
        }
        c.sibling.return = c.return;
        c = c.sibling;
      }
    };
    Aj = function() {
    };
    Bj = function(a, b, c, d) {
      var e = a.memoizedProps;
      if (e !== d) {
        a = b.stateNode;
        xh(uh.current);
        var f2 = null;
        switch (c) {
          case "input":
            e = Ya(a, e);
            d = Ya(a, d);
            f2 = [];
            break;
          case "select":
            e = A({}, e, { value: void 0 });
            d = A({}, d, { value: void 0 });
            f2 = [];
            break;
          case "textarea":
            e = gb(a, e);
            d = gb(a, d);
            f2 = [];
            break;
          default:
            "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
        }
        ub(c, d);
        var g;
        c = null;
        for (l2 in e) if (!d.hasOwnProperty(l2) && e.hasOwnProperty(l2) && null != e[l2]) if ("style" === l2) {
          var h = e[l2];
          for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
        } else "dangerouslySetInnerHTML" !== l2 && "children" !== l2 && "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && "autoFocus" !== l2 && (ea.hasOwnProperty(l2) ? f2 || (f2 = []) : (f2 = f2 || []).push(l2, null));
        for (l2 in d) {
          var k2 = d[l2];
          h = null != e ? e[l2] : void 0;
          if (d.hasOwnProperty(l2) && k2 !== h && (null != k2 || null != h)) if ("style" === l2) if (h) {
            for (g in h) !h.hasOwnProperty(g) || k2 && k2.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
            for (g in k2) k2.hasOwnProperty(g) && h[g] !== k2[g] && (c || (c = {}), c[g] = k2[g]);
          } else c || (f2 || (f2 = []), f2.push(
            l2,
            c
          )), c = k2;
          else "dangerouslySetInnerHTML" === l2 ? (k2 = k2 ? k2.__html : void 0, h = h ? h.__html : void 0, null != k2 && h !== k2 && (f2 = f2 || []).push(l2, k2)) : "children" === l2 ? "string" !== typeof k2 && "number" !== typeof k2 || (f2 = f2 || []).push(l2, "" + k2) : "suppressContentEditableWarning" !== l2 && "suppressHydrationWarning" !== l2 && (ea.hasOwnProperty(l2) ? (null != k2 && "onScroll" === l2 && D("scroll", a), f2 || h === k2 || (f2 = [])) : (f2 = f2 || []).push(l2, k2));
        }
        c && (f2 = f2 || []).push("style", c);
        var l2 = f2;
        if (b.updateQueue = l2) b.flags |= 4;
      }
    };
    Cj = function(a, b, c, d) {
      c !== d && (b.flags |= 4);
    };
    function Dj(a, b) {
      if (!I) switch (a.tailMode) {
        case "hidden":
          b = a.tail;
          for (var c = null; null !== b; ) null !== b.alternate && (c = b), b = b.sibling;
          null === c ? a.tail = null : c.sibling = null;
          break;
        case "collapsed":
          c = a.tail;
          for (var d = null; null !== c; ) null !== c.alternate && (d = c), c = c.sibling;
          null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
      }
    }
    function S(a) {
      var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
      if (b) for (var e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
      else for (e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
      a.subtreeFlags |= d;
      a.childLanes = c;
      return b;
    }
    function Ej(a, b, c) {
      var d = b.pendingProps;
      wg(b);
      switch (b.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return S(b), null;
        case 1:
          return Zf(b.type) && $f(), S(b), null;
        case 3:
          d = b.stateNode;
          zh();
          E(Wf);
          E(H);
          Eh();
          d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
          if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Fj(zg), zg = null));
          Aj(a, b);
          S(b);
          return null;
        case 5:
          Bh(b);
          var e = xh(wh.current);
          c = b.type;
          if (null !== a && null != b.stateNode) Bj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
          else {
            if (!d) {
              if (null === b.stateNode) throw Error(p(166));
              S(b);
              return null;
            }
            a = xh(uh.current);
            if (Gg(b)) {
              d = b.stateNode;
              c = b.type;
              var f2 = b.memoizedProps;
              d[Of] = b;
              d[Pf] = f2;
              a = 0 !== (b.mode & 1);
              switch (c) {
                case "dialog":
                  D("cancel", d);
                  D("close", d);
                  break;
                case "iframe":
                case "object":
                case "embed":
                  D("load", d);
                  break;
                case "video":
                case "audio":
                  for (e = 0; e < lf.length; e++) D(lf[e], d);
                  break;
                case "source":
                  D("error", d);
                  break;
                case "img":
                case "image":
                case "link":
                  D(
                    "error",
                    d
                  );
                  D("load", d);
                  break;
                case "details":
                  D("toggle", d);
                  break;
                case "input":
                  Za(d, f2);
                  D("invalid", d);
                  break;
                case "select":
                  d._wrapperState = { wasMultiple: !!f2.multiple };
                  D("invalid", d);
                  break;
                case "textarea":
                  hb(d, f2), D("invalid", d);
              }
              ub(c, f2);
              e = null;
              for (var g in f2) if (f2.hasOwnProperty(g)) {
                var h = f2[g];
                "children" === g ? "string" === typeof h ? d.textContent !== h && (true !== f2.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (true !== f2.suppressHydrationWarning && Af(
                  d.textContent,
                  h,
                  a
                ), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
              }
              switch (c) {
                case "input":
                  Va(d);
                  db(d, f2, true);
                  break;
                case "textarea":
                  Va(d);
                  jb(d);
                  break;
                case "select":
                case "option":
                  break;
                default:
                  "function" === typeof f2.onClick && (d.onclick = Bf);
              }
              d = e;
              b.updateQueue = d;
              null !== d && (b.flags |= 4);
            } else {
              g = 9 === e.nodeType ? e : e.ownerDocument;
              "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
              "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, { is: d.is }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = true : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
              a[Of] = b;
              a[Pf] = d;
              zj(a, b, false, false);
              b.stateNode = a;
              a: {
                g = vb(c, d);
                switch (c) {
                  case "dialog":
                    D("cancel", a);
                    D("close", a);
                    e = d;
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D("load", a);
                    e = d;
                    break;
                  case "video":
                  case "audio":
                    for (e = 0; e < lf.length; e++) D(lf[e], a);
                    e = d;
                    break;
                  case "source":
                    D("error", a);
                    e = d;
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D(
                      "error",
                      a
                    );
                    D("load", a);
                    e = d;
                    break;
                  case "details":
                    D("toggle", a);
                    e = d;
                    break;
                  case "input":
                    Za(a, d);
                    e = Ya(a, d);
                    D("invalid", a);
                    break;
                  case "option":
                    e = d;
                    break;
                  case "select":
                    a._wrapperState = { wasMultiple: !!d.multiple };
                    e = A({}, d, { value: void 0 });
                    D("invalid", a);
                    break;
                  case "textarea":
                    hb(a, d);
                    e = gb(a, d);
                    D("invalid", a);
                    break;
                  default:
                    e = d;
                }
                ub(c, e);
                h = e;
                for (f2 in h) if (h.hasOwnProperty(f2)) {
                  var k2 = h[f2];
                  "style" === f2 ? sb(a, k2) : "dangerouslySetInnerHTML" === f2 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a, k2)) : "children" === f2 ? "string" === typeof k2 ? ("textarea" !== c || "" !== k2) && ob(a, k2) : "number" === typeof k2 && ob(a, "" + k2) : "suppressContentEditableWarning" !== f2 && "suppressHydrationWarning" !== f2 && "autoFocus" !== f2 && (ea.hasOwnProperty(f2) ? null != k2 && "onScroll" === f2 && D("scroll", a) : null != k2 && ta(a, f2, k2, g));
                }
                switch (c) {
                  case "input":
                    Va(a);
                    db(a, d, false);
                    break;
                  case "textarea":
                    Va(a);
                    jb(a);
                    break;
                  case "option":
                    null != d.value && a.setAttribute("value", "" + Sa(d.value));
                    break;
                  case "select":
                    a.multiple = !!d.multiple;
                    f2 = d.value;
                    null != f2 ? fb(a, !!d.multiple, f2, false) : null != d.defaultValue && fb(
                      a,
                      !!d.multiple,
                      d.defaultValue,
                      true
                    );
                    break;
                  default:
                    "function" === typeof e.onClick && (a.onclick = Bf);
                }
                switch (c) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    d = !!d.autoFocus;
                    break a;
                  case "img":
                    d = true;
                    break a;
                  default:
                    d = false;
                }
              }
              d && (b.flags |= 4);
            }
            null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
          }
          S(b);
          return null;
        case 6:
          if (a && null != b.stateNode) Cj(a, b, a.memoizedProps, d);
          else {
            if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));
            c = xh(wh.current);
            xh(uh.current);
            if (Gg(b)) {
              d = b.stateNode;
              c = b.memoizedProps;
              d[Of] = b;
              if (f2 = d.nodeValue !== c) {
                if (a = xg, null !== a) switch (a.tag) {
                  case 3:
                    Af(d.nodeValue, c, 0 !== (a.mode & 1));
                    break;
                  case 5:
                    true !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
                }
              }
              f2 && (b.flags |= 4);
            } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
          }
          S(b);
          return null;
        case 13:
          E(L);
          d = b.memoizedState;
          if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
            if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f2 = false;
            else if (f2 = Gg(b), null !== d && null !== d.dehydrated) {
              if (null === a) {
                if (!f2) throw Error(p(318));
                f2 = b.memoizedState;
                f2 = null !== f2 ? f2.dehydrated : null;
                if (!f2) throw Error(p(317));
                f2[Of] = b;
              } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
              S(b);
              f2 = false;
            } else null !== zg && (Fj(zg), zg = null), f2 = true;
            if (!f2) return b.flags & 65536 ? b : null;
          }
          if (0 !== (b.flags & 128)) return b.lanes = c, b;
          d = null !== d;
          d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (L.current & 1) ? 0 === T && (T = 3) : tj()));
          null !== b.updateQueue && (b.flags |= 4);
          S(b);
          return null;
        case 4:
          return zh(), Aj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
        case 10:
          return ah(b.type._context), S(b), null;
        case 17:
          return Zf(b.type) && $f(), S(b), null;
        case 19:
          E(L);
          f2 = b.memoizedState;
          if (null === f2) return S(b), null;
          d = 0 !== (b.flags & 128);
          g = f2.rendering;
          if (null === g) if (d) Dj(f2, false);
          else {
            if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a; ) {
              g = Ch(a);
              if (null !== g) {
                b.flags |= 128;
                Dj(f2, false);
                d = g.updateQueue;
                null !== d && (b.updateQueue = d, b.flags |= 4);
                b.subtreeFlags = 0;
                d = c;
                for (c = b.child; null !== c; ) f2 = c, a = d, f2.flags &= 14680066, g = f2.alternate, null === g ? (f2.childLanes = 0, f2.lanes = a, f2.child = null, f2.subtreeFlags = 0, f2.memoizedProps = null, f2.memoizedState = null, f2.updateQueue = null, f2.dependencies = null, f2.stateNode = null) : (f2.childLanes = g.childLanes, f2.lanes = g.lanes, f2.child = g.child, f2.subtreeFlags = 0, f2.deletions = null, f2.memoizedProps = g.memoizedProps, f2.memoizedState = g.memoizedState, f2.updateQueue = g.updateQueue, f2.type = g.type, a = g.dependencies, f2.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;
                G(L, L.current & 1 | 2);
                return b.child;
              }
              a = a.sibling;
            }
            null !== f2.tail && B() > Gj && (b.flags |= 128, d = true, Dj(f2, false), b.lanes = 4194304);
          }
          else {
            if (!d) if (a = Ch(g), null !== a) {
              if (b.flags |= 128, d = true, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Dj(f2, true), null === f2.tail && "hidden" === f2.tailMode && !g.alternate && !I) return S(b), null;
            } else 2 * B() - f2.renderingStartTime > Gj && 1073741824 !== c && (b.flags |= 128, d = true, Dj(f2, false), b.lanes = 4194304);
            f2.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f2.last, null !== c ? c.sibling = g : b.child = g, f2.last = g);
          }
          if (null !== f2.tail) return b = f2.tail, f2.rendering = b, f2.tail = b.sibling, f2.renderingStartTime = B(), b.sibling = null, c = L.current, G(L, d ? c & 1 | 2 : c & 1), b;
          S(b);
          return null;
        case 22:
        case 23:
          return Hj(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (fj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(p(156, b.tag));
    }
    function Ij(a, b) {
      wg(b);
      switch (b.tag) {
        case 1:
          return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 3:
          return zh(), E(Wf), E(H), Eh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
        case 5:
          return Bh(b), null;
        case 13:
          E(L);
          a = b.memoizedState;
          if (null !== a && null !== a.dehydrated) {
            if (null === b.alternate) throw Error(p(340));
            Ig();
          }
          a = b.flags;
          return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
        case 19:
          return E(L), null;
        case 4:
          return zh(), null;
        case 10:
          return ah(b.type._context), null;
        case 22:
        case 23:
          return Hj(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var Jj = false, U = false, Kj = "function" === typeof WeakSet ? WeakSet : Set, V = null;
    function Lj(a, b) {
      var c = a.ref;
      if (null !== c) if ("function" === typeof c) try {
        c(null);
      } catch (d) {
        W(a, b, d);
      }
      else c.current = null;
    }
    function Mj(a, b, c) {
      try {
        c();
      } catch (d) {
        W(a, b, d);
      }
    }
    var Nj = false;
    function Oj(a, b) {
      Cf = dd;
      a = Me();
      if (Ne(a)) {
        if ("selectionStart" in a) var c = { start: a.selectionStart, end: a.selectionEnd };
        else a: {
          c = (c = a.ownerDocument) && c.defaultView || window;
          var d = c.getSelection && c.getSelection();
          if (d && 0 !== d.rangeCount) {
            c = d.anchorNode;
            var e = d.anchorOffset, f2 = d.focusNode;
            d = d.focusOffset;
            try {
              c.nodeType, f2.nodeType;
            } catch (F2) {
              c = null;
              break a;
            }
            var g = 0, h = -1, k2 = -1, l2 = 0, m2 = 0, q2 = a, r2 = null;
            b: for (; ; ) {
              for (var y2; ; ) {
                q2 !== c || 0 !== e && 3 !== q2.nodeType || (h = g + e);
                q2 !== f2 || 0 !== d && 3 !== q2.nodeType || (k2 = g + d);
                3 === q2.nodeType && (g += q2.nodeValue.length);
                if (null === (y2 = q2.firstChild)) break;
                r2 = q2;
                q2 = y2;
              }
              for (; ; ) {
                if (q2 === a) break b;
                r2 === c && ++l2 === e && (h = g);
                r2 === f2 && ++m2 === d && (k2 = g);
                if (null !== (y2 = q2.nextSibling)) break;
                q2 = r2;
                r2 = q2.parentNode;
              }
              q2 = y2;
            }
            c = -1 === h || -1 === k2 ? null : { start: h, end: k2 };
          } else c = null;
        }
        c = c || { start: 0, end: 0 };
      } else c = null;
      Df = { focusedElem: a, selectionRange: c };
      dd = false;
      for (V = b; null !== V; ) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;
      else for (; null !== V; ) {
        b = V;
        try {
          var n2 = b.alternate;
          if (0 !== (b.flags & 1024)) switch (b.tag) {
            case 0:
            case 11:
            case 15:
              break;
            case 1:
              if (null !== n2) {
                var t2 = n2.memoizedProps, J2 = n2.memoizedState, x2 = b.stateNode, w2 = x2.getSnapshotBeforeUpdate(b.elementType === b.type ? t2 : Ci(b.type, t2), J2);
                x2.__reactInternalSnapshotBeforeUpdate = w2;
              }
              break;
            case 3:
              var u2 = b.stateNode.containerInfo;
              1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
              break;
            case 5:
            case 6:
            case 4:
            case 17:
              break;
            default:
              throw Error(p(163));
          }
        } catch (F2) {
          W(b, b.return, F2);
        }
        a = b.sibling;
        if (null !== a) {
          a.return = b.return;
          V = a;
          break;
        }
        V = b.return;
      }
      n2 = Nj;
      Nj = false;
      return n2;
    }
    function Pj(a, b, c) {
      var d = b.updateQueue;
      d = null !== d ? d.lastEffect : null;
      if (null !== d) {
        var e = d = d.next;
        do {
          if ((e.tag & a) === a) {
            var f2 = e.destroy;
            e.destroy = void 0;
            void 0 !== f2 && Mj(b, c, f2);
          }
          e = e.next;
        } while (e !== d);
      }
    }
    function Qj(a, b) {
      b = b.updateQueue;
      b = null !== b ? b.lastEffect : null;
      if (null !== b) {
        var c = b = b.next;
        do {
          if ((c.tag & a) === a) {
            var d = c.create;
            c.destroy = d();
          }
          c = c.next;
        } while (c !== b);
      }
    }
    function Rj(a) {
      var b = a.ref;
      if (null !== b) {
        var c = a.stateNode;
        switch (a.tag) {
          case 5:
            a = c;
            break;
          default:
            a = c;
        }
        "function" === typeof b ? b(a) : b.current = a;
      }
    }
    function Sj(a) {
      var b = a.alternate;
      null !== b && (a.alternate = null, Sj(b));
      a.child = null;
      a.deletions = null;
      a.sibling = null;
      5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
      a.stateNode = null;
      a.return = null;
      a.dependencies = null;
      a.memoizedProps = null;
      a.memoizedState = null;
      a.pendingProps = null;
      a.stateNode = null;
      a.updateQueue = null;
    }
    function Tj(a) {
      return 5 === a.tag || 3 === a.tag || 4 === a.tag;
    }
    function Uj(a) {
      a: for (; ; ) {
        for (; null === a.sibling; ) {
          if (null === a.return || Tj(a.return)) return null;
          a = a.return;
        }
        a.sibling.return = a.return;
        for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
          if (a.flags & 2) continue a;
          if (null === a.child || 4 === a.tag) continue a;
          else a.child.return = a, a = a.child;
        }
        if (!(a.flags & 2)) return a.stateNode;
      }
    }
    function Vj(a, b, c) {
      var d = a.tag;
      if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));
      else if (4 !== d && (a = a.child, null !== a)) for (Vj(a, b, c), a = a.sibling; null !== a; ) Vj(a, b, c), a = a.sibling;
    }
    function Wj(a, b, c) {
      var d = a.tag;
      if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
      else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a; ) Wj(a, b, c), a = a.sibling;
    }
    var X = null, Xj = false;
    function Yj(a, b, c) {
      for (c = c.child; null !== c; ) Zj(a, b, c), c = c.sibling;
    }
    function Zj(a, b, c) {
      if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
        lc.onCommitFiberUnmount(kc, c);
      } catch (h) {
      }
      switch (c.tag) {
        case 5:
          U || Lj(c, b);
        case 6:
          var d = X, e = Xj;
          X = null;
          Yj(a, b, c);
          X = d;
          Xj = e;
          null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
          break;
        case 18:
          null !== X && (Xj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
          break;
        case 4:
          d = X;
          e = Xj;
          X = c.stateNode.containerInfo;
          Xj = true;
          Yj(a, b, c);
          X = d;
          Xj = e;
          break;
        case 0:
        case 11:
        case 14:
        case 15:
          if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
            e = d = d.next;
            do {
              var f2 = e, g = f2.destroy;
              f2 = f2.tag;
              void 0 !== g && (0 !== (f2 & 2) ? Mj(c, b, g) : 0 !== (f2 & 4) && Mj(c, b, g));
              e = e.next;
            } while (e !== d);
          }
          Yj(a, b, c);
          break;
        case 1:
          if (!U && (Lj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
            d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
          } catch (h) {
            W(c, b, h);
          }
          Yj(a, b, c);
          break;
        case 21:
          Yj(a, b, c);
          break;
        case 22:
          c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Yj(a, b, c), U = d) : Yj(a, b, c);
          break;
        default:
          Yj(a, b, c);
      }
    }
    function ak(a) {
      var b = a.updateQueue;
      if (null !== b) {
        a.updateQueue = null;
        var c = a.stateNode;
        null === c && (c = a.stateNode = new Kj());
        b.forEach(function(b2) {
          var d = bk.bind(null, a, b2);
          c.has(b2) || (c.add(b2), b2.then(d, d));
        });
      }
    }
    function ck(a, b) {
      var c = b.deletions;
      if (null !== c) for (var d = 0; d < c.length; d++) {
        var e = c[d];
        try {
          var f2 = a, g = b, h = g;
          a: for (; null !== h; ) {
            switch (h.tag) {
              case 5:
                X = h.stateNode;
                Xj = false;
                break a;
              case 3:
                X = h.stateNode.containerInfo;
                Xj = true;
                break a;
              case 4:
                X = h.stateNode.containerInfo;
                Xj = true;
                break a;
            }
            h = h.return;
          }
          if (null === X) throw Error(p(160));
          Zj(f2, g, e);
          X = null;
          Xj = false;
          var k2 = e.alternate;
          null !== k2 && (k2.return = null);
          e.return = null;
        } catch (l2) {
          W(e, b, l2);
        }
      }
      if (b.subtreeFlags & 12854) for (b = b.child; null !== b; ) dk(b, a), b = b.sibling;
    }
    function dk(a, b) {
      var c = a.alternate, d = a.flags;
      switch (a.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          ck(b, a);
          ek(a);
          if (d & 4) {
            try {
              Pj(3, a, a.return), Qj(3, a);
            } catch (t2) {
              W(a, a.return, t2);
            }
            try {
              Pj(5, a, a.return);
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          break;
        case 1:
          ck(b, a);
          ek(a);
          d & 512 && null !== c && Lj(c, c.return);
          break;
        case 5:
          ck(b, a);
          ek(a);
          d & 512 && null !== c && Lj(c, c.return);
          if (a.flags & 32) {
            var e = a.stateNode;
            try {
              ob(e, "");
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          if (d & 4 && (e = a.stateNode, null != e)) {
            var f2 = a.memoizedProps, g = null !== c ? c.memoizedProps : f2, h = a.type, k2 = a.updateQueue;
            a.updateQueue = null;
            if (null !== k2) try {
              "input" === h && "radio" === f2.type && null != f2.name && ab(e, f2);
              vb(h, g);
              var l2 = vb(h, f2);
              for (g = 0; g < k2.length; g += 2) {
                var m2 = k2[g], q2 = k2[g + 1];
                "style" === m2 ? sb(e, q2) : "dangerouslySetInnerHTML" === m2 ? nb(e, q2) : "children" === m2 ? ob(e, q2) : ta(e, m2, q2, l2);
              }
              switch (h) {
                case "input":
                  bb(e, f2);
                  break;
                case "textarea":
                  ib(e, f2);
                  break;
                case "select":
                  var r2 = e._wrapperState.wasMultiple;
                  e._wrapperState.wasMultiple = !!f2.multiple;
                  var y2 = f2.value;
                  null != y2 ? fb(e, !!f2.multiple, y2, false) : r2 !== !!f2.multiple && (null != f2.defaultValue ? fb(
                    e,
                    !!f2.multiple,
                    f2.defaultValue,
                    true
                  ) : fb(e, !!f2.multiple, f2.multiple ? [] : "", false));
              }
              e[Pf] = f2;
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          break;
        case 6:
          ck(b, a);
          ek(a);
          if (d & 4) {
            if (null === a.stateNode) throw Error(p(162));
            e = a.stateNode;
            f2 = a.memoizedProps;
            try {
              e.nodeValue = f2;
            } catch (t2) {
              W(a, a.return, t2);
            }
          }
          break;
        case 3:
          ck(b, a);
          ek(a);
          if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
            bd(b.containerInfo);
          } catch (t2) {
            W(a, a.return, t2);
          }
          break;
        case 4:
          ck(b, a);
          ek(a);
          break;
        case 13:
          ck(b, a);
          ek(a);
          e = a.child;
          e.flags & 8192 && (f2 = null !== e.memoizedState, e.stateNode.isHidden = f2, !f2 || null !== e.alternate && null !== e.alternate.memoizedState || (fk = B()));
          d & 4 && ak(a);
          break;
        case 22:
          m2 = null !== c && null !== c.memoizedState;
          a.mode & 1 ? (U = (l2 = U) || m2, ck(b, a), U = l2) : ck(b, a);
          ek(a);
          if (d & 8192) {
            l2 = null !== a.memoizedState;
            if ((a.stateNode.isHidden = l2) && !m2 && 0 !== (a.mode & 1)) for (V = a, m2 = a.child; null !== m2; ) {
              for (q2 = V = m2; null !== V; ) {
                r2 = V;
                y2 = r2.child;
                switch (r2.tag) {
                  case 0:
                  case 11:
                  case 14:
                  case 15:
                    Pj(4, r2, r2.return);
                    break;
                  case 1:
                    Lj(r2, r2.return);
                    var n2 = r2.stateNode;
                    if ("function" === typeof n2.componentWillUnmount) {
                      d = r2;
                      c = r2.return;
                      try {
                        b = d, n2.props = b.memoizedProps, n2.state = b.memoizedState, n2.componentWillUnmount();
                      } catch (t2) {
                        W(d, c, t2);
                      }
                    }
                    break;
                  case 5:
                    Lj(r2, r2.return);
                    break;
                  case 22:
                    if (null !== r2.memoizedState) {
                      gk(q2);
                      continue;
                    }
                }
                null !== y2 ? (y2.return = r2, V = y2) : gk(q2);
              }
              m2 = m2.sibling;
            }
            a: for (m2 = null, q2 = a; ; ) {
              if (5 === q2.tag) {
                if (null === m2) {
                  m2 = q2;
                  try {
                    e = q2.stateNode, l2 ? (f2 = e.style, "function" === typeof f2.setProperty ? f2.setProperty("display", "none", "important") : f2.display = "none") : (h = q2.stateNode, k2 = q2.memoizedProps.style, g = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h.style.display = rb("display", g));
                  } catch (t2) {
                    W(a, a.return, t2);
                  }
                }
              } else if (6 === q2.tag) {
                if (null === m2) try {
                  q2.stateNode.nodeValue = l2 ? "" : q2.memoizedProps;
                } catch (t2) {
                  W(a, a.return, t2);
                }
              } else if ((22 !== q2.tag && 23 !== q2.tag || null === q2.memoizedState || q2 === a) && null !== q2.child) {
                q2.child.return = q2;
                q2 = q2.child;
                continue;
              }
              if (q2 === a) break a;
              for (; null === q2.sibling; ) {
                if (null === q2.return || q2.return === a) break a;
                m2 === q2 && (m2 = null);
                q2 = q2.return;
              }
              m2 === q2 && (m2 = null);
              q2.sibling.return = q2.return;
              q2 = q2.sibling;
            }
          }
          break;
        case 19:
          ck(b, a);
          ek(a);
          d & 4 && ak(a);
          break;
        case 21:
          break;
        default:
          ck(
            b,
            a
          ), ek(a);
      }
    }
    function ek(a) {
      var b = a.flags;
      if (b & 2) {
        try {
          a: {
            for (var c = a.return; null !== c; ) {
              if (Tj(c)) {
                var d = c;
                break a;
              }
              c = c.return;
            }
            throw Error(p(160));
          }
          switch (d.tag) {
            case 5:
              var e = d.stateNode;
              d.flags & 32 && (ob(e, ""), d.flags &= -33);
              var f2 = Uj(a);
              Wj(a, f2, e);
              break;
            case 3:
            case 4:
              var g = d.stateNode.containerInfo, h = Uj(a);
              Vj(a, h, g);
              break;
            default:
              throw Error(p(161));
          }
        } catch (k2) {
          W(a, a.return, k2);
        }
        a.flags &= -3;
      }
      b & 4096 && (a.flags &= -4097);
    }
    function hk(a, b, c) {
      V = a;
      ik(a);
    }
    function ik(a, b, c) {
      for (var d = 0 !== (a.mode & 1); null !== V; ) {
        var e = V, f2 = e.child;
        if (22 === e.tag && d) {
          var g = null !== e.memoizedState || Jj;
          if (!g) {
            var h = e.alternate, k2 = null !== h && null !== h.memoizedState || U;
            h = Jj;
            var l2 = U;
            Jj = g;
            if ((U = k2) && !l2) for (V = e; null !== V; ) g = V, k2 = g.child, 22 === g.tag && null !== g.memoizedState ? jk(e) : null !== k2 ? (k2.return = g, V = k2) : jk(e);
            for (; null !== f2; ) V = f2, ik(f2), f2 = f2.sibling;
            V = e;
            Jj = h;
            U = l2;
          }
          kk(a);
        } else 0 !== (e.subtreeFlags & 8772) && null !== f2 ? (f2.return = e, V = f2) : kk(a);
      }
    }
    function kk(a) {
      for (; null !== V; ) {
        var b = V;
        if (0 !== (b.flags & 8772)) {
          var c = b.alternate;
          try {
            if (0 !== (b.flags & 8772)) switch (b.tag) {
              case 0:
              case 11:
              case 15:
                U || Qj(5, b);
                break;
              case 1:
                var d = b.stateNode;
                if (b.flags & 4 && !U) if (null === c) d.componentDidMount();
                else {
                  var e = b.elementType === b.type ? c.memoizedProps : Ci(b.type, c.memoizedProps);
                  d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                }
                var f2 = b.updateQueue;
                null !== f2 && sh(b, f2, d);
                break;
              case 3:
                var g = b.updateQueue;
                if (null !== g) {
                  c = null;
                  if (null !== b.child) switch (b.child.tag) {
                    case 5:
                      c = b.child.stateNode;
                      break;
                    case 1:
                      c = b.child.stateNode;
                  }
                  sh(b, g, c);
                }
                break;
              case 5:
                var h = b.stateNode;
                if (null === c && b.flags & 4) {
                  c = h;
                  var k2 = b.memoizedProps;
                  switch (b.type) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      k2.autoFocus && c.focus();
                      break;
                    case "img":
                      k2.src && (c.src = k2.src);
                  }
                }
                break;
              case 6:
                break;
              case 4:
                break;
              case 12:
                break;
              case 13:
                if (null === b.memoizedState) {
                  var l2 = b.alternate;
                  if (null !== l2) {
                    var m2 = l2.memoizedState;
                    if (null !== m2) {
                      var q2 = m2.dehydrated;
                      null !== q2 && bd(q2);
                    }
                  }
                }
                break;
              case 19:
              case 17:
              case 21:
              case 22:
              case 23:
              case 25:
                break;
              default:
                throw Error(p(163));
            }
            U || b.flags & 512 && Rj(b);
          } catch (r2) {
            W(b, b.return, r2);
          }
        }
        if (b === a) {
          V = null;
          break;
        }
        c = b.sibling;
        if (null !== c) {
          c.return = b.return;
          V = c;
          break;
        }
        V = b.return;
      }
    }
    function gk(a) {
      for (; null !== V; ) {
        var b = V;
        if (b === a) {
          V = null;
          break;
        }
        var c = b.sibling;
        if (null !== c) {
          c.return = b.return;
          V = c;
          break;
        }
        V = b.return;
      }
    }
    function jk(a) {
      for (; null !== V; ) {
        var b = V;
        try {
          switch (b.tag) {
            case 0:
            case 11:
            case 15:
              var c = b.return;
              try {
                Qj(4, b);
              } catch (k2) {
                W(b, c, k2);
              }
              break;
            case 1:
              var d = b.stateNode;
              if ("function" === typeof d.componentDidMount) {
                var e = b.return;
                try {
                  d.componentDidMount();
                } catch (k2) {
                  W(b, e, k2);
                }
              }
              var f2 = b.return;
              try {
                Rj(b);
              } catch (k2) {
                W(b, f2, k2);
              }
              break;
            case 5:
              var g = b.return;
              try {
                Rj(b);
              } catch (k2) {
                W(b, g, k2);
              }
          }
        } catch (k2) {
          W(b, b.return, k2);
        }
        if (b === a) {
          V = null;
          break;
        }
        var h = b.sibling;
        if (null !== h) {
          h.return = b.return;
          V = h;
          break;
        }
        V = b.return;
      }
    }
    var lk = Math.ceil, mk = ua.ReactCurrentDispatcher, nk = ua.ReactCurrentOwner, ok = ua.ReactCurrentBatchConfig, K = 0, Q = null, Y = null, Z = 0, fj = 0, ej = Uf(0), T = 0, pk = null, rh = 0, qk = 0, rk = 0, sk = null, tk = null, fk = 0, Gj = Infinity, uk = null, Oi = false, Pi = null, Ri = null, vk = false, wk = null, xk = 0, yk = 0, zk = null, Ak = -1, Bk = 0;
    function R() {
      return 0 !== (K & 6) ? B() : -1 !== Ak ? Ak : Ak = B();
    }
    function yi(a) {
      if (0 === (a.mode & 1)) return 1;
      if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
      if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
      a = C;
      if (0 !== a) return a;
      a = window.event;
      a = void 0 === a ? 16 : jd(a.type);
      return a;
    }
    function gi(a, b, c, d) {
      if (50 < yk) throw yk = 0, zk = null, Error(p(185));
      Ac(a, c, d);
      if (0 === (K & 2) || a !== Q) a === Q && (0 === (K & 2) && (qk |= c), 4 === T && Ck(a, Z)), Dk(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Gj = B() + 500, fg && jg());
    }
    function Dk(a, b) {
      var c = a.callbackNode;
      wc(a, b);
      var d = uc(a, a === Q ? Z : 0);
      if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;
      else if (b = d & -d, a.callbackPriority !== b) {
        null != c && bc(c);
        if (1 === b) 0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function() {
          0 === (K & 6) && jg();
        }), c = null;
        else {
          switch (Dc(d)) {
            case 1:
              c = fc;
              break;
            case 4:
              c = gc;
              break;
            case 16:
              c = hc;
              break;
            case 536870912:
              c = jc;
              break;
            default:
              c = hc;
          }
          c = Fk(c, Gk.bind(null, a));
        }
        a.callbackPriority = b;
        a.callbackNode = c;
      }
    }
    function Gk(a, b) {
      Ak = -1;
      Bk = 0;
      if (0 !== (K & 6)) throw Error(p(327));
      var c = a.callbackNode;
      if (Hk() && a.callbackNode !== c) return null;
      var d = uc(a, a === Q ? Z : 0);
      if (0 === d) return null;
      if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Ik(a, d);
      else {
        b = d;
        var e = K;
        K |= 2;
        var f2 = Jk();
        if (Q !== a || Z !== b) uk = null, Gj = B() + 500, Kk(a, b);
        do
          try {
            Lk();
            break;
          } catch (h) {
            Mk(a, h);
          }
        while (1);
        $g();
        mk.current = f2;
        K = e;
        null !== Y ? b = 0 : (Q = null, Z = 0, b = T);
      }
      if (0 !== b) {
        2 === b && (e = xc(a), 0 !== e && (d = e, b = Nk(a, e)));
        if (1 === b) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
        if (6 === b) Ck(a, d);
        else {
          e = a.current.alternate;
          if (0 === (d & 30) && !Ok(e) && (b = Ik(a, d), 2 === b && (f2 = xc(a), 0 !== f2 && (d = f2, b = Nk(a, f2))), 1 === b)) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B()), c;
          a.finishedWork = e;
          a.finishedLanes = d;
          switch (b) {
            case 0:
            case 1:
              throw Error(p(345));
            case 2:
              Pk(a, tk, uk);
              break;
            case 3:
              Ck(a, d);
              if ((d & 130023424) === d && (b = fk + 500 - B(), 10 < b)) {
                if (0 !== uc(a, 0)) break;
                e = a.suspendedLanes;
                if ((e & d) !== d) {
                  R();
                  a.pingedLanes |= a.suspendedLanes & e;
                  break;
                }
                a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b);
                break;
              }
              Pk(a, tk, uk);
              break;
            case 4:
              Ck(a, d);
              if ((d & 4194240) === d) break;
              b = a.eventTimes;
              for (e = -1; 0 < d; ) {
                var g = 31 - oc(d);
                f2 = 1 << g;
                g = b[g];
                g > e && (e = g);
                d &= ~f2;
              }
              d = e;
              d = B() - d;
              d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * lk(d / 1960)) - d;
              if (10 < d) {
                a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
                break;
              }
              Pk(a, tk, uk);
              break;
            case 5:
              Pk(a, tk, uk);
              break;
            default:
              throw Error(p(329));
          }
        }
      }
      Dk(a, B());
      return a.callbackNode === c ? Gk.bind(null, a) : null;
    }
    function Nk(a, b) {
      var c = sk;
      a.current.memoizedState.isDehydrated && (Kk(a, b).flags |= 256);
      a = Ik(a, b);
      2 !== a && (b = tk, tk = c, null !== b && Fj(b));
      return a;
    }
    function Fj(a) {
      null === tk ? tk = a : tk.push.apply(tk, a);
    }
    function Ok(a) {
      for (var b = a; ; ) {
        if (b.flags & 16384) {
          var c = b.updateQueue;
          if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
            var e = c[d], f2 = e.getSnapshot;
            e = e.value;
            try {
              if (!He(f2(), e)) return false;
            } catch (g) {
              return false;
            }
          }
        }
        c = b.child;
        if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;
        else {
          if (b === a) break;
          for (; null === b.sibling; ) {
            if (null === b.return || b.return === a) return true;
            b = b.return;
          }
          b.sibling.return = b.return;
          b = b.sibling;
        }
      }
      return true;
    }
    function Ck(a, b) {
      b &= ~rk;
      b &= ~qk;
      a.suspendedLanes |= b;
      a.pingedLanes &= ~b;
      for (a = a.expirationTimes; 0 < b; ) {
        var c = 31 - oc(b), d = 1 << c;
        a[c] = -1;
        b &= ~d;
      }
    }
    function Ek(a) {
      if (0 !== (K & 6)) throw Error(p(327));
      Hk();
      var b = uc(a, 0);
      if (0 === (b & 1)) return Dk(a, B()), null;
      var c = Ik(a, b);
      if (0 !== a.tag && 2 === c) {
        var d = xc(a);
        0 !== d && (b = d, c = Nk(a, d));
      }
      if (1 === c) throw c = pk, Kk(a, 0), Ck(a, b), Dk(a, B()), c;
      if (6 === c) throw Error(p(345));
      a.finishedWork = a.current.alternate;
      a.finishedLanes = b;
      Pk(a, tk, uk);
      Dk(a, B());
      return null;
    }
    function Qk(a, b) {
      var c = K;
      K |= 1;
      try {
        return a(b);
      } finally {
        K = c, 0 === K && (Gj = B() + 500, fg && jg());
      }
    }
    function Rk(a) {
      null !== wk && 0 === wk.tag && 0 === (K & 6) && Hk();
      var b = K;
      K |= 1;
      var c = ok.transition, d = C;
      try {
        if (ok.transition = null, C = 1, a) return a();
      } finally {
        C = d, ok.transition = c, K = b, 0 === (K & 6) && jg();
      }
    }
    function Hj() {
      fj = ej.current;
      E(ej);
    }
    function Kk(a, b) {
      a.finishedWork = null;
      a.finishedLanes = 0;
      var c = a.timeoutHandle;
      -1 !== c && (a.timeoutHandle = -1, Gf(c));
      if (null !== Y) for (c = Y.return; null !== c; ) {
        var d = c;
        wg(d);
        switch (d.tag) {
          case 1:
            d = d.type.childContextTypes;
            null !== d && void 0 !== d && $f();
            break;
          case 3:
            zh();
            E(Wf);
            E(H);
            Eh();
            break;
          case 5:
            Bh(d);
            break;
          case 4:
            zh();
            break;
          case 13:
            E(L);
            break;
          case 19:
            E(L);
            break;
          case 10:
            ah(d.type._context);
            break;
          case 22:
          case 23:
            Hj();
        }
        c = c.return;
      }
      Q = a;
      Y = a = Pg(a.current, null);
      Z = fj = b;
      T = 0;
      pk = null;
      rk = qk = rh = 0;
      tk = sk = null;
      if (null !== fh) {
        for (b = 0; b < fh.length; b++) if (c = fh[b], d = c.interleaved, null !== d) {
          c.interleaved = null;
          var e = d.next, f2 = c.pending;
          if (null !== f2) {
            var g = f2.next;
            f2.next = e;
            d.next = g;
          }
          c.pending = d;
        }
        fh = null;
      }
      return a;
    }
    function Mk(a, b) {
      do {
        var c = Y;
        try {
          $g();
          Fh.current = Rh;
          if (Ih) {
            for (var d = M.memoizedState; null !== d; ) {
              var e = d.queue;
              null !== e && (e.pending = null);
              d = d.next;
            }
            Ih = false;
          }
          Hh = 0;
          O = N = M = null;
          Jh = false;
          Kh = 0;
          nk.current = null;
          if (null === c || null === c.return) {
            T = 1;
            pk = b;
            Y = null;
            break;
          }
          a: {
            var f2 = a, g = c.return, h = c, k2 = b;
            b = Z;
            h.flags |= 32768;
            if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
              var l2 = k2, m2 = h, q2 = m2.tag;
              if (0 === (m2.mode & 1) && (0 === q2 || 11 === q2 || 15 === q2)) {
                var r2 = m2.alternate;
                r2 ? (m2.updateQueue = r2.updateQueue, m2.memoizedState = r2.memoizedState, m2.lanes = r2.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
              }
              var y2 = Ui(g);
              if (null !== y2) {
                y2.flags &= -257;
                Vi(y2, g, h, f2, b);
                y2.mode & 1 && Si(f2, l2, b);
                b = y2;
                k2 = l2;
                var n2 = b.updateQueue;
                if (null === n2) {
                  var t2 = /* @__PURE__ */ new Set();
                  t2.add(k2);
                  b.updateQueue = t2;
                } else n2.add(k2);
                break a;
              } else {
                if (0 === (b & 1)) {
                  Si(f2, l2, b);
                  tj();
                  break a;
                }
                k2 = Error(p(426));
              }
            } else if (I && h.mode & 1) {
              var J2 = Ui(g);
              if (null !== J2) {
                0 === (J2.flags & 65536) && (J2.flags |= 256);
                Vi(J2, g, h, f2, b);
                Jg(Ji(k2, h));
                break a;
              }
            }
            f2 = k2 = Ji(k2, h);
            4 !== T && (T = 2);
            null === sk ? sk = [f2] : sk.push(f2);
            f2 = g;
            do {
              switch (f2.tag) {
                case 3:
                  f2.flags |= 65536;
                  b &= -b;
                  f2.lanes |= b;
                  var x2 = Ni(f2, k2, b);
                  ph(f2, x2);
                  break a;
                case 1:
                  h = k2;
                  var w2 = f2.type, u2 = f2.stateNode;
                  if (0 === (f2.flags & 128) && ("function" === typeof w2.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Ri || !Ri.has(u2)))) {
                    f2.flags |= 65536;
                    b &= -b;
                    f2.lanes |= b;
                    var F2 = Qi(f2, h, b);
                    ph(f2, F2);
                    break a;
                  }
              }
              f2 = f2.return;
            } while (null !== f2);
          }
          Sk(c);
        } catch (na) {
          b = na;
          Y === c && null !== c && (Y = c = c.return);
          continue;
        }
        break;
      } while (1);
    }
    function Jk() {
      var a = mk.current;
      mk.current = Rh;
      return null === a ? Rh : a;
    }
    function tj() {
      if (0 === T || 3 === T || 2 === T) T = 4;
      null === Q || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q, Z);
    }
    function Ik(a, b) {
      var c = K;
      K |= 2;
      var d = Jk();
      if (Q !== a || Z !== b) uk = null, Kk(a, b);
      do
        try {
          Tk();
          break;
        } catch (e) {
          Mk(a, e);
        }
      while (1);
      $g();
      K = c;
      mk.current = d;
      if (null !== Y) throw Error(p(261));
      Q = null;
      Z = 0;
      return T;
    }
    function Tk() {
      for (; null !== Y; ) Uk(Y);
    }
    function Lk() {
      for (; null !== Y && !cc(); ) Uk(Y);
    }
    function Uk(a) {
      var b = Vk(a.alternate, a, fj);
      a.memoizedProps = a.pendingProps;
      null === b ? Sk(a) : Y = b;
      nk.current = null;
    }
    function Sk(a) {
      var b = a;
      do {
        var c = b.alternate;
        a = b.return;
        if (0 === (b.flags & 32768)) {
          if (c = Ej(c, b, fj), null !== c) {
            Y = c;
            return;
          }
        } else {
          c = Ij(c, b);
          if (null !== c) {
            c.flags &= 32767;
            Y = c;
            return;
          }
          if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
          else {
            T = 6;
            Y = null;
            return;
          }
        }
        b = b.sibling;
        if (null !== b) {
          Y = b;
          return;
        }
        Y = b = a;
      } while (null !== b);
      0 === T && (T = 5);
    }
    function Pk(a, b, c) {
      var d = C, e = ok.transition;
      try {
        ok.transition = null, C = 1, Wk(a, b, c, d);
      } finally {
        ok.transition = e, C = d;
      }
      return null;
    }
    function Wk(a, b, c, d) {
      do
        Hk();
      while (null !== wk);
      if (0 !== (K & 6)) throw Error(p(327));
      c = a.finishedWork;
      var e = a.finishedLanes;
      if (null === c) return null;
      a.finishedWork = null;
      a.finishedLanes = 0;
      if (c === a.current) throw Error(p(177));
      a.callbackNode = null;
      a.callbackPriority = 0;
      var f2 = c.lanes | c.childLanes;
      Bc(a, f2);
      a === Q && (Y = Q = null, Z = 0);
      0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || vk || (vk = true, Fk(hc, function() {
        Hk();
        return null;
      }));
      f2 = 0 !== (c.flags & 15990);
      if (0 !== (c.subtreeFlags & 15990) || f2) {
        f2 = ok.transition;
        ok.transition = null;
        var g = C;
        C = 1;
        var h = K;
        K |= 4;
        nk.current = null;
        Oj(a, c);
        dk(c, a);
        Oe(Df);
        dd = !!Cf;
        Df = Cf = null;
        a.current = c;
        hk(c);
        dc();
        K = h;
        C = g;
        ok.transition = f2;
      } else a.current = c;
      vk && (vk = false, wk = a, xk = e);
      f2 = a.pendingLanes;
      0 === f2 && (Ri = null);
      mc(c.stateNode);
      Dk(a, B());
      if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, { componentStack: e.stack, digest: e.digest });
      if (Oi) throw Oi = false, a = Pi, Pi = null, a;
      0 !== (xk & 1) && 0 !== a.tag && Hk();
      f2 = a.pendingLanes;
      0 !== (f2 & 1) ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0;
      jg();
      return null;
    }
    function Hk() {
      if (null !== wk) {
        var a = Dc(xk), b = ok.transition, c = C;
        try {
          ok.transition = null;
          C = 16 > a ? 16 : a;
          if (null === wk) var d = false;
          else {
            a = wk;
            wk = null;
            xk = 0;
            if (0 !== (K & 6)) throw Error(p(331));
            var e = K;
            K |= 4;
            for (V = a.current; null !== V; ) {
              var f2 = V, g = f2.child;
              if (0 !== (V.flags & 16)) {
                var h = f2.deletions;
                if (null !== h) {
                  for (var k2 = 0; k2 < h.length; k2++) {
                    var l2 = h[k2];
                    for (V = l2; null !== V; ) {
                      var m2 = V;
                      switch (m2.tag) {
                        case 0:
                        case 11:
                        case 15:
                          Pj(8, m2, f2);
                      }
                      var q2 = m2.child;
                      if (null !== q2) q2.return = m2, V = q2;
                      else for (; null !== V; ) {
                        m2 = V;
                        var r2 = m2.sibling, y2 = m2.return;
                        Sj(m2);
                        if (m2 === l2) {
                          V = null;
                          break;
                        }
                        if (null !== r2) {
                          r2.return = y2;
                          V = r2;
                          break;
                        }
                        V = y2;
                      }
                    }
                  }
                  var n2 = f2.alternate;
                  if (null !== n2) {
                    var t2 = n2.child;
                    if (null !== t2) {
                      n2.child = null;
                      do {
                        var J2 = t2.sibling;
                        t2.sibling = null;
                        t2 = J2;
                      } while (null !== t2);
                    }
                  }
                  V = f2;
                }
              }
              if (0 !== (f2.subtreeFlags & 2064) && null !== g) g.return = f2, V = g;
              else b: for (; null !== V; ) {
                f2 = V;
                if (0 !== (f2.flags & 2048)) switch (f2.tag) {
                  case 0:
                  case 11:
                  case 15:
                    Pj(9, f2, f2.return);
                }
                var x2 = f2.sibling;
                if (null !== x2) {
                  x2.return = f2.return;
                  V = x2;
                  break b;
                }
                V = f2.return;
              }
            }
            var w2 = a.current;
            for (V = w2; null !== V; ) {
              g = V;
              var u2 = g.child;
              if (0 !== (g.subtreeFlags & 2064) && null !== u2) u2.return = g, V = u2;
              else b: for (g = w2; null !== V; ) {
                h = V;
                if (0 !== (h.flags & 2048)) try {
                  switch (h.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Qj(9, h);
                  }
                } catch (na) {
                  W(h, h.return, na);
                }
                if (h === g) {
                  V = null;
                  break b;
                }
                var F2 = h.sibling;
                if (null !== F2) {
                  F2.return = h.return;
                  V = F2;
                  break b;
                }
                V = h.return;
              }
            }
            K = e;
            jg();
            if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
              lc.onPostCommitFiberRoot(kc, a);
            } catch (na) {
            }
            d = true;
          }
          return d;
        } finally {
          C = c, ok.transition = b;
        }
      }
      return false;
    }
    function Xk(a, b, c) {
      b = Ji(c, b);
      b = Ni(a, b, 1);
      a = nh(a, b, 1);
      b = R();
      null !== a && (Ac(a, 1, b), Dk(a, b));
    }
    function W(a, b, c) {
      if (3 === a.tag) Xk(a, a, c);
      else for (; null !== b; ) {
        if (3 === b.tag) {
          Xk(b, a, c);
          break;
        } else if (1 === b.tag) {
          var d = b.stateNode;
          if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ri || !Ri.has(d))) {
            a = Ji(c, a);
            a = Qi(b, a, 1);
            b = nh(b, a, 1);
            a = R();
            null !== b && (Ac(b, 1, a), Dk(b, a));
            break;
          }
        }
        b = b.return;
      }
    }
    function Ti(a, b, c) {
      var d = a.pingCache;
      null !== d && d.delete(b);
      b = R();
      a.pingedLanes |= a.suspendedLanes & c;
      Q === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - fk ? Kk(a, 0) : rk |= c);
      Dk(a, b);
    }
    function Yk(a, b) {
      0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
      var c = R();
      a = ih(a, b);
      null !== a && (Ac(a, b, c), Dk(a, c));
    }
    function uj(a) {
      var b = a.memoizedState, c = 0;
      null !== b && (c = b.retryLane);
      Yk(a, c);
    }
    function bk(a, b) {
      var c = 0;
      switch (a.tag) {
        case 13:
          var d = a.stateNode;
          var e = a.memoizedState;
          null !== e && (c = e.retryLane);
          break;
        case 19:
          d = a.stateNode;
          break;
        default:
          throw Error(p(314));
      }
      null !== d && d.delete(b);
      Yk(a, c);
    }
    var Vk;
    Vk = function(a, b, c) {
      if (null !== a) if (a.memoizedProps !== b.pendingProps || Wf.current) dh = true;
      else {
        if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return dh = false, yj(a, b, c);
        dh = 0 !== (a.flags & 131072) ? true : false;
      }
      else dh = false, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
      b.lanes = 0;
      switch (b.tag) {
        case 2:
          var d = b.type;
          ij(a, b);
          a = b.pendingProps;
          var e = Yf(b, H.current);
          ch(b, c);
          e = Nh(null, b, d, a, e, c);
          var f2 = Sh();
          b.flags |= 1;
          "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f2 = true, cg(b)) : f2 = false, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, kh(b), e.updater = Ei, b.stateNode = e, e._reactInternals = b, Ii(b, d, a, c), b = jj(null, b, d, true, f2, c)) : (b.tag = 0, I && f2 && vg(b), Xi(null, b, e, c), b = b.child);
          return b;
        case 16:
          d = b.elementType;
          a: {
            ij(a, b);
            a = b.pendingProps;
            e = d._init;
            d = e(d._payload);
            b.type = d;
            e = b.tag = Zk(d);
            a = Ci(d, a);
            switch (e) {
              case 0:
                b = cj(null, b, d, a, c);
                break a;
              case 1:
                b = hj(null, b, d, a, c);
                break a;
              case 11:
                b = Yi(null, b, d, a, c);
                break a;
              case 14:
                b = $i(null, b, d, Ci(d.type, a), c);
                break a;
            }
            throw Error(p(
              306,
              d,
              ""
            ));
          }
          return b;
        case 0:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), cj(a, b, d, e, c);
        case 1:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), hj(a, b, d, e, c);
        case 3:
          a: {
            kj(b);
            if (null === a) throw Error(p(387));
            d = b.pendingProps;
            f2 = b.memoizedState;
            e = f2.element;
            lh(a, b);
            qh(b, d, null, c);
            var g = b.memoizedState;
            d = g.element;
            if (f2.isDehydrated) if (f2 = { element: d, isDehydrated: false, cache: g.cache, pendingSuspenseBoundaries: g.pendingSuspenseBoundaries, transitions: g.transitions }, b.updateQueue.baseState = f2, b.memoizedState = f2, b.flags & 256) {
              e = Ji(Error(p(423)), b);
              b = lj(a, b, d, c, e);
              break a;
            } else if (d !== e) {
              e = Ji(Error(p(424)), b);
              b = lj(a, b, d, c, e);
              break a;
            } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = true, zg = null, c = Vg(b, null, d, c), b.child = c; c; ) c.flags = c.flags & -3 | 4096, c = c.sibling;
            else {
              Ig();
              if (d === e) {
                b = Zi(a, b, c);
                break a;
              }
              Xi(a, b, d, c);
            }
            b = b.child;
          }
          return b;
        case 5:
          return Ah(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f2 = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f2 && Ef(d, f2) && (b.flags |= 32), gj(a, b), Xi(a, b, g, c), b.child;
        case 6:
          return null === a && Eg(b), null;
        case 13:
          return oj(a, b, c);
        case 4:
          return yh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Ug(b, null, d, c) : Xi(a, b, d, c), b.child;
        case 11:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), Yi(a, b, d, e, c);
        case 7:
          return Xi(a, b, b.pendingProps, c), b.child;
        case 8:
          return Xi(a, b, b.pendingProps.children, c), b.child;
        case 12:
          return Xi(a, b, b.pendingProps.children, c), b.child;
        case 10:
          a: {
            d = b.type._context;
            e = b.pendingProps;
            f2 = b.memoizedProps;
            g = e.value;
            G(Wg, d._currentValue);
            d._currentValue = g;
            if (null !== f2) if (He(f2.value, g)) {
              if (f2.children === e.children && !Wf.current) {
                b = Zi(a, b, c);
                break a;
              }
            } else for (f2 = b.child, null !== f2 && (f2.return = b); null !== f2; ) {
              var h = f2.dependencies;
              if (null !== h) {
                g = f2.child;
                for (var k2 = h.firstContext; null !== k2; ) {
                  if (k2.context === d) {
                    if (1 === f2.tag) {
                      k2 = mh(-1, c & -c);
                      k2.tag = 2;
                      var l2 = f2.updateQueue;
                      if (null !== l2) {
                        l2 = l2.shared;
                        var m2 = l2.pending;
                        null === m2 ? k2.next = k2 : (k2.next = m2.next, m2.next = k2);
                        l2.pending = k2;
                      }
                    }
                    f2.lanes |= c;
                    k2 = f2.alternate;
                    null !== k2 && (k2.lanes |= c);
                    bh(
                      f2.return,
                      c,
                      b
                    );
                    h.lanes |= c;
                    break;
                  }
                  k2 = k2.next;
                }
              } else if (10 === f2.tag) g = f2.type === b.type ? null : f2.child;
              else if (18 === f2.tag) {
                g = f2.return;
                if (null === g) throw Error(p(341));
                g.lanes |= c;
                h = g.alternate;
                null !== h && (h.lanes |= c);
                bh(g, c, b);
                g = f2.sibling;
              } else g = f2.child;
              if (null !== g) g.return = f2;
              else for (g = f2; null !== g; ) {
                if (g === b) {
                  g = null;
                  break;
                }
                f2 = g.sibling;
                if (null !== f2) {
                  f2.return = g.return;
                  g = f2;
                  break;
                }
                g = g.return;
              }
              f2 = g;
            }
            Xi(a, b, e.children, c);
            b = b.child;
          }
          return b;
        case 9:
          return e = b.type, d = b.pendingProps.children, ch(b, c), e = eh(e), d = d(e), b.flags |= 1, Xi(a, b, d, c), b.child;
        case 14:
          return d = b.type, e = Ci(d, b.pendingProps), e = Ci(d.type, e), $i(a, b, d, e, c);
        case 15:
          return bj(a, b, b.type, b.pendingProps, c);
        case 17:
          return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), ij(a, b), b.tag = 1, Zf(d) ? (a = true, cg(b)) : a = false, ch(b, c), Gi(b, d, e), Ii(b, d, e, c), jj(null, b, d, true, a, c);
        case 19:
          return xj(a, b, c);
        case 22:
          return dj(a, b, c);
      }
      throw Error(p(156, b.tag));
    };
    function Fk(a, b) {
      return ac(a, b);
    }
    function $k(a, b, c, d) {
      this.tag = a;
      this.key = c;
      this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = b;
      this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
      this.mode = d;
      this.subtreeFlags = this.flags = 0;
      this.deletions = null;
      this.childLanes = this.lanes = 0;
      this.alternate = null;
    }
    function Bg(a, b, c, d) {
      return new $k(a, b, c, d);
    }
    function aj(a) {
      a = a.prototype;
      return !(!a || !a.isReactComponent);
    }
    function Zk(a) {
      if ("function" === typeof a) return aj(a) ? 1 : 0;
      if (void 0 !== a && null !== a) {
        a = a.$$typeof;
        if (a === Da) return 11;
        if (a === Ga) return 14;
      }
      return 2;
    }
    function Pg(a, b) {
      var c = a.alternate;
      null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
      c.flags = a.flags & 14680064;
      c.childLanes = a.childLanes;
      c.lanes = a.lanes;
      c.child = a.child;
      c.memoizedProps = a.memoizedProps;
      c.memoizedState = a.memoizedState;
      c.updateQueue = a.updateQueue;
      b = a.dependencies;
      c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
      c.sibling = a.sibling;
      c.index = a.index;
      c.ref = a.ref;
      return c;
    }
    function Rg(a, b, c, d, e, f2) {
      var g = 2;
      d = a;
      if ("function" === typeof a) aj(a) && (g = 1);
      else if ("string" === typeof a) g = 5;
      else a: switch (a) {
        case ya:
          return Tg(c.children, e, f2, b);
        case za:
          g = 8;
          e |= 8;
          break;
        case Aa:
          return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f2, a;
        case Ea:
          return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f2, a;
        case Fa:
          return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f2, a;
        case Ia:
          return pj(c, e, f2, b);
        default:
          if ("object" === typeof a && null !== a) switch (a.$$typeof) {
            case Ba:
              g = 10;
              break a;
            case Ca:
              g = 9;
              break a;
            case Da:
              g = 11;
              break a;
            case Ga:
              g = 14;
              break a;
            case Ha:
              g = 16;
              d = null;
              break a;
          }
          throw Error(p(130, null == a ? a : typeof a, ""));
      }
      b = Bg(g, c, b, e);
      b.elementType = a;
      b.type = d;
      b.lanes = f2;
      return b;
    }
    function Tg(a, b, c, d) {
      a = Bg(7, a, d, b);
      a.lanes = c;
      return a;
    }
    function pj(a, b, c, d) {
      a = Bg(22, a, d, b);
      a.elementType = Ia;
      a.lanes = c;
      a.stateNode = { isHidden: false };
      return a;
    }
    function Qg(a, b, c) {
      a = Bg(6, a, null, b);
      a.lanes = c;
      return a;
    }
    function Sg(a, b, c) {
      b = Bg(4, null !== a.children ? a.children : [], a.key, b);
      b.lanes = c;
      b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
      return b;
    }
    function al(a, b, c, d, e) {
      this.tag = b;
      this.containerInfo = a;
      this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
      this.timeoutHandle = -1;
      this.callbackNode = this.pendingContext = this.context = null;
      this.callbackPriority = 0;
      this.eventTimes = zc(0);
      this.expirationTimes = zc(-1);
      this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
      this.entanglements = zc(0);
      this.identifierPrefix = d;
      this.onRecoverableError = e;
      this.mutableSourceEagerHydrationData = null;
    }
    function bl(a, b, c, d, e, f2, g, h, k2) {
      a = new al(a, b, c, h, k2);
      1 === b ? (b = 1, true === f2 && (b |= 8)) : b = 0;
      f2 = Bg(3, null, null, b);
      a.current = f2;
      f2.stateNode = a;
      f2.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null };
      kh(f2);
      return a;
    }
    function cl(a, b, c) {
      var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
      return { $$typeof: wa, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
    }
    function dl(a) {
      if (!a) return Vf;
      a = a._reactInternals;
      a: {
        if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
        var b = a;
        do {
          switch (b.tag) {
            case 3:
              b = b.stateNode.context;
              break a;
            case 1:
              if (Zf(b.type)) {
                b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                break a;
              }
          }
          b = b.return;
        } while (null !== b);
        throw Error(p(171));
      }
      if (1 === a.tag) {
        var c = a.type;
        if (Zf(c)) return bg(a, c, b);
      }
      return b;
    }
    function el(a, b, c, d, e, f2, g, h, k2) {
      a = bl(c, d, true, a, e, f2, g, h, k2);
      a.context = dl(null);
      c = a.current;
      d = R();
      e = yi(c);
      f2 = mh(d, e);
      f2.callback = void 0 !== b && null !== b ? b : null;
      nh(c, f2, e);
      a.current.lanes = e;
      Ac(a, e, d);
      Dk(a, d);
      return a;
    }
    function fl(a, b, c, d) {
      var e = b.current, f2 = R(), g = yi(e);
      c = dl(c);
      null === b.context ? b.context = c : b.pendingContext = c;
      b = mh(f2, g);
      b.payload = { element: a };
      d = void 0 === d ? null : d;
      null !== d && (b.callback = d);
      a = nh(e, b, g);
      null !== a && (gi(a, e, g, f2), oh(a, e, g));
      return g;
    }
    function gl(a) {
      a = a.current;
      if (!a.child) return null;
      switch (a.child.tag) {
        case 5:
          return a.child.stateNode;
        default:
          return a.child.stateNode;
      }
    }
    function hl(a, b) {
      a = a.memoizedState;
      if (null !== a && null !== a.dehydrated) {
        var c = a.retryLane;
        a.retryLane = 0 !== c && c < b ? c : b;
      }
    }
    function il(a, b) {
      hl(a, b);
      (a = a.alternate) && hl(a, b);
    }
    function jl() {
      return null;
    }
    var kl = "function" === typeof reportError ? reportError : function(a) {
      console.error(a);
    };
    function ll(a) {
      this._internalRoot = a;
    }
    ml.prototype.render = ll.prototype.render = function(a) {
      var b = this._internalRoot;
      if (null === b) throw Error(p(409));
      fl(a, b, null, null);
    };
    ml.prototype.unmount = ll.prototype.unmount = function() {
      var a = this._internalRoot;
      if (null !== a) {
        this._internalRoot = null;
        var b = a.containerInfo;
        Rk(function() {
          fl(null, a, null, null);
        });
        b[uf] = null;
      }
    };
    function ml(a) {
      this._internalRoot = a;
    }
    ml.prototype.unstable_scheduleHydration = function(a) {
      if (a) {
        var b = Hc();
        a = { blockedOn: null, target: a, priority: b };
        for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++) ;
        Qc.splice(c, 0, a);
        0 === c && Vc(a);
      }
    };
    function nl(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
    }
    function ol(a) {
      return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
    }
    function pl() {
    }
    function ql(a, b, c, d, e) {
      if (e) {
        if ("function" === typeof d) {
          var f2 = d;
          d = function() {
            var a2 = gl(g);
            f2.call(a2);
          };
        }
        var g = el(b, d, a, 0, null, false, false, "", pl);
        a._reactRootContainer = g;
        a[uf] = g.current;
        sf(8 === a.nodeType ? a.parentNode : a);
        Rk();
        return g;
      }
      for (; e = a.lastChild; ) a.removeChild(e);
      if ("function" === typeof d) {
        var h = d;
        d = function() {
          var a2 = gl(k2);
          h.call(a2);
        };
      }
      var k2 = bl(a, 0, false, null, null, false, false, "", pl);
      a._reactRootContainer = k2;
      a[uf] = k2.current;
      sf(8 === a.nodeType ? a.parentNode : a);
      Rk(function() {
        fl(b, k2, c, d);
      });
      return k2;
    }
    function rl(a, b, c, d, e) {
      var f2 = c._reactRootContainer;
      if (f2) {
        var g = f2;
        if ("function" === typeof e) {
          var h = e;
          e = function() {
            var a2 = gl(g);
            h.call(a2);
          };
        }
        fl(b, g, a, e);
      } else g = ql(c, b, a, e, d);
      return gl(g);
    }
    Ec = function(a) {
      switch (a.tag) {
        case 3:
          var b = a.stateNode;
          if (b.current.memoizedState.isDehydrated) {
            var c = tc(b.pendingLanes);
            0 !== c && (Cc(b, c | 1), Dk(b, B()), 0 === (K & 6) && (Gj = B() + 500, jg()));
          }
          break;
        case 13:
          Rk(function() {
            var b2 = ih(a, 1);
            if (null !== b2) {
              var c2 = R();
              gi(b2, a, 1, c2);
            }
          }), il(a, 1);
      }
    };
    Fc = function(a) {
      if (13 === a.tag) {
        var b = ih(a, 134217728);
        if (null !== b) {
          var c = R();
          gi(b, a, 134217728, c);
        }
        il(a, 134217728);
      }
    };
    Gc = function(a) {
      if (13 === a.tag) {
        var b = yi(a), c = ih(a, b);
        if (null !== c) {
          var d = R();
          gi(c, a, b, d);
        }
        il(a, b);
      }
    };
    Hc = function() {
      return C;
    };
    Ic = function(a, b) {
      var c = C;
      try {
        return C = a, b();
      } finally {
        C = c;
      }
    };
    yb = function(a, b, c) {
      switch (b) {
        case "input":
          bb(a, c);
          b = c.name;
          if ("radio" === c.type && null != b) {
            for (c = a; c.parentNode; ) c = c.parentNode;
            c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
            for (b = 0; b < c.length; b++) {
              var d = c[b];
              if (d !== a && d.form === a.form) {
                var e = Db(d);
                if (!e) throw Error(p(90));
                Wa(d);
                bb(d, e);
              }
            }
          }
          break;
        case "textarea":
          ib(a, c);
          break;
        case "select":
          b = c.value, null != b && fb(a, !!c.multiple, b, false);
      }
    };
    Gb = Qk;
    Hb = Rk;
    var sl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Qk] }, tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" };
    var ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a) {
      a = Zb(a);
      return null === a ? null : a.stateNode;
    }, findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
    if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
      var vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (!vl.isDisabled && vl.supportsFiber) try {
        kc = vl.inject(ul), lc = vl;
      } catch (a) {
      }
    }
    reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
    reactDom_production_min.createPortal = function(a, b) {
      var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
      if (!nl(b)) throw Error(p(200));
      return cl(a, b, null, c);
    };
    reactDom_production_min.createRoot = function(a, b) {
      if (!nl(a)) throw Error(p(299));
      var c = false, d = "", e = kl;
      null !== b && void 0 !== b && (true === b.unstable_strictMode && (c = true), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
      b = bl(a, 1, false, null, null, c, false, d, e);
      a[uf] = b.current;
      sf(8 === a.nodeType ? a.parentNode : a);
      return new ll(b);
    };
    reactDom_production_min.findDOMNode = function(a) {
      if (null == a) return null;
      if (1 === a.nodeType) return a;
      var b = a._reactInternals;
      if (void 0 === b) {
        if ("function" === typeof a.render) throw Error(p(188));
        a = Object.keys(a).join(",");
        throw Error(p(268, a));
      }
      a = Zb(b);
      a = null === a ? null : a.stateNode;
      return a;
    };
    reactDom_production_min.flushSync = function(a) {
      return Rk(a);
    };
    reactDom_production_min.hydrate = function(a, b, c) {
      if (!ol(b)) throw Error(p(200));
      return rl(null, a, b, true, c);
    };
    reactDom_production_min.hydrateRoot = function(a, b, c) {
      if (!nl(a)) throw Error(p(405));
      var d = null != c && c.hydratedSources || null, e = false, f2 = "", g = kl;
      null !== c && void 0 !== c && (true === c.unstable_strictMode && (e = true), void 0 !== c.identifierPrefix && (f2 = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
      b = el(b, null, a, 1, null != c ? c : null, e, false, f2, g);
      a[uf] = b.current;
      sf(a);
      if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(
        c,
        e
      );
      return new ml(b);
    };
    reactDom_production_min.render = function(a, b, c) {
      if (!ol(b)) throw Error(p(200));
      return rl(null, a, b, false, c);
    };
    reactDom_production_min.unmountComponentAtNode = function(a) {
      if (!ol(a)) throw Error(p(40));
      return a._reactRootContainer ? (Rk(function() {
        rl(null, null, a, false, function() {
          a._reactRootContainer = null;
          a[uf] = null;
        });
      }), true) : false;
    };
    reactDom_production_min.unstable_batchedUpdates = Qk;
    reactDom_production_min.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
      if (!ol(c)) throw Error(p(200));
      if (null == a || void 0 === a._reactInternals) throw Error(p(38));
      return rl(a, b, c, false, d);
    };
    reactDom_production_min.version = "18.3.1-next-f1338f8080-20240426";
    function checkDCE() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
        return;
      }
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
      } catch (err) {
        console.error(err);
      }
    }
    {
      checkDCE();
      reactDom.exports = reactDom_production_min;
    }
    var reactDomExports = reactDom.exports;
    var createRoot;
    var m = reactDomExports;
    {
      createRoot = m.createRoot;
      m.hydrateRoot;
    }
    var FMT_NUMBER;
    (function(FMT_NUMBER2) {
      FMT_NUMBER2["NUMBER"] = "NUMBER_NUMBER";
      FMT_NUMBER2["HEX"] = "NUMBER_HEX";
      FMT_NUMBER2["STR"] = "NUMBER_STR";
      FMT_NUMBER2["BIGINT"] = "NUMBER_BIGINT";
    })(FMT_NUMBER || (FMT_NUMBER = {}));
    var FMT_BYTES;
    (function(FMT_BYTES2) {
      FMT_BYTES2["HEX"] = "BYTES_HEX";
      FMT_BYTES2["UINT8ARRAY"] = "BYTES_UINT8ARRAY";
    })(FMT_BYTES || (FMT_BYTES = {}));
    const DEFAULT_RETURN_FORMAT = {
      number: FMT_NUMBER.BIGINT,
      bytes: FMT_BYTES.HEX
    };
    const ETH_DATA_FORMAT = { number: FMT_NUMBER.HEX, bytes: FMT_BYTES.HEX };
    var BlockTags;
    (function(BlockTags2) {
      BlockTags2["EARLIEST"] = "earliest";
      BlockTags2["LATEST"] = "latest";
      BlockTags2["PENDING"] = "pending";
      BlockTags2["SAFE"] = "safe";
      BlockTags2["FINALIZED"] = "finalized";
      BlockTags2["COMMITTED"] = "committed";
    })(BlockTags || (BlockTags = {}));
    var HardforksOrdered;
    (function(HardforksOrdered2) {
      HardforksOrdered2["chainstart"] = "chainstart";
      HardforksOrdered2["frontier"] = "frontier";
      HardforksOrdered2["homestead"] = "homestead";
      HardforksOrdered2["dao"] = "dao";
      HardforksOrdered2["tangerineWhistle"] = "tangerineWhistle";
      HardforksOrdered2["spuriousDragon"] = "spuriousDragon";
      HardforksOrdered2["byzantium"] = "byzantium";
      HardforksOrdered2["constantinople"] = "constantinople";
      HardforksOrdered2["petersburg"] = "petersburg";
      HardforksOrdered2["istanbul"] = "istanbul";
      HardforksOrdered2["muirGlacier"] = "muirGlacier";
      HardforksOrdered2["berlin"] = "berlin";
      HardforksOrdered2["london"] = "london";
      HardforksOrdered2["altair"] = "altair";
      HardforksOrdered2["arrowGlacier"] = "arrowGlacier";
      HardforksOrdered2["grayGlacier"] = "grayGlacier";
      HardforksOrdered2["bellatrix"] = "bellatrix";
      HardforksOrdered2["merge"] = "merge";
      HardforksOrdered2["capella"] = "capella";
      HardforksOrdered2["shanghai"] = "shanghai";
    })(HardforksOrdered || (HardforksOrdered = {}));
    const TypedArray = Object.getPrototypeOf(Uint8Array);
    var __awaiter$G = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const symbol = Symbol.for("web3/base-provider");
    class Web3BaseProvider {
      static isWeb3Provider(provider) {
        return provider instanceof Web3BaseProvider || Boolean(provider && provider[symbol]);
      }
      // To match an object "instanceof" does not work if
      // matcher class and object is using different package versions
      // to overcome this bottleneck used this approach.
      // The symbol value for one string will always remain same regardless of package versions
      // eslint-disable-next-line class-methods-use-this
      get [symbol]() {
        return true;
      }
      /**
       * @deprecated Please use `.request` instead.
       * @param payload - Request Payload
       * @param callback - Callback
       */
      send(payload, callback) {
        this.request(payload).then((response) => {
          callback(null, response);
        }).catch((err) => {
          callback(err);
        });
      }
      /**
       * @deprecated Please use `.request` instead.
       * @param payload - Request Payload
       */
      sendAsync(payload) {
        return __awaiter$G(this, void 0, void 0, function* () {
          return this.request(payload);
        });
      }
      /**
       * Modify the return type of the request method to be fully compatible with EIP-1193
       *
       * [deprecated] In the future major releases (\>= v5) all providers are supposed to be fully compatible with EIP-1193.
       * So this method will not be needed and would not be available in the future.
       *
       * @returns A new instance of the provider with the request method fully compatible with EIP-1193
       *
       * @example
       * ```ts
       * const provider = new Web3HttpProvider('http://localhost:8545');
       * const fullyCompatibleProvider = provider.asEIP1193Provider();
       * const result = await fullyCompatibleProvider.request({ method: 'eth_getBalance' });
       * console.log(result); // '0x0234c8a3397aab58' or something like that
       * ```
       */
      asEIP1193Provider() {
        const newObj = Object.create(this);
        const originalRequest = newObj.request;
        newObj.request = function request(args) {
          return __awaiter$G(this, void 0, void 0, function* () {
            const response = yield originalRequest(args);
            return response.result;
          });
        };
        newObj.asEIP1193Provider = void 0;
        return newObj;
      }
    }
    class Web3BaseWallet extends Array {
      constructor(accountProvider) {
        super();
        this._accountProvider = accountProvider;
      }
    }
    const ERR_RESPONSE = 100;
    const ERR_INVALID_RESPONSE = 101;
    const ERR_FORMATTERS = 201;
    const ERR_METHOD_NOT_IMPLEMENTED = 202;
    const ERR_OPERATION_TIMEOUT = 203;
    const ERR_OPERATION_ABORT = 204;
    const ERR_ABI_ENCODING = 205;
    const ERR_EXISTING_PLUGIN_NAMESPACE = 206;
    const ERR_INVALID_METHOD_PARAMS = 207;
    const ERR_MULTIPLE_ERRORS = 208;
    const ERR_CONTRACT = 300;
    const ERR_CONTRACT_RESOLVER_MISSING = 301;
    const ERR_CONTRACT_EXECUTION_REVERTED = 310;
    const ERR_CONTRACT_TX_DATA_AND_INPUT = 311;
    const ERR_TX = 400;
    const ERR_TX_REVERT_TRANSACTION = 402;
    const ERR_TX_REVERT_WITHOUT_REASON = 405;
    const ERR_RAW_TX_UNDEFINED = 407;
    const ERR_TX_INVALID_SENDER = 408;
    const ERR_TX_MISSING_CUSTOM_CHAIN = 410;
    const ERR_TX_MISSING_CUSTOM_CHAIN_ID = 411;
    const ERR_TX_CHAIN_ID_MISMATCH = 412;
    const ERR_TX_INVALID_CHAIN_INFO = 413;
    const ERR_TX_MISSING_CHAIN_INFO = 414;
    const ERR_TX_MISSING_GAS = 415;
    const ERR_TX_INVALID_LEGACY_GAS = 416;
    const ERR_TX_INVALID_FEE_MARKET_GAS = 417;
    const ERR_TX_INVALID_FEE_MARKET_GAS_PRICE = 418;
    const ERR_TX_INVALID_LEGACY_FEE_MARKET = 419;
    const ERR_TX_INVALID_OBJECT = 420;
    const ERR_TX_INVALID_NONCE_OR_CHAIN_ID = 421;
    const ERR_TX_UNABLE_TO_POPULATE_NONCE = 422;
    const ERR_TX_UNSUPPORTED_EIP_1559 = 423;
    const ERR_TX_UNSUPPORTED_TYPE = 424;
    const ERR_TX_DATA_AND_INPUT = 425;
    const ERR_TX_POLLING_TIMEOUT = 426;
    const ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL = 427;
    const ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER = 428;
    const ERR_TX_LOCAL_WALLET_NOT_AVAILABLE = 429;
    const ERR_TX_NOT_FOUND = 430;
    const ERR_TX_SEND_TIMEOUT = 431;
    const ERR_TX_BLOCK_TIMEOUT = 432;
    const ERR_TX_SIGNING = 433;
    const ERR_TX_GAS_MISMATCH = 434;
    const ERR_TX_CHAIN_MISMATCH = 435;
    const ERR_TX_HARDFORK_MISMATCH = 436;
    const ERR_TX_INVALID_RECEIVER = 437;
    const ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR = 438;
    const ERR_TX_INVALID_PROPERTIES_FOR_TYPE = 439;
    const ERR_TX_MISSING_GAS_INNER_ERROR = 440;
    const ERR_TX_GAS_MISMATCH_INNER_ERROR = 441;
    const ERR_CONN = 500;
    const ERR_CONN_NOT_OPEN = 503;
    const ERR_CONN_MAX_ATTEMPTS = 505;
    const ERR_CONN_PENDING_REQUESTS = 506;
    const ERR_REQ_ALREADY_SENT = 507;
    const ERR_PROVIDER = 600;
    const ERR_INVALID_CLIENT = 602;
    const ERR_SUBSCRIPTION = 603;
    const ERR_WS_PROVIDER = 604;
    const ERR_PRIVATE_KEY_LENGTH = 701;
    const ERR_INVALID_PRIVATE_KEY = 702;
    const ERR_UNSUPPORTED_KDF = 703;
    const ERR_KEY_DERIVATION_FAIL = 704;
    const ERR_KEY_VERSION_UNSUPPORTED = 705;
    const ERR_INVALID_PASSWORD = 706;
    const ERR_IV_LENGTH = 707;
    const ERR_PBKDF2_ITERATIONS = 709;
    const ERR_SIGNATURE_FAILED = 801;
    const ERR_INVALID_SIGNATURE = 802;
    const JSONRPC_ERR_REJECTED_REQUEST = 4001;
    const JSONRPC_ERR_UNAUTHORIZED = 4100;
    const JSONRPC_ERR_UNSUPPORTED_METHOD = 4200;
    const JSONRPC_ERR_DISCONNECTED = 4900;
    const JSONRPC_ERR_CHAIN_DISCONNECTED = 4901;
    const ERR_ENS_UNSUPPORTED_NETWORK = 902;
    const ERR_ENS_NETWORK_NOT_SYNCED = 903;
    const ERR_INVALID_STRING = 1001;
    const ERR_INVALID_BYTES = 1002;
    const ERR_INVALID_NUMBER = 1003;
    const ERR_INVALID_UNIT = 1004;
    const ERR_INVALID_ADDRESS = 1005;
    const ERR_INVALID_HEX = 1006;
    const ERR_INVALID_BOOLEAN = 1008;
    const ERR_INVALID_UNSIGNED_INTEGER = 1009;
    const ERR_INVALID_SIZE = 1010;
    const ERR_INVALID_LARGE_VALUE = 1011;
    const ERR_INVALID_BLOCK = 1012;
    const ERR_INVALID_NIBBLE_WIDTH = 1014;
    const ERR_INVALID_INTEGER = 1015;
    const ERR_VALIDATION = 1100;
    const ERR_CORE_HARDFORK_MISMATCH = 1101;
    const ERR_SCHEMA_FORMAT = 1200;
    const ERR_RPC_INVALID_JSON = -32700;
    const ERR_RPC_INVALID_REQUEST = -32600;
    const ERR_RPC_INVALID_METHOD = -32601;
    const ERR_RPC_INVALID_PARAMS = -32602;
    const ERR_RPC_INTERNAL_ERROR = -32603;
    const ERR_RPC_INVALID_INPUT = -32e3;
    const ERR_RPC_MISSING_RESOURCE = -32001;
    const ERR_RPC_UNAVAILABLE_RESOURCE = -32002;
    const ERR_RPC_TRANSACTION_REJECTED = -32003;
    const ERR_RPC_UNSUPPORTED_METHOD = -32004;
    const ERR_RPC_LIMIT_EXCEEDED = -32005;
    const ERR_RPC_NOT_SUPPORTED = -32006;
    class BaseWeb3Error extends Error {
      constructor(msg, cause) {
        super(msg);
        if (Array.isArray(cause)) {
          this.cause = new MultipleErrors(cause);
        } else {
          this.cause = cause;
        }
        this.name = this.constructor.name;
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(new.target.constructor);
        } else {
          this.stack = new Error().stack;
        }
      }
      /**
       * @deprecated Use the `cause` property instead.
       */
      get innerError() {
        if (this.cause instanceof MultipleErrors) {
          return this.cause.errors;
        }
        return this.cause;
      }
      /**
       * @deprecated Use the `cause` property instead.
       */
      set innerError(cause) {
        if (Array.isArray(cause)) {
          this.cause = new MultipleErrors(cause);
        } else {
          this.cause = cause;
        }
      }
      static convertToString(value, unquotValue = false) {
        if (value === null || value === void 0)
          return "undefined";
        const result = JSON.stringify(value, (_, v2) => typeof v2 === "bigint" ? v2.toString() : v2);
        return unquotValue && ["bigint", "string"].includes(typeof value) ? result.replace(/['\\"]+/g, "") : result;
      }
      toJSON() {
        return {
          name: this.name,
          code: this.code,
          message: this.message,
          cause: this.cause,
          // deprecated
          innerError: this.cause
        };
      }
    }
    class MultipleErrors extends BaseWeb3Error {
      constructor(errors) {
        super(`Multiple errors occurred: [${errors.map((e) => e.message).join("], [")}]`);
        this.code = ERR_MULTIPLE_ERRORS;
        this.errors = errors;
      }
    }
    class InvalidValueError extends BaseWeb3Error {
      constructor(value, msg) {
        super(`Invalid value given "${BaseWeb3Error.convertToString(value, true)}". Error: ${msg}.`);
        this.name = this.constructor.name;
      }
    }
    class PrivateKeyLengthError extends BaseWeb3Error {
      constructor() {
        super(`Private key must be 32 bytes.`);
        this.code = ERR_PRIVATE_KEY_LENGTH;
      }
    }
    class InvalidPrivateKeyError extends BaseWeb3Error {
      constructor() {
        super(`Invalid Private Key, Not a valid string or uint8Array`);
        this.code = ERR_INVALID_PRIVATE_KEY;
      }
    }
    class InvalidSignatureError extends BaseWeb3Error {
      constructor(errorDetails) {
        super(`"${errorDetails}"`);
        this.code = ERR_INVALID_SIGNATURE;
      }
    }
    class InvalidKdfError extends BaseWeb3Error {
      constructor() {
        super(`Invalid key derivation function`);
        this.code = ERR_UNSUPPORTED_KDF;
      }
    }
    class KeyDerivationError extends BaseWeb3Error {
      constructor() {
        super(`Key derivation failed - possibly wrong password`);
        this.code = ERR_KEY_DERIVATION_FAIL;
      }
    }
    class KeyStoreVersionError extends BaseWeb3Error {
      constructor() {
        super("Unsupported key store version");
        this.code = ERR_KEY_VERSION_UNSUPPORTED;
      }
    }
    class InvalidPasswordError extends BaseWeb3Error {
      constructor() {
        super("Password cannot be empty");
        this.code = ERR_INVALID_PASSWORD;
      }
    }
    class IVLengthError extends BaseWeb3Error {
      constructor() {
        super("Initialization vector must be 16 bytes");
        this.code = ERR_IV_LENGTH;
      }
    }
    class PBKDF2IterationsError extends BaseWeb3Error {
      constructor() {
        super("c > 1000, pbkdf2 is less secure with less iterations");
        this.code = ERR_PBKDF2_ITERATIONS;
      }
    }
    class ConnectionError extends BaseWeb3Error {
      constructor(message, event) {
        super(message);
        this.code = ERR_CONN;
        if (event) {
          this.errorCode = event.code;
          this.errorReason = event.reason;
        }
      }
      toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { errorCode: this.errorCode, errorReason: this.errorReason });
      }
    }
    class ConnectionNotOpenError extends ConnectionError {
      constructor(event) {
        super("Connection not open", event);
        this.code = ERR_CONN_NOT_OPEN;
      }
    }
    class MaxAttemptsReachedOnReconnectingError extends ConnectionError {
      constructor(numberOfAttempts) {
        super(`Maximum number of reconnect attempts reached! (${numberOfAttempts})`);
        this.code = ERR_CONN_MAX_ATTEMPTS;
      }
    }
    class PendingRequestsOnReconnectingError extends ConnectionError {
      constructor() {
        super("CONNECTION ERROR: Provider started to reconnect before the response got received!");
        this.code = ERR_CONN_PENDING_REQUESTS;
      }
    }
    class RequestAlreadySentError extends ConnectionError {
      constructor(id2) {
        super(`Request already sent with following id: ${id2}`);
        this.code = ERR_REQ_ALREADY_SENT;
      }
    }
    class Web3ContractError extends BaseWeb3Error {
      constructor(message, receipt) {
        super(message);
        this.code = ERR_CONTRACT;
        this.receipt = receipt;
      }
    }
    class ResolverMethodMissingError extends BaseWeb3Error {
      constructor(address, name2) {
        super(`The resolver at ${address} does not implement requested method: "${name2}".`);
        this.address = address;
        this.name = name2;
        this.code = ERR_CONTRACT_RESOLVER_MISSING;
      }
      toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { address: this.address, name: this.name });
      }
    }
    class Eip838ExecutionError extends Web3ContractError {
      constructor(error) {
        super(error.message || "Error");
        this.name = "name" in error && error.name || this.constructor.name;
        this.stack = "stack" in error && error.stack || void 0;
        this.code = error.code;
        if (typeof error.data === "object") {
          let originalError;
          if (error.data && "originalError" in error.data) {
            originalError = error.data.originalError;
          } else {
            originalError = error.data;
          }
          this.data = originalError.data;
          this.cause = new Eip838ExecutionError(originalError);
        } else {
          this.data = error.data;
        }
      }
      setDecodedProperties(errorName, errorSignature, errorArgs) {
        this.errorName = errorName;
        this.errorSignature = errorSignature;
        this.errorArgs = errorArgs;
      }
      toJSON() {
        let json = Object.assign(Object.assign({}, super.toJSON()), { data: this.data });
        if (this.errorName) {
          json = Object.assign(Object.assign({}, json), { errorName: this.errorName, errorSignature: this.errorSignature, errorArgs: this.errorArgs });
        }
        return json;
      }
    }
    class ContractExecutionError extends Web3ContractError {
      constructor(rpcError) {
        super("Error happened while trying to execute a function inside a smart contract");
        this.code = ERR_CONTRACT_EXECUTION_REVERTED;
        this.cause = new Eip838ExecutionError(rpcError);
      }
    }
    class ContractTransactionDataAndInputError extends InvalidValueError {
      constructor(value) {
        var _a2, _b;
        super(`data: ${(_a2 = value.data) !== null && _a2 !== void 0 ? _a2 : "undefined"}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : "undefined"}`, `You can't have "data" and "input" as properties of a contract at the same time, please use either "data" or "input" instead.`);
        this.code = ERR_CONTRACT_TX_DATA_AND_INPUT;
      }
    }
    class ENSUnsupportedNetworkError extends BaseWeb3Error {
      constructor(networkType) {
        super(`ENS is not supported on network ${networkType}`);
        this.code = ERR_ENS_UNSUPPORTED_NETWORK;
      }
    }
    class ENSNetworkNotSyncedError extends BaseWeb3Error {
      constructor() {
        super(`Network not synced`);
        this.code = ERR_ENS_NETWORK_NOT_SYNCED;
      }
    }
    class InvalidMethodParamsError extends BaseWeb3Error {
      constructor(hint) {
        super(`Invalid parameters passed. "${typeof hint !== "undefined" ? hint : ""}"`);
        this.hint = hint;
        this.code = ERR_INVALID_METHOD_PARAMS;
      }
      toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { hint: this.hint });
      }
    }
    class FormatterError extends BaseWeb3Error {
      constructor() {
        super(...arguments);
        this.code = ERR_FORMATTERS;
      }
    }
    class MethodNotImplementedError extends BaseWeb3Error {
      constructor() {
        super("The method you're trying to call is not implemented.");
        this.code = ERR_METHOD_NOT_IMPLEMENTED;
      }
    }
    class OperationTimeoutError extends BaseWeb3Error {
      constructor() {
        super(...arguments);
        this.code = ERR_OPERATION_TIMEOUT;
      }
    }
    class OperationAbortError extends BaseWeb3Error {
      constructor() {
        super(...arguments);
        this.code = ERR_OPERATION_ABORT;
      }
    }
    class AbiError extends BaseWeb3Error {
      constructor(message, props) {
        super(message);
        this.code = ERR_ABI_ENCODING;
        this.props = props !== null && props !== void 0 ? props : {};
      }
    }
    class ExistingPluginNamespaceError extends BaseWeb3Error {
      constructor(pluginNamespace) {
        super(`A plugin with the namespace: ${pluginNamespace} has already been registered.`);
        this.code = ERR_EXISTING_PLUGIN_NAMESPACE;
      }
    }
    class ProviderError extends BaseWeb3Error {
      constructor() {
        super(...arguments);
        this.code = ERR_PROVIDER;
      }
    }
    class InvalidClientError extends BaseWeb3Error {
      constructor(clientUrl) {
        super(`Client URL "${clientUrl}" is invalid.`);
        this.code = ERR_INVALID_CLIENT;
      }
    }
    class SubscriptionError extends BaseWeb3Error {
      constructor() {
        super(...arguments);
        this.code = ERR_SUBSCRIPTION;
      }
    }
    class Web3WSProviderError extends BaseWeb3Error {
      constructor() {
        super(...arguments);
        this.code = ERR_WS_PROVIDER;
      }
    }
    class SignatureError extends InvalidValueError {
      constructor() {
        super(...arguments);
        this.code = ERR_SIGNATURE_FAILED;
      }
    }
    class TransactionError extends BaseWeb3Error {
      constructor(message, receipt) {
        super(message);
        this.receipt = receipt;
        this.code = ERR_TX;
      }
      toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { receipt: this.receipt });
      }
    }
    class TransactionRevertInstructionError extends BaseWeb3Error {
      constructor(reason, signature, receipt, data) {
        super(`Transaction has been reverted by the EVM${receipt === void 0 ? "" : `:
 ${BaseWeb3Error.convertToString(receipt)}`}`);
        this.reason = reason;
        this.signature = signature;
        this.receipt = receipt;
        this.data = data;
        this.code = ERR_TX_REVERT_TRANSACTION;
      }
      toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { reason: this.reason, signature: this.signature, receipt: this.receipt, data: this.data });
      }
    }
    class TransactionRevertWithCustomError extends TransactionRevertInstructionError {
      constructor(reason, customErrorName, customErrorDecodedSignature, customErrorArguments, signature, receipt, data) {
        super(reason);
        this.reason = reason;
        this.customErrorName = customErrorName;
        this.customErrorDecodedSignature = customErrorDecodedSignature;
        this.customErrorArguments = customErrorArguments;
        this.signature = signature;
        this.receipt = receipt;
        this.data = data;
        this.code = ERR_TX_REVERT_TRANSACTION_CUSTOM_ERROR;
      }
      toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { reason: this.reason, customErrorName: this.customErrorName, customErrorDecodedSignature: this.customErrorDecodedSignature, customErrorArguments: this.customErrorArguments, signature: this.signature, receipt: this.receipt, data: this.data });
      }
    }
    class TransactionRevertedWithoutReasonError extends TransactionError {
      constructor(receipt) {
        super(`Transaction has been reverted by the EVM${receipt === void 0 ? "" : `:
 ${BaseWeb3Error.convertToString(receipt)}`}`, receipt);
        this.code = ERR_TX_REVERT_WITHOUT_REASON;
      }
    }
    class UndefinedRawTransactionError extends TransactionError {
      constructor() {
        super(`Raw transaction undefined`);
        this.code = ERR_RAW_TX_UNDEFINED;
      }
    }
    class TransactionNotFound extends TransactionError {
      constructor() {
        super("Transaction not found");
        this.code = ERR_TX_NOT_FOUND;
      }
    }
    class InvalidTransactionWithSender extends InvalidValueError {
      constructor(value) {
        super(value, "invalid transaction with invalid sender");
        this.code = ERR_TX_INVALID_SENDER;
      }
    }
    class InvalidTransactionWithReceiver extends InvalidValueError {
      constructor(value) {
        super(value, "invalid transaction with invalid receiver");
        this.code = ERR_TX_INVALID_RECEIVER;
      }
    }
    class MissingCustomChainError extends InvalidValueError {
      constructor() {
        super("MissingCustomChainError", "If tx.common is provided it must have tx.common.customChain");
        this.code = ERR_TX_MISSING_CUSTOM_CHAIN;
      }
    }
    class MissingCustomChainIdError extends InvalidValueError {
      constructor() {
        super("MissingCustomChainIdError", "If tx.common is provided it must have tx.common.customChain and tx.common.customChain.chainId");
        this.code = ERR_TX_MISSING_CUSTOM_CHAIN_ID;
      }
    }
    class ChainIdMismatchError extends InvalidValueError {
      constructor(value) {
        super(
          JSON.stringify(value),
          // https://github.com/ChainSafe/web3.js/blob/8783f4d64e424456bdc53b34ef1142d0a7cee4d7/packages/web3-eth-accounts/src/index.js#L176
          "Chain Id doesnt match in tx.chainId tx.common.customChain.chainId"
        );
        this.code = ERR_TX_CHAIN_ID_MISMATCH;
      }
    }
    class ChainMismatchError extends InvalidValueError {
      constructor(value) {
        super(JSON.stringify(value), "Chain doesnt match in tx.chain tx.common.basechain");
        this.code = ERR_TX_CHAIN_MISMATCH;
      }
    }
    class HardforkMismatchError extends InvalidValueError {
      constructor(value) {
        super(JSON.stringify(value), "hardfork doesnt match in tx.hardfork tx.common.hardfork");
        this.code = ERR_TX_HARDFORK_MISMATCH;
      }
    }
    class CommonOrChainAndHardforkError extends InvalidValueError {
      constructor() {
        super("CommonOrChainAndHardforkError", "Please provide the common object or the chain and hardfork property but not all together.");
        this.code = ERR_TX_INVALID_CHAIN_INFO;
      }
    }
    class MissingChainOrHardforkError extends InvalidValueError {
      constructor(value) {
        var _a2, _b;
        super("MissingChainOrHardforkError", `When specifying chain and hardfork, both values must be defined. Received "chain": ${(_a2 = value.chain) !== null && _a2 !== void 0 ? _a2 : "undefined"}, "hardfork": ${(_b = value.hardfork) !== null && _b !== void 0 ? _b : "undefined"}`);
        this.code = ERR_TX_MISSING_CHAIN_INFO;
      }
    }
    class MissingGasInnerError extends BaseWeb3Error {
      constructor() {
        super('Missing properties in transaction, either define "gas" and "gasPrice" for type 0 transactions or "gas", "maxPriorityFeePerGas" and "maxFeePerGas" for type 2 transactions');
        this.code = ERR_TX_MISSING_GAS_INNER_ERROR;
      }
    }
    class MissingGasError extends InvalidValueError {
      constructor(value) {
        var _a2, _b, _c, _d;
        super(`gas: ${(_a2 = value.gas) !== null && _a2 !== void 0 ? _a2 : "undefined"}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : "undefined"}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : "undefined"}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : "undefined"}`, '"gas" is missing');
        this.code = ERR_TX_MISSING_GAS;
        this.cause = new MissingGasInnerError();
      }
    }
    class TransactionGasMismatchInnerError extends BaseWeb3Error {
      constructor() {
        super('Missing properties in transaction, either define "gas" and "gasPrice" for type 0 transactions or "gas", "maxPriorityFeePerGas" and "maxFeePerGas" for type 2 transactions, not both');
        this.code = ERR_TX_GAS_MISMATCH_INNER_ERROR;
      }
    }
    class TransactionGasMismatchError extends InvalidValueError {
      constructor(value) {
        var _a2, _b, _c, _d;
        super(`gas: ${(_a2 = value.gas) !== null && _a2 !== void 0 ? _a2 : "undefined"}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : "undefined"}, maxPriorityFeePerGas: ${(_c = value.maxPriorityFeePerGas) !== null && _c !== void 0 ? _c : "undefined"}, maxFeePerGas: ${(_d = value.maxFeePerGas) !== null && _d !== void 0 ? _d : "undefined"}`, "transaction must specify legacy or fee market gas properties, not both");
        this.code = ERR_TX_GAS_MISMATCH;
        this.cause = new TransactionGasMismatchInnerError();
      }
    }
    class InvalidGasOrGasPrice extends InvalidValueError {
      constructor(value) {
        var _a2, _b;
        super(`gas: ${(_a2 = value.gas) !== null && _a2 !== void 0 ? _a2 : "undefined"}, gasPrice: ${(_b = value.gasPrice) !== null && _b !== void 0 ? _b : "undefined"}`, "Gas or gasPrice is lower than 0");
        this.code = ERR_TX_INVALID_LEGACY_GAS;
      }
    }
    class InvalidMaxPriorityFeePerGasOrMaxFeePerGas extends InvalidValueError {
      constructor(value) {
        var _a2, _b;
        super(`maxPriorityFeePerGas: ${(_a2 = value.maxPriorityFeePerGas) !== null && _a2 !== void 0 ? _a2 : "undefined"}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : "undefined"}`, "maxPriorityFeePerGas or maxFeePerGas is lower than 0");
        this.code = ERR_TX_INVALID_FEE_MARKET_GAS;
      }
    }
    class Eip1559GasPriceError extends InvalidValueError {
      constructor(value) {
        super(value, "eip-1559 transactions don't support gasPrice");
        this.code = ERR_TX_INVALID_FEE_MARKET_GAS_PRICE;
      }
    }
    class UnsupportedFeeMarketError extends InvalidValueError {
      constructor(value) {
        var _a2, _b;
        super(`maxPriorityFeePerGas: ${(_a2 = value.maxPriorityFeePerGas) !== null && _a2 !== void 0 ? _a2 : "undefined"}, maxFeePerGas: ${(_b = value.maxFeePerGas) !== null && _b !== void 0 ? _b : "undefined"}`, "pre-eip-1559 transaction don't support maxFeePerGas/maxPriorityFeePerGas");
        this.code = ERR_TX_INVALID_LEGACY_FEE_MARKET;
      }
    }
    class InvalidTransactionObjectError extends InvalidValueError {
      constructor(value) {
        super(value, "invalid transaction object");
        this.code = ERR_TX_INVALID_OBJECT;
      }
    }
    class InvalidNonceOrChainIdError extends InvalidValueError {
      constructor(value) {
        var _a2, _b;
        super(`nonce: ${(_a2 = value.nonce) !== null && _a2 !== void 0 ? _a2 : "undefined"}, chainId: ${(_b = value.chainId) !== null && _b !== void 0 ? _b : "undefined"}`, "Nonce or chainId is lower than 0");
        this.code = ERR_TX_INVALID_NONCE_OR_CHAIN_ID;
      }
    }
    class UnableToPopulateNonceError extends InvalidValueError {
      constructor() {
        super("UnableToPopulateNonceError", "unable to populate nonce, no from address available");
        this.code = ERR_TX_UNABLE_TO_POPULATE_NONCE;
      }
    }
    class Eip1559NotSupportedError extends InvalidValueError {
      constructor() {
        super("Eip1559NotSupportedError", "Network doesn't support eip-1559");
        this.code = ERR_TX_UNSUPPORTED_EIP_1559;
      }
    }
    class UnsupportedTransactionTypeError extends InvalidValueError {
      constructor(value) {
        super(value, "unsupported transaction type");
        this.code = ERR_TX_UNSUPPORTED_TYPE;
      }
    }
    class TransactionDataAndInputError extends InvalidValueError {
      constructor(value) {
        var _a2, _b;
        super(`data: ${(_a2 = value.data) !== null && _a2 !== void 0 ? _a2 : "undefined"}, input: ${(_b = value.input) !== null && _b !== void 0 ? _b : "undefined"}`, `You can't have "data" and "input" as properties of transactions at the same time, please use either "data" or "input" instead.`);
        this.code = ERR_TX_DATA_AND_INPUT;
      }
    }
    class TransactionSendTimeoutError extends BaseWeb3Error {
      constructor(value) {
        super(`The connected Ethereum Node did not respond within ${value.numberOfSeconds} seconds, please make sure your transaction was properly sent and you are connected to a healthy Node. Be aware that transaction might still be pending or mined!
	Transaction Hash: ${value.transactionHash ? value.transactionHash.toString() : "not available"}`);
        this.code = ERR_TX_SEND_TIMEOUT;
      }
    }
    function transactionTimeoutHint(transactionHash) {
      return `Please make sure your transaction was properly sent and there are no previous pending transaction for the same account. However, be aware that it might still be mined!
	Transaction Hash: ${transactionHash ? transactionHash.toString() : "not available"}`;
    }
    class TransactionPollingTimeoutError extends BaseWeb3Error {
      constructor(value) {
        super(`Transaction was not mined within ${value.numberOfSeconds} seconds. ${transactionTimeoutHint(value.transactionHash)}`);
        this.code = ERR_TX_POLLING_TIMEOUT;
      }
    }
    class TransactionBlockTimeoutError extends BaseWeb3Error {
      constructor(value) {
        super(`Transaction started at ${value.starterBlockNumber} but was not mined within ${value.numberOfBlocks} blocks. ${transactionTimeoutHint(value.transactionHash)}`);
        this.code = ERR_TX_BLOCK_TIMEOUT;
      }
    }
    class TransactionMissingReceiptOrBlockHashError extends InvalidValueError {
      constructor(value) {
        var _a2, _b;
        super(`receipt: ${JSON.stringify(value.receipt)}, blockHash: ${(_a2 = value.blockHash) === null || _a2 === void 0 ? void 0 : _a2.toString()}, transactionHash: ${(_b = value.transactionHash) === null || _b === void 0 ? void 0 : _b.toString()}`, `Receipt missing or blockHash null`);
        this.code = ERR_TX_RECEIPT_MISSING_OR_BLOCKHASH_NULL;
      }
    }
    class TransactionReceiptMissingBlockNumberError extends InvalidValueError {
      constructor(value) {
        super(`receipt: ${JSON.stringify(value.receipt)}`, `Receipt missing block number`);
        this.code = ERR_TX_RECEIPT_MISSING_BLOCK_NUMBER;
      }
    }
    class TransactionSigningError extends BaseWeb3Error {
      constructor(errorDetails) {
        super(`Invalid signature. "${errorDetails}"`);
        this.code = ERR_TX_SIGNING;
      }
    }
    class LocalWalletNotAvailableError extends InvalidValueError {
      constructor() {
        super("LocalWalletNotAvailableError", `Attempted to index account in local wallet, but no wallet is available`);
        this.code = ERR_TX_LOCAL_WALLET_NOT_AVAILABLE;
      }
    }
    class InvalidPropertiesForTransactionTypeError extends BaseWeb3Error {
      constructor(validationError, txType) {
        const invalidPropertyNames = [];
        validationError.forEach((error) => invalidPropertyNames.push(error.keyword));
        super(`The following properties are invalid for the transaction type ${txType}: ${invalidPropertyNames.join(", ")}`);
        this.code = ERR_TX_INVALID_PROPERTIES_FOR_TYPE;
      }
    }
    class InvalidBytesError extends InvalidValueError {
      constructor(value) {
        super(value, "can not parse as byte data");
        this.code = ERR_INVALID_BYTES;
      }
    }
    class InvalidNumberError extends InvalidValueError {
      constructor(value) {
        super(value, "can not parse as number data");
        this.code = ERR_INVALID_NUMBER;
      }
    }
    class InvalidAddressError extends InvalidValueError {
      constructor(value) {
        super(value, "invalid ethereum address");
        this.code = ERR_INVALID_ADDRESS;
      }
    }
    class InvalidStringError extends InvalidValueError {
      constructor(value) {
        super(value, "not a valid string");
        this.code = ERR_INVALID_STRING;
      }
    }
    class InvalidUnitError extends InvalidValueError {
      constructor(value) {
        super(value, "invalid unit");
        this.code = ERR_INVALID_UNIT;
      }
    }
    class InvalidIntegerError extends InvalidValueError {
      constructor(value) {
        super(value, "not a valid unit. Must be a positive integer");
        this.code = ERR_INVALID_INTEGER;
      }
    }
    class HexProcessingError extends InvalidValueError {
      constructor(value) {
        super(value, "can not be converted to hex");
        this.code = ERR_INVALID_HEX;
      }
    }
    class NibbleWidthError extends InvalidValueError {
      constructor(value) {
        super(value, "value greater than the nibble width");
        this.code = ERR_INVALID_NIBBLE_WIDTH;
      }
    }
    class InvalidBooleanError extends InvalidValueError {
      constructor(value) {
        super(value, "not a valid boolean.");
        this.code = ERR_INVALID_BOOLEAN;
      }
    }
    class InvalidUnsignedIntegerError extends InvalidValueError {
      constructor(value) {
        super(value, "not a valid unsigned integer.");
        this.code = ERR_INVALID_UNSIGNED_INTEGER;
      }
    }
    class InvalidSizeError extends InvalidValueError {
      constructor(value) {
        super(value, "invalid size given.");
        this.code = ERR_INVALID_SIZE;
      }
    }
    class InvalidLargeValueError extends InvalidValueError {
      constructor(value) {
        super(value, "value is larger than size.");
        this.code = ERR_INVALID_LARGE_VALUE;
      }
    }
    class InvalidBlockError extends InvalidValueError {
      constructor(value) {
        super(value, "invalid string given");
        this.code = ERR_INVALID_BLOCK;
      }
    }
    const isResponseWithError$1 = (response) => !Array.isArray(response) && response.jsonrpc === "2.0" && !!response && // eslint-disable-next-line no-null/no-null
    (response.result === void 0 || response.result === null) && // JSON RPC consider "null" as valid response
    "error" in response && (typeof response.id === "number" || typeof response.id === "string");
    const buildErrorMessage = (response) => isResponseWithError$1(response) ? response.error.message : "";
    class ResponseError extends BaseWeb3Error {
      constructor(response, message, request, statusCode) {
        var _a2;
        super(message !== null && message !== void 0 ? message : `Returned error: ${Array.isArray(response) ? response.map((r2) => buildErrorMessage(r2)).join(",") : buildErrorMessage(response)}`);
        this.code = ERR_RESPONSE;
        if (!message) {
          this.data = Array.isArray(response) ? response.map((r2) => {
            var _a3;
            return (_a3 = r2.error) === null || _a3 === void 0 ? void 0 : _a3.data;
          }) : (_a2 = response === null || response === void 0 ? void 0 : response.error) === null || _a2 === void 0 ? void 0 : _a2.data;
        }
        this.statusCode = statusCode;
        this.request = request;
        let errorOrErrors;
        if (`error` in response) {
          errorOrErrors = response.error;
        } else if (response instanceof Array) {
          errorOrErrors = response.filter((r2) => r2.error).map((r2) => r2.error);
        }
        if (Array.isArray(errorOrErrors) && errorOrErrors.length > 0) {
          this.cause = new MultipleErrors(errorOrErrors);
        } else {
          this.cause = errorOrErrors;
        }
      }
      toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { data: this.data, request: this.request, statusCode: this.statusCode });
      }
    }
    class InvalidResponseError extends ResponseError {
      constructor(result, request) {
        super(result, void 0, request);
        this.code = ERR_INVALID_RESPONSE;
        let errorOrErrors;
        if (`error` in result) {
          errorOrErrors = result.error;
        } else if (result instanceof Array) {
          errorOrErrors = result.map((r2) => r2.error);
        }
        if (Array.isArray(errorOrErrors)) {
          this.cause = new MultipleErrors(errorOrErrors);
        } else {
          this.cause = errorOrErrors;
        }
      }
    }
    class ConfigHardforkMismatchError extends BaseWeb3Error {
      constructor(defaultHardfork, commonHardFork) {
        super(`Web3Config hardfork doesnt match in defaultHardfork ${defaultHardfork} and common.hardfork ${commonHardFork}`);
        this.code = ERR_CORE_HARDFORK_MISMATCH;
      }
    }
    class ConfigChainMismatchError extends BaseWeb3Error {
      constructor(defaultHardfork, commonHardFork) {
        super(`Web3Config chain doesnt match in defaultHardfork ${defaultHardfork} and common.hardfork ${commonHardFork}`);
        this.code = ERR_CORE_HARDFORK_MISMATCH;
      }
    }
    const genericRpcErrorMessageTemplate = "An Rpc error has occured with a code of *code*";
    const RpcErrorMessages = {
      //  EIP-1474 & JSON RPC 2.0
      // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1474.md
      [ERR_RPC_INVALID_JSON]: {
        message: "Parse error",
        description: "Invalid JSON"
      },
      [ERR_RPC_INVALID_REQUEST]: {
        message: "Invalid request",
        description: "JSON is not a valid request object	"
      },
      [ERR_RPC_INVALID_METHOD]: {
        message: "Method not found",
        description: "Method does not exist	"
      },
      [ERR_RPC_INVALID_PARAMS]: {
        message: "Invalid params",
        description: "Invalid method parameters"
      },
      [ERR_RPC_INTERNAL_ERROR]: {
        message: "Internal error",
        description: "Internal JSON-RPC error"
      },
      [ERR_RPC_INVALID_INPUT]: {
        message: "Invalid input",
        description: "Missing or invalid parameters"
      },
      [ERR_RPC_MISSING_RESOURCE]: {
        message: "Resource not found",
        description: "Requested resource not found"
      },
      [ERR_RPC_UNAVAILABLE_RESOURCE]: {
        message: "Resource unavailable",
        description: "Requested resource not available"
      },
      [ERR_RPC_TRANSACTION_REJECTED]: {
        message: "Transaction rejected",
        description: "Transaction creation failed"
      },
      [ERR_RPC_UNSUPPORTED_METHOD]: {
        message: "Method not supported",
        description: "Method is not implemented"
      },
      [ERR_RPC_LIMIT_EXCEEDED]: {
        message: "Limit exceeded",
        description: "Request exceeds defined limit"
      },
      [ERR_RPC_NOT_SUPPORTED]: {
        message: "JSON-RPC version not supported",
        description: "Version of JSON-RPC protocol is not supported"
      },
      // EIP-1193
      // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md#provider-errors
      [JSONRPC_ERR_REJECTED_REQUEST]: {
        name: "User Rejected Request",
        message: "The user rejected the request."
      },
      [JSONRPC_ERR_UNAUTHORIZED]: {
        name: "Unauthorized",
        message: "The requested method and/or account has not been authorized by the user."
      },
      [JSONRPC_ERR_UNSUPPORTED_METHOD]: {
        name: "Unsupported Method",
        message: "The Provider does not support the requested method."
      },
      [JSONRPC_ERR_DISCONNECTED]: {
        name: "Disconnected",
        message: "The Provider is disconnected from all chains."
      },
      [JSONRPC_ERR_CHAIN_DISCONNECTED]: {
        name: "Chain Disconnected",
        message: "The Provider is not connected to the requested chain."
      },
      // EIP-1193 - CloseEvent
      // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/code
      "0-999": {
        name: "",
        message: "Not used."
      },
      1e3: {
        name: "Normal Closure",
        message: "The connection successfully completed the purpose for which it was created."
      },
      1001: {
        name: "Going Away",
        message: "The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection."
      },
      1002: {
        name: "Protocol error",
        message: "The endpoint is terminating the connection due to a protocol error."
      },
      1003: {
        name: "Unsupported Data",
        message: "The connection is being terminated because the endpoint received data of a type it cannot accept. (For example, a text-only endpoint received binary data.)"
      },
      1004: {
        name: "Reserved",
        message: "Reserved. A meaning might be defined in the future."
      },
      1005: {
        name: "No Status Rcvd",
        message: "Reserved. Indicates that no status code was provided even though one was expected."
      },
      1006: {
        name: "Abnormal Closure",
        message: "Reserved. Indicates that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected."
      },
      1007: {
        name: "Invalid frame payload data",
        message: "The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message)."
      },
      1008: {
        name: "Policy Violation",
        message: "The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable."
      },
      1009: {
        name: "Message Too Big",
        message: "The endpoint is terminating the connection because a data frame was received that is too large."
      },
      1010: {
        name: "Mandatory Ext.",
        message: "The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't."
      },
      1011: {
        name: "Internal Error",
        message: "The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request."
      },
      1012: {
        name: "Service Restart",
        message: "The server is terminating the connection because it is restarting."
      },
      1013: {
        name: "Try Again Later",
        message: "The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients."
      },
      1014: {
        name: "Bad Gateway",
        message: "The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code."
      },
      1015: {
        name: "TLS handshake",
        message: "Reserved. Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified)."
      },
      "1016-2999": {
        name: "",
        message: "For definition by future revisions of the WebSocket Protocol specification, and for definition by extension specifications."
      },
      "3000-3999": {
        name: "",
        message: "For use by libraries, frameworks, and applications. These status codes are registered directly with IANA. The interpretation of these codes is undefined by the WebSocket protocol."
      },
      "4000-4999": {
        name: "",
        message: "For private use, and thus can't be registered. Such codes can be used by prior agreements between WebSocket applications. The interpretation of these codes is undefined by the WebSocket protocol."
      }
    };
    class RpcError extends BaseWeb3Error {
      constructor(rpcError, message) {
        super(message !== null && message !== void 0 ? message : genericRpcErrorMessageTemplate.replace("*code*", rpcError.error.code.toString()));
        this.code = rpcError.error.code;
        this.id = rpcError.id;
        this.jsonrpc = rpcError.jsonrpc;
        this.jsonRpcError = rpcError.error;
      }
      toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { error: this.jsonRpcError, id: this.id, jsonRpc: this.jsonrpc });
      }
    }
    class EIP1193ProviderRpcError extends BaseWeb3Error {
      constructor(code, data) {
        var _a2, _b, _c, _d;
        if (!code) {
          super();
        } else if ((_a2 = RpcErrorMessages[code]) === null || _a2 === void 0 ? void 0 : _a2.message) {
          super(RpcErrorMessages[code].message);
        } else {
          const statusCodeRange = Object.keys(RpcErrorMessages).find((statusCode) => typeof statusCode === "string" && code >= parseInt(statusCode.split("-")[0], 10) && code <= parseInt(statusCode.split("-")[1], 10));
          super((_c = (_b = RpcErrorMessages[statusCodeRange !== null && statusCodeRange !== void 0 ? statusCodeRange : ""]) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : genericRpcErrorMessageTemplate.replace("*code*", (_d = code === null || code === void 0 ? void 0 : code.toString()) !== null && _d !== void 0 ? _d : '""'));
        }
        this.code = code;
        this.data = data;
      }
    }
    class ParseError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_JSON].message);
        this.code = ERR_RPC_INVALID_JSON;
      }
    }
    class InvalidRequestError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_REQUEST].message);
        this.code = ERR_RPC_INVALID_REQUEST;
      }
    }
    class MethodNotFoundError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_METHOD].message);
        this.code = ERR_RPC_INVALID_METHOD;
      }
    }
    class InvalidParamsError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_PARAMS].message);
        this.code = ERR_RPC_INVALID_PARAMS;
      }
    }
    class InternalError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_INTERNAL_ERROR].message);
        this.code = ERR_RPC_INTERNAL_ERROR;
      }
    }
    class InvalidInputError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_INVALID_INPUT].message);
        this.code = ERR_RPC_INVALID_INPUT;
      }
    }
    class MethodNotSupported extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_UNSUPPORTED_METHOD].message);
        this.code = ERR_RPC_UNSUPPORTED_METHOD;
      }
    }
    class ResourceUnavailableError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_UNAVAILABLE_RESOURCE].message);
        this.code = ERR_RPC_UNAVAILABLE_RESOURCE;
      }
    }
    class ResourcesNotFoundError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_MISSING_RESOURCE].message);
        this.code = ERR_RPC_MISSING_RESOURCE;
      }
    }
    class VersionNotSupportedError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_NOT_SUPPORTED].message);
        this.code = ERR_RPC_NOT_SUPPORTED;
      }
    }
    class TransactionRejectedError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_TRANSACTION_REJECTED].message);
        this.code = ERR_RPC_TRANSACTION_REJECTED;
      }
    }
    class LimitExceededError extends RpcError {
      constructor(rpcError) {
        super(rpcError, RpcErrorMessages[ERR_RPC_LIMIT_EXCEEDED].message);
        this.code = ERR_RPC_LIMIT_EXCEEDED;
      }
    }
    const rpcErrorsMap = /* @__PURE__ */ new Map();
    rpcErrorsMap.set(ERR_RPC_INVALID_JSON, { error: ParseError });
    rpcErrorsMap.set(ERR_RPC_INVALID_REQUEST, {
      error: InvalidRequestError
    });
    rpcErrorsMap.set(ERR_RPC_INVALID_METHOD, {
      error: MethodNotFoundError
    });
    rpcErrorsMap.set(ERR_RPC_INVALID_PARAMS, { error: InvalidParamsError });
    rpcErrorsMap.set(ERR_RPC_INTERNAL_ERROR, { error: InternalError });
    rpcErrorsMap.set(ERR_RPC_INVALID_INPUT, { error: InvalidInputError });
    rpcErrorsMap.set(ERR_RPC_UNSUPPORTED_METHOD, {
      error: MethodNotSupported
    });
    rpcErrorsMap.set(ERR_RPC_UNAVAILABLE_RESOURCE, {
      error: ResourceUnavailableError
    });
    rpcErrorsMap.set(ERR_RPC_TRANSACTION_REJECTED, {
      error: TransactionRejectedError
    });
    rpcErrorsMap.set(ERR_RPC_MISSING_RESOURCE, {
      error: ResourcesNotFoundError
    });
    rpcErrorsMap.set(ERR_RPC_NOT_SUPPORTED, {
      error: VersionNotSupportedError
    });
    rpcErrorsMap.set(ERR_RPC_LIMIT_EXCEEDED, { error: LimitExceededError });
    class SchemaFormatError extends BaseWeb3Error {
      constructor(type) {
        super(`Format for the type ${type} is unsupported`);
        this.type = type;
        this.code = ERR_SCHEMA_FORMAT;
      }
      toJSON() {
        return Object.assign(Object.assign({}, super.toJSON()), { type: this.type });
      }
    }
    function number(n2) {
      if (!Number.isSafeInteger(n2) || n2 < 0)
        throw new Error(`positive integer expected, not ${n2}`);
    }
    function bool(b) {
      if (typeof b !== "boolean")
        throw new Error(`boolean expected, not ${b}`);
    }
    function isBytes$2(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    function bytes(b, ...lengths) {
      if (!isBytes$2(b))
        throw new Error("Uint8Array expected");
      if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Uint8Array expected of length ${lengths}, not of length=${b.length}`);
    }
    function hash(h) {
      if (typeof h !== "function" || typeof h.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number(h.outputLen);
      number(h.blockLen);
    }
    function exists(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    function output(out, instance) {
      bytes(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
    }
    const assert = { number, bool, bytes, hash, exists, output };
    const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
    const _32n = /* @__PURE__ */ BigInt(32);
    function fromBig(n2, le2 = false) {
      if (le2)
        return { h: Number(n2 & U32_MASK64), l: Number(n2 >> _32n & U32_MASK64) };
      return { h: Number(n2 >> _32n & U32_MASK64) | 0, l: Number(n2 & U32_MASK64) | 0 };
    }
    function split$1(lst, le2 = false) {
      let Ah2 = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
        const { h, l: l2 } = fromBig(lst[i], le2);
        [Ah2[i], Al[i]] = [h, l2];
      }
      return [Ah2, Al];
    }
    const rotlSH = (h, l2, s) => h << s | l2 >>> 32 - s;
    const rotlSL = (h, l2, s) => l2 << s | h >>> 32 - s;
    const rotlBH = (h, l2, s) => l2 << s - 32 | h >>> 64 - s;
    const rotlBL = (h, l2, s) => h << s - 32 | l2 >>> 64 - s;
    const crypto$1 = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
    /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    const rotr = (word, shift) => word << 32 - shift | word >>> shift;
    const rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
    const isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    const byteSwap = (word) => word << 24 & 4278190080 | word << 8 & 16711680 | word >>> 8 & 65280 | word >>> 24 & 255;
    function byteSwap32(arr) {
      for (let i = 0; i < arr.length; i++) {
        arr[i] = byteSwap(arr[i]);
      }
    }
    function utf8ToBytes$3(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    function toBytes$1(data) {
      if (typeof data === "string")
        data = utf8ToBytes$3(data);
      bytes(data);
      return data;
    }
    function concatBytes$2(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        bytes(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    class Hash {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    }
    const toStr = {}.toString;
    function checkOpts(defaults, opts) {
      if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    function wrapConstructor(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes$1(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    function randomBytes$1(bytesLength = 32) {
      if (crypto$1 && typeof crypto$1.getRandomValues === "function") {
        return crypto$1.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    const SHA3_PI = [];
    const SHA3_ROTL = [];
    const _SHA3_IOTA = [];
    const _0n$4 = /* @__PURE__ */ BigInt(0);
    const _1n$5 = /* @__PURE__ */ BigInt(1);
    const _2n$3 = /* @__PURE__ */ BigInt(2);
    const _7n = /* @__PURE__ */ BigInt(7);
    const _256n = /* @__PURE__ */ BigInt(256);
    const _0x71n = /* @__PURE__ */ BigInt(113);
    for (let round = 0, R2 = _1n$5, x2 = 1, y2 = 0; round < 24; round++) {
      [x2, y2] = [y2, (2 * x2 + 3 * y2) % 5];
      SHA3_PI.push(2 * (5 * y2 + x2));
      SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
      let t2 = _0n$4;
      for (let j = 0; j < 7; j++) {
        R2 = (R2 << _1n$5 ^ (R2 >> _7n) * _0x71n) % _256n;
        if (R2 & _2n$3)
          t2 ^= _1n$5 << (_1n$5 << /* @__PURE__ */ BigInt(j)) - _1n$5;
      }
      _SHA3_IOTA.push(t2);
    }
    const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split$1(_SHA3_IOTA, true);
    const rotlH = (h, l2, s) => s > 32 ? rotlBH(h, l2, s) : rotlSH(h, l2, s);
    const rotlL = (h, l2, s) => s > 32 ? rotlBL(h, l2, s) : rotlSL(h, l2, s);
    function keccakP(s, rounds = 24) {
      const B2 = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x2 = 0; x2 < 10; x2++)
          B2[x2] = s[x2] ^ s[x2 + 10] ^ s[x2 + 20] ^ s[x2 + 30] ^ s[x2 + 40];
        for (let x2 = 0; x2 < 10; x2 += 2) {
          const idx1 = (x2 + 8) % 10;
          const idx0 = (x2 + 2) % 10;
          const B0 = B2[idx0];
          const B1 = B2[idx0 + 1];
          const Th2 = rotlH(B0, B1, 1) ^ B2[idx1];
          const Tl = rotlL(B0, B1, 1) ^ B2[idx1 + 1];
          for (let y2 = 0; y2 < 50; y2 += 10) {
            s[x2 + y2] ^= Th2;
            s[x2 + y2 + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t2 = 0; t2 < 24; t2++) {
          const shift = SHA3_ROTL[t2];
          const Th2 = rotlH(curH, curL, shift);
          const Tl = rotlL(curH, curL, shift);
          const PI = SHA3_PI[t2];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th2;
          s[PI + 1] = Tl;
        }
        for (let y2 = 0; y2 < 50; y2 += 10) {
          for (let x2 = 0; x2 < 10; x2++)
            B2[x2] = s[y2 + x2];
          for (let x2 = 0; x2 < 10; x2++)
            s[y2 + x2] ^= ~B2[(x2 + 2) % 10] & B2[(x2 + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H[round];
        s[1] ^= SHA3_IOTA_L[round];
      }
      B2.fill(0);
    }
    class Keccak extends Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        number(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = u32(this.state);
      }
      keccak() {
        if (!isLE)
          byteSwap32(this.state32);
        keccakP(this.state32, this.rounds);
        if (!isLE)
          byteSwap32(this.state32);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        exists(this);
        const { blockLen, state } = this;
        data = toBytes$1(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        exists(this, false);
        bytes(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes2) {
        number(bytes2);
        return this.xofInto(new Uint8Array(bytes2));
      }
      digestInto(out) {
        output(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    }
    const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
    const keccak_256 = /* @__PURE__ */ gen(1, 136, 256 / 8);
    const assertBytes = assert.bytes;
    function bytesToUtf8(data) {
      if (!(data instanceof Uint8Array)) {
        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);
      }
      return new TextDecoder().decode(data);
    }
    function equalsBytes(a, b) {
      if (a.length !== b.length) {
        return false;
      }
      for (let i = 0; i < a.length; i++) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    }
    function wrapHash(hash2) {
      return (msg) => {
        assert.bytes(msg);
        return hash2(msg);
      };
    }
    (() => {
      const webCrypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
      const nodeRequire = typeof module !== "undefined" && typeof module.require === "function" && module.require.bind(module);
      return {
        node: nodeRequire && !webCrypto ? nodeRequire("crypto") : void 0,
        web: webCrypto
      };
    })();
    const keccak256 = (() => {
      const k2 = wrapHash(keccak_256);
      k2.create = keccak_256.create;
      return k2;
    })();
    var util;
    (function(util2) {
      util2.assertEqual = (val) => val;
      function assertIs(_arg) {
      }
      util2.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      util2.assertNever = assertNever;
      util2.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util2.getValidEnumValues = (obj) => {
        const validKeys = util2.objectKeys(obj).filter((k2) => typeof obj[obj[k2]] !== "number");
        const filtered = {};
        for (const k2 of validKeys) {
          filtered[k2] = obj[k2];
        }
        return util2.objectValues(filtered);
      };
      util2.objectValues = (obj) => {
        return util2.objectKeys(obj).map(function(e) {
          return obj[e];
        });
      };
      util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
        const keys = [];
        for (const key in object) {
          if (Object.prototype.hasOwnProperty.call(object, key)) {
            keys.push(key);
          }
        }
        return keys;
      };
      util2.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item))
            return item;
        }
        return void 0;
      };
      util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
      function joinValues(array, separator = " | ") {
        return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      util2.joinValues = joinValues;
      util2.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util || (util = {}));
    var objectUtil;
    (function(objectUtil2) {
      objectUtil2.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second
          // second overwrites first
        };
      };
    })(objectUtil || (objectUtil = {}));
    const ZodParsedType = util.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    const getParsedType = (data) => {
      const t2 = typeof data;
      switch (t2) {
        case "undefined":
          return ZodParsedType.undefined;
        case "string":
          return ZodParsedType.string;
        case "number":
          return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
        case "boolean":
          return ZodParsedType.boolean;
        case "function":
          return ZodParsedType.function;
        case "bigint":
          return ZodParsedType.bigint;
        case "symbol":
          return ZodParsedType.symbol;
        case "object":
          if (Array.isArray(data)) {
            return ZodParsedType.array;
          }
          if (data === null) {
            return ZodParsedType.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return ZodParsedType.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return ZodParsedType.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return ZodParsedType.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return ZodParsedType.date;
          }
          return ZodParsedType.object;
        default:
          return ZodParsedType.unknown;
      }
    };
    const ZodIssueCode = util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite"
    ]);
    const quotelessJson = (obj) => {
      const json = JSON.stringify(obj, null, 2);
      return json.replace(/"([^"]+)":/g, "$1:");
    };
    class ZodError extends Error {
      constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto);
        } else {
          this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
      }
      get errors() {
        return this.issues;
      }
      format(_mapper) {
        const mapper = _mapper || function(issue) {
          return issue.message;
        };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
          for (const issue of error.issues) {
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue));
            } else {
              let curr = fieldErrors;
              let i = 0;
              while (i < issue.path.length) {
                const el2 = issue.path[i];
                const terminal = i === issue.path.length - 1;
                if (!terminal) {
                  curr[el2] = curr[el2] || { _errors: [] };
                } else {
                  curr[el2] = curr[el2] || { _errors: [] };
                  curr[el2]._errors.push(mapper(issue));
                }
                curr = curr[el2];
                i++;
              }
            }
          }
        };
        processError(this);
        return fieldErrors;
      }
      static assert(value) {
        if (!(value instanceof ZodError)) {
          throw new Error(`Not a ZodError: ${value}`);
        }
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
          } else {
            formErrors.push(mapper(sub));
          }
        }
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    }
    ZodError.create = (issues) => {
      const error = new ZodError(issues);
      return error;
    };
    const errorMap = (issue, _ctx) => {
      let message;
      switch (issue.code) {
        case ZodIssueCode.invalid_type:
          if (issue.received === ZodParsedType.undefined) {
            message = "Required";
          } else {
            message = `Expected ${issue.expected}, received ${issue.received}`;
          }
          break;
        case ZodIssueCode.invalid_literal:
          message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
          break;
        case ZodIssueCode.unrecognized_keys:
          message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
          break;
        case ZodIssueCode.invalid_union:
          message = `Invalid input`;
          break;
        case ZodIssueCode.invalid_union_discriminator:
          message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
          break;
        case ZodIssueCode.invalid_enum_value:
          message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodIssueCode.invalid_arguments:
          message = `Invalid function arguments`;
          break;
        case ZodIssueCode.invalid_return_type:
          message = `Invalid function return type`;
          break;
        case ZodIssueCode.invalid_date:
          message = `Invalid date`;
          break;
        case ZodIssueCode.invalid_string:
          if (typeof issue.validation === "object") {
            if ("includes" in issue.validation) {
              message = `Invalid input: must include "${issue.validation.includes}"`;
              if (typeof issue.validation.position === "number") {
                message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
              }
            } else if ("startsWith" in issue.validation) {
              message = `Invalid input: must start with "${issue.validation.startsWith}"`;
            } else if ("endsWith" in issue.validation) {
              message = `Invalid input: must end with "${issue.validation.endsWith}"`;
            } else {
              util.assertNever(issue.validation);
            }
          } else if (issue.validation !== "regex") {
            message = `Invalid ${issue.validation}`;
          } else {
            message = "Invalid";
          }
          break;
        case ZodIssueCode.too_small:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
          else
            message = "Invalid input";
          break;
        case ZodIssueCode.too_big:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "bigint")
            message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
          else
            message = "Invalid input";
          break;
        case ZodIssueCode.custom:
          message = `Invalid input`;
          break;
        case ZodIssueCode.invalid_intersection_types:
          message = `Intersection results could not be merged`;
          break;
        case ZodIssueCode.not_multiple_of:
          message = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        case ZodIssueCode.not_finite:
          message = "Number must be finite";
          break;
        default:
          message = _ctx.defaultError;
          util.assertNever(issue);
      }
      return { message };
    };
    let overrideErrorMap = errorMap;
    function setErrorMap(map) {
      overrideErrorMap = map;
    }
    function getErrorMap() {
      return overrideErrorMap;
    }
    const makeIssue = (params) => {
      const { data, path, errorMaps, issueData } = params;
      const fullPath = [...path, ...issueData.path || []];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== void 0) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
      for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    };
    const EMPTY_PATH = [];
    function addIssueToContext(ctx, issueData) {
      const overrideMap = getErrorMap();
      const issue = makeIssue({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          overrideMap,
          overrideMap === errorMap ? void 0 : errorMap
          // then global default map
        ].filter((x2) => !!x2)
      });
      ctx.common.issues.push(issue);
    }
    class ParseStatus {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid")
          this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted")
          this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
          if (s.status === "aborted")
            return INVALID;
          if (s.status === "dirty")
            status.dirty();
          arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const { key, value } = pair;
          if (key.status === "aborted")
            return INVALID;
          if (value.status === "aborted")
            return INVALID;
          if (key.status === "dirty")
            status.dirty();
          if (value.status === "dirty")
            status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return { status: status.value, value: finalObject };
      }
    }
    const INVALID = Object.freeze({
      status: "aborted"
    });
    const DIRTY = (value) => ({ status: "dirty", value });
    const OK = (value) => ({ status: "valid", value });
    const isAborted = (x2) => x2.status === "aborted";
    const isDirty = (x2) => x2.status === "dirty";
    const isValid$1 = (x2) => x2.status === "valid";
    const isAsync = (x2) => typeof Promise !== "undefined" && x2 instanceof Promise;
    function __classPrivateFieldGet(receiver, state, kind, f2) {
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f2) {
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return state.set(receiver, value), value;
    }
    typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    var errorUtil;
    (function(errorUtil2) {
      errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
      errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
    })(errorUtil || (errorUtil = {}));
    var _ZodEnum_cache, _ZodNativeEnum_cache;
    class ParseInputLazyPath {
      constructor(parent, value, path, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path;
        this._key = key;
      }
      get path() {
        if (!this._cachedPath.length) {
          if (this._key instanceof Array) {
            this._cachedPath.push(...this._path, ...this._key);
          } else {
            this._cachedPath.push(...this._path, this._key);
          }
        }
        return this._cachedPath;
      }
    }
    const handleResult = (ctx, result) => {
      if (isValid$1(result)) {
        return { success: true, data: result.value };
      } else {
        if (!ctx.common.issues.length) {
          throw new Error("Validation failed but no issues detected.");
        }
        return {
          success: false,
          get error() {
            if (this._error)
              return this._error;
            const error = new ZodError(ctx.common.issues);
            this._error = error;
            return this._error;
          }
        };
      }
    };
    function processCreateParams(params) {
      if (!params)
        return {};
      const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
      if (errorMap2 && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
      }
      if (errorMap2)
        return { errorMap: errorMap2, description };
      const customMap = (iss, ctx) => {
        var _a2, _b;
        const { message } = params;
        if (iss.code === "invalid_enum_value") {
          return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
        }
        if (typeof ctx.data === "undefined") {
          return { message: (_a2 = message !== null && message !== void 0 ? message : required_error) !== null && _a2 !== void 0 ? _a2 : ctx.defaultError };
        }
        if (iss.code !== "invalid_type")
          return { message: ctx.defaultError };
        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
      };
      return { errorMap: customMap, description };
    }
    class ZodType {
      constructor(def) {
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
      }
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return getParsedType(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: getParsedType(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        const result = this._parse(input);
        if (isAsync(result)) {
          throw new Error("Synchronous parse encountered promise.");
        }
        return result;
      }
      _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        var _a2;
        const ctx = {
          common: {
            issues: [],
            async: (_a2 = params === null || params === void 0 ? void 0 : params.async) !== null && _a2 !== void 0 ? _a2 : false,
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult(ctx, result);
      }
      async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            async: true
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: getParsedType(data)
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult(ctx, result);
      }
      refine(check, message) {
        const getIssueProperties = (val) => {
          if (typeof message === "string" || typeof message === "undefined") {
            return { message };
          } else if (typeof message === "function") {
            return message(val);
          } else {
            return message;
          }
        };
        return this._refinement((val, ctx) => {
          const result = check(val);
          const setError = () => ctx.addIssue({
            code: ZodIssueCode.custom,
            ...getIssueProperties(val)
          });
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError();
                return false;
              } else {
                return true;
              }
            });
          }
          if (!result) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check(val)) {
            ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
            return false;
          } else {
            return true;
          }
        });
      }
      _refinement(refinement) {
        return new ZodEffects({
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      superRefine(refinement) {
        return this._refinement(refinement);
      }
      optional() {
        return ZodOptional.create(this, this._def);
      }
      nullable() {
        return ZodNullable.create(this, this._def);
      }
      nullish() {
        return this.nullable().optional();
      }
      array() {
        return ZodArray.create(this, this._def);
      }
      promise() {
        return ZodPromise.create(this, this._def);
      }
      or(option) {
        return ZodUnion.create([this, option], this._def);
      }
      and(incoming) {
        return ZodIntersection.create(this, incoming, this._def);
      }
      transform(transform) {
        return new ZodEffects({
          ...processCreateParams(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind.ZodEffects,
          effect: { type: "transform", transform }
        });
      }
      default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault({
          ...processCreateParams(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodDefault
        });
      }
      brand() {
        return new ZodBranded({
          typeName: ZodFirstPartyTypeKind.ZodBranded,
          type: this,
          ...processCreateParams(this._def)
        });
      }
      catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch({
          ...processCreateParams(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind.ZodCatch
        });
      }
      describe(description) {
        const This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      pipe(target) {
        return ZodPipeline.create(this, target);
      }
      readonly() {
        return ZodReadonly.create(this);
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    }
    const cuidRegex = /^c[^\s-]{8,}$/i;
    const cuid2Regex = /^[0-9a-z]+$/;
    const ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/;
    const uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
    const nanoidRegex = /^[a-z0-9_-]{21}$/i;
    const durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    const emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
    const _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    let emojiRegex;
    const ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    const ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;
    const base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    const dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
    const dateRegex = new RegExp(`^${dateRegexSource}$`);
    function timeRegexSource(args) {
      let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
      if (args.precision) {
        regex = `${regex}\\.\\d{${args.precision}}`;
      } else if (args.precision == null) {
        regex = `${regex}(\\.\\d+)?`;
      }
      return regex;
    }
    function timeRegex(args) {
      return new RegExp(`^${timeRegexSource(args)}$`);
    }
    function datetimeRegex(args) {
      let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
      const opts = [];
      opts.push(args.local ? `Z?` : `Z`);
      if (args.offset)
        opts.push(`([+-]\\d{2}:?\\d{2})`);
      regex = `${regex}(${opts.join("|")})`;
      return new RegExp(`^${regex}$`);
    }
    function isValidIP(ip, version2) {
      if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
        return true;
      }
      if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
        return true;
      }
      return false;
    }
    class ZodString extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.string) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.string,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.length < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.length > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "length") {
            const tooBig = input.data.length > check.value;
            const tooSmall = input.data.length < check.value;
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              if (tooBig) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              } else if (tooSmall) {
                addIssueToContext(ctx, {
                  code: ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              }
              status.dirty();
            }
          } else if (check.kind === "email") {
            if (!emailRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "email",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "emoji") {
            if (!emojiRegex) {
              emojiRegex = new RegExp(_emojiRegex, "u");
            }
            if (!emojiRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "emoji",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "uuid") {
            if (!uuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "uuid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "nanoid") {
            if (!nanoidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "nanoid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid") {
            if (!cuidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cuid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid2") {
            if (!cuid2Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "cuid2",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ulid") {
            if (!ulidRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "ulid",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "url") {
            try {
              new URL(input.data);
            } catch (_a2) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "url",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "regex") {
            check.regex.lastIndex = 0;
            const testResult = check.regex.test(input.data);
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "regex",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "trim") {
            input.data = input.data.trim();
          } else if (check.kind === "includes") {
            if (!input.data.includes(check.value, check.position)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { includes: check.value, position: check.position },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "toLowerCase") {
            input.data = input.data.toLowerCase();
          } else if (check.kind === "toUpperCase") {
            input.data = input.data.toUpperCase();
          } else if (check.kind === "startsWith") {
            if (!input.data.startsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { startsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "endsWith") {
            if (!input.data.endsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: { endsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "datetime") {
            const regex = datetimeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "datetime",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "date") {
            const regex = dateRegex;
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "date",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "time") {
            const regex = timeRegex(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_string,
                validation: "time",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "duration") {
            if (!durationRegex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "duration",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ip") {
            if (!isValidIP(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "ip",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64") {
            if (!base64Regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                validation: "base64",
                code: ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
          validation,
          code: ZodIssueCode.invalid_string,
          ...errorUtil.errToObj(message)
        });
      }
      _addCheck(check) {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      email(message) {
        return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
      }
      url(message) {
        return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
      }
      emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
      }
      uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
      }
      nanoid(message) {
        return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
      }
      cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
      }
      cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
      }
      ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
      }
      base64(message) {
        return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
      }
      ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
      }
      datetime(options) {
        var _a2, _b;
        if (typeof options === "string") {
          return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options
          });
        }
        return this._addCheck({
          kind: "datetime",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          offset: (_a2 = options === null || options === void 0 ? void 0 : options.offset) !== null && _a2 !== void 0 ? _a2 : false,
          local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
          ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      date(message) {
        return this._addCheck({ kind: "date", message });
      }
      time(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "time",
            precision: null,
            message: options
          });
        }
        return this._addCheck({
          kind: "time",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      duration(message) {
        return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
      }
      regex(regex, message) {
        return this._addCheck({
          kind: "regex",
          regex,
          ...errorUtil.errToObj(message)
        });
      }
      includes(value, options) {
        return this._addCheck({
          kind: "includes",
          value,
          position: options === null || options === void 0 ? void 0 : options.position,
          ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      startsWith(value, message) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil.errToObj(message)
        });
      }
      endsWith(value, message) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil.errToObj(message)
        });
      }
      min(minLength, message) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil.errToObj(message)
        });
      }
      max(maxLength, message) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil.errToObj(message)
        });
      }
      length(len, message) {
        return this._addCheck({
          kind: "length",
          value: len,
          ...errorUtil.errToObj(message)
        });
      }
      /**
       * @deprecated Use z.string().min(1) instead.
       * @see {@link ZodString.min}
       */
      nonempty(message) {
        return this.min(1, errorUtil.errToObj(message));
      }
      trim() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      toLowerCase() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toLowerCase" }]
        });
      }
      toUpperCase() {
        return new ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toUpperCase" }]
        });
      }
      get isDatetime() {
        return !!this._def.checks.find((ch2) => ch2.kind === "datetime");
      }
      get isDate() {
        return !!this._def.checks.find((ch2) => ch2.kind === "date");
      }
      get isTime() {
        return !!this._def.checks.find((ch2) => ch2.kind === "time");
      }
      get isDuration() {
        return !!this._def.checks.find((ch2) => ch2.kind === "duration");
      }
      get isEmail() {
        return !!this._def.checks.find((ch2) => ch2.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch2) => ch2.kind === "url");
      }
      get isEmoji() {
        return !!this._def.checks.find((ch2) => ch2.kind === "emoji");
      }
      get isUUID() {
        return !!this._def.checks.find((ch2) => ch2.kind === "uuid");
      }
      get isNANOID() {
        return !!this._def.checks.find((ch2) => ch2.kind === "nanoid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch2) => ch2.kind === "cuid");
      }
      get isCUID2() {
        return !!this._def.checks.find((ch2) => ch2.kind === "cuid2");
      }
      get isULID() {
        return !!this._def.checks.find((ch2) => ch2.kind === "ulid");
      }
      get isIP() {
        return !!this._def.checks.find((ch2) => ch2.kind === "ip");
      }
      get isBase64() {
        return !!this._def.checks.find((ch2) => ch2.kind === "base64");
      }
      get minLength() {
        let min = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "min") {
            if (min === null || ch2.value > min)
              min = ch2.value;
          }
        }
        return min;
      }
      get maxLength() {
        let max = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "max") {
            if (max === null || ch2.value < max)
              max = ch2.value;
          }
        }
        return max;
      }
    }
    ZodString.create = (params) => {
      var _a2;
      return new ZodString({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodString,
        coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false,
        ...processCreateParams(params)
      });
    };
    function floatSafeRemainder(val, step) {
      const valDecCount = (val.toString().split(".")[1] || "").length;
      const stepDecCount = (step.toString().split(".")[1] || "").length;
      const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
      const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
      const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
      return valInt % stepInt / Math.pow(10, decCount);
    }
    class ZodNumber extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.number) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.number,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "int") {
            if (!util.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.invalid_type,
                expected: "integer",
                received: "float",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (floatSafeRemainder(input.data, check.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "finite") {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_finite,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodNumber({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodNumber({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      int(message) {
        return this._addCheck({
          kind: "int",
          message: errorUtil.toString(message)
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil.toString(message)
        });
      }
      finite(message) {
        return this._addCheck({
          kind: "finite",
          message: errorUtil.toString(message)
        });
      }
      safe(message) {
        return this._addCheck({
          kind: "min",
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil.toString(message)
        })._addCheck({
          kind: "max",
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "min") {
            if (min === null || ch2.value > min)
              min = ch2.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "max") {
            if (max === null || ch2.value < max)
              max = ch2.value;
          }
        }
        return max;
      }
      get isInt() {
        return !!this._def.checks.find((ch2) => ch2.kind === "int" || ch2.kind === "multipleOf" && util.isInteger(ch2.value));
      }
      get isFinite() {
        let max = null, min = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "finite" || ch2.kind === "int" || ch2.kind === "multipleOf") {
            return true;
          } else if (ch2.kind === "min") {
            if (min === null || ch2.value > min)
              min = ch2.value;
          } else if (ch2.kind === "max") {
            if (max === null || ch2.value < max)
              max = ch2.value;
          }
        }
        return Number.isFinite(min) && Number.isFinite(max);
      }
    }
    ZodNumber.create = (params) => {
      return new ZodNumber({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    class ZodBigInt extends ZodType {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = BigInt(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.bigint) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.bigint,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        let ctx = void 0;
        const status = new ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                type: "bigint",
                minimum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                type: "bigint",
                maximum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (input.data % check.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new ZodBigInt({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new ZodBigInt({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "min") {
            if (min === null || ch2.value > min)
              min = ch2.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "max") {
            if (max === null || ch2.value < max)
              max = ch2.value;
          }
        }
        return max;
      }
    }
    ZodBigInt.create = (params) => {
      var _a2;
      return new ZodBigInt({
        checks: [],
        typeName: ZodFirstPartyTypeKind.ZodBigInt,
        coerce: (_a2 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a2 !== void 0 ? _a2 : false,
        ...processCreateParams(params)
      });
    };
    class ZodBoolean extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.boolean) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.boolean,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodBoolean.create = (params) => {
      return new ZodBoolean({
        typeName: ZodFirstPartyTypeKind.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams(params)
      });
    };
    class ZodDate extends ZodType {
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.date) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.date,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        if (isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_date
          });
          return INVALID;
        }
        const status = new ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.getTime() < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                message: check.message,
                inclusive: true,
                exact: false,
                minimum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.getTime() > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                message: check.message,
                inclusive: true,
                exact: false,
                maximum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else {
            util.assertNever(check);
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check) {
        return new ZodDate({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      min(minDate, message) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil.toString(message)
        });
      }
      max(maxDate, message) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil.toString(message)
        });
      }
      get minDate() {
        let min = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "min") {
            if (min === null || ch2.value > min)
              min = ch2.value;
          }
        }
        return min != null ? new Date(min) : null;
      }
      get maxDate() {
        let max = null;
        for (const ch2 of this._def.checks) {
          if (ch2.kind === "max") {
            if (max === null || ch2.value < max)
              max = ch2.value;
          }
        }
        return max != null ? new Date(max) : null;
      }
    }
    ZodDate.create = (params) => {
      return new ZodDate({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind.ZodDate,
        ...processCreateParams(params)
      });
    };
    class ZodSymbol extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.symbol) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.symbol,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodSymbol.create = (params) => {
      return new ZodSymbol({
        typeName: ZodFirstPartyTypeKind.ZodSymbol,
        ...processCreateParams(params)
      });
    };
    class ZodUndefined extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.undefined,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodUndefined.create = (params) => {
      return new ZodUndefined({
        typeName: ZodFirstPartyTypeKind.ZodUndefined,
        ...processCreateParams(params)
      });
    };
    class ZodNull extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.null) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.null,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodNull.create = (params) => {
      return new ZodNull({
        typeName: ZodFirstPartyTypeKind.ZodNull,
        ...processCreateParams(params)
      });
    };
    class ZodAny extends ZodType {
      constructor() {
        super(...arguments);
        this._any = true;
      }
      _parse(input) {
        return OK(input.data);
      }
    }
    ZodAny.create = (params) => {
      return new ZodAny({
        typeName: ZodFirstPartyTypeKind.ZodAny,
        ...processCreateParams(params)
      });
    };
    class ZodUnknown extends ZodType {
      constructor() {
        super(...arguments);
        this._unknown = true;
      }
      _parse(input) {
        return OK(input.data);
      }
    }
    ZodUnknown.create = (params) => {
      return new ZodUnknown({
        typeName: ZodFirstPartyTypeKind.ZodUnknown,
        ...processCreateParams(params)
      });
    };
    class ZodNever extends ZodType {
      _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.never,
          received: ctx.parsedType
        });
        return INVALID;
      }
    }
    ZodNever.create = (params) => {
      return new ZodNever({
        typeName: ZodFirstPartyTypeKind.ZodNever,
        ...processCreateParams(params)
      });
    };
    class ZodVoid extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.void,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return OK(input.data);
      }
    }
    ZodVoid.create = (params) => {
      return new ZodVoid({
        typeName: ZodFirstPartyTypeKind.ZodVoid,
        ...processCreateParams(params)
      });
    };
    class ZodArray extends ZodType {
      _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          });
          return INVALID;
        }
        if (def.exactLength !== null) {
          const tooBig = ctx.data.length > def.exactLength.value;
          const tooSmall = ctx.data.length < def.exactLength.value;
          if (tooBig || tooSmall) {
            addIssueToContext(ctx, {
              code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
              minimum: tooSmall ? def.exactLength.value : void 0,
              maximum: tooBig ? def.exactLength.value : void 0,
              type: "array",
              inclusive: true,
              exact: true,
              message: def.exactLength.message
            });
            status.dirty();
          }
        }
        if (def.minLength !== null) {
          if (ctx.data.length < def.minLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def.minLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.minLength.message
            });
            status.dirty();
          }
        }
        if (def.maxLength !== null) {
          if (ctx.data.length > def.maxLength.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def.maxLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.maxLength.message
            });
            status.dirty();
          }
        }
        if (ctx.common.async) {
          return Promise.all([...ctx.data].map((item, i) => {
            return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
          })).then((result2) => {
            return ParseStatus.mergeArray(status, result2);
          });
        }
        const result = [...ctx.data].map((item, i) => {
          return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
        });
        return ParseStatus.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message) {
        return new ZodArray({
          ...this._def,
          minLength: { value: minLength, message: errorUtil.toString(message) }
        });
      }
      max(maxLength, message) {
        return new ZodArray({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil.toString(message) }
        });
      }
      length(len, message) {
        return new ZodArray({
          ...this._def,
          exactLength: { value: len, message: errorUtil.toString(message) }
        });
      }
      nonempty(message) {
        return this.min(1, message);
      }
    }
    ZodArray.create = (schema, params) => {
      return new ZodArray({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind.ZodArray,
        ...processCreateParams(params)
      });
    };
    function deepPartialify(schema) {
      if (schema instanceof ZodObject) {
        const newShape = {};
        for (const key in schema.shape) {
          const fieldSchema = schema.shape[key];
          newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
        }
        return new ZodObject({
          ...schema._def,
          shape: () => newShape
        });
      } else if (schema instanceof ZodArray) {
        return new ZodArray({
          ...schema._def,
          type: deepPartialify(schema.element)
        });
      } else if (schema instanceof ZodOptional) {
        return ZodOptional.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodNullable) {
        return ZodNullable.create(deepPartialify(schema.unwrap()));
      } else if (schema instanceof ZodTuple) {
        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
      } else {
        return schema;
      }
    }
    class ZodObject extends ZodType {
      constructor() {
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        const shape = this._def.shape();
        const keys = util.objectKeys(shape);
        return this._cached = { shape, keys };
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.object) {
          const ctx2 = this._getOrReturnCtx(input);
          addIssueToContext(ctx2, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx2.parsedType
          });
          return INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key);
            }
          }
        }
        const pairs = [];
        for (const key of shapeKeys) {
          const keyValidator = shape[key];
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever) {
          const unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough") {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
            }
          } else if (unknownKeys === "strict") {
            if (extraKeys.length > 0) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.unrecognized_keys,
                keys: extraKeys
              });
              status.dirty();
            }
          } else if (unknownKeys === "strip") ;
          else {
            throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
          }
        } else {
          const catchall = this._def.catchall;
          for (const key of extraKeys) {
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath(ctx, value, ctx.path, key)
                //, ctx.child(key), value, getParsedType(value)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        if (ctx.common.async) {
          return Promise.resolve().then(async () => {
            const syncPairs = [];
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                key,
                value,
                alwaysSet: pair.alwaysSet
              });
            }
            return syncPairs;
          }).then((syncPairs) => {
            return ParseStatus.mergeObjectSync(status, syncPairs);
          });
        } else {
          return ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get shape() {
        return this._def.shape();
      }
      strict(message) {
        errorUtil.errToObj;
        return new ZodObject({
          ...this._def,
          unknownKeys: "strict",
          ...message !== void 0 ? {
            errorMap: (issue, ctx) => {
              var _a2, _b, _c, _d;
              const defaultError = (_c = (_b = (_a2 = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a2, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                };
              return {
                message: defaultError
              };
            }
          } : {}
        });
      }
      strip() {
        return new ZodObject({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new ZodObject({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
        return new ZodObject({
          ...this._def,
          shape: () => ({
            ...this._def.shape(),
            ...augmentation
          })
        });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
        const merged = new ZodObject({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: () => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }),
          typeName: ZodFirstPartyTypeKind.ZodObject
        });
        return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema) {
        return this.augment({ [key]: schema });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index) {
        return new ZodObject({
          ...this._def,
          catchall: index
        });
      }
      pick(mask2) {
        const shape = {};
        util.objectKeys(mask2).forEach((key) => {
          if (mask2[key] && this.shape[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      omit(mask2) {
        const shape = {};
        util.objectKeys(this.shape).forEach((key) => {
          if (!mask2[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      /**
       * @deprecated
       */
      deepPartial() {
        return deepPartialify(this);
      }
      partial(mask2) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
          const fieldSchema = this.shape[key];
          if (mask2 && !mask2[key]) {
            newShape[key] = fieldSchema;
          } else {
            newShape[key] = fieldSchema.optional();
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      required(mask2) {
        const newShape = {};
        util.objectKeys(this.shape).forEach((key) => {
          if (mask2 && !mask2[key]) {
            newShape[key] = this.shape[key];
          } else {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
        });
        return new ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      keyof() {
        return createZodEnum(util.objectKeys(this.shape));
      }
    }
    ZodObject.create = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.strictCreate = (shape, params) => {
      return new ZodObject({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    ZodObject.lazycreate = (shape, params) => {
      return new ZodObject({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever.create(),
        typeName: ZodFirstPartyTypeKind.ZodObject,
        ...processCreateParams(params)
      });
    };
    class ZodUnion extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === "valid") {
              return result.result;
            }
          }
          for (const result of results) {
            if (result.result.status === "dirty") {
              ctx.common.issues.push(...result.ctx.common.issues);
              return result.result;
            }
          }
          const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
          return INVALID;
        }
        if (ctx.common.async) {
          return Promise.all(options.map(async (option) => {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        } else {
          let dirty = void 0;
          const issues = [];
          for (const option of options) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid") {
              return result;
            } else if (result.status === "dirty" && !dirty) {
              dirty = { result, ctx: childCtx };
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues);
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues);
            return dirty.result;
          }
          const unionErrors = issues.map((issues2) => new ZodError(issues2));
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union,
            unionErrors
          });
          return INVALID;
        }
      }
      get options() {
        return this._def.options;
      }
    }
    ZodUnion.create = (types, params) => {
      return new ZodUnion({
        options: types,
        typeName: ZodFirstPartyTypeKind.ZodUnion,
        ...processCreateParams(params)
      });
    };
    const getDiscriminator = (type) => {
      if (type instanceof ZodLazy) {
        return getDiscriminator(type.schema);
      } else if (type instanceof ZodEffects) {
        return getDiscriminator(type.innerType());
      } else if (type instanceof ZodLiteral) {
        return [type.value];
      } else if (type instanceof ZodEnum) {
        return type.options;
      } else if (type instanceof ZodNativeEnum) {
        return util.objectValues(type.enum);
      } else if (type instanceof ZodDefault) {
        return getDiscriminator(type._def.innerType);
      } else if (type instanceof ZodUndefined) {
        return [void 0];
      } else if (type instanceof ZodNull) {
        return [null];
      } else if (type instanceof ZodOptional) {
        return [void 0, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodNullable) {
        return [null, ...getDiscriminator(type.unwrap())];
      } else if (type instanceof ZodBranded) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodReadonly) {
        return getDiscriminator(type.unwrap());
      } else if (type instanceof ZodCatch) {
        return getDiscriminator(type._def.innerType);
      } else {
        return [];
      }
    };
    class ZodDiscriminatedUnion extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_union_discriminator,
            options: Array.from(this.optionsMap.keys()),
            path: [discriminator]
          });
          return INVALID;
        }
        if (ctx.common.async) {
          return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        } else {
          return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      get discriminator() {
        return this._def.discriminator;
      }
      get options() {
        return this._def.options;
      }
      get optionsMap() {
        return this._def.optionsMap;
      }
      /**
       * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
       * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
       * have a different value for each object in the union.
       * @param discriminator the name of the discriminator property
       * @param types an array of object schemas
       * @param params
       */
      static create(discriminator, options, params) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options) {
          const discriminatorValues = getDiscriminator(type.shape[discriminator]);
          if (!discriminatorValues.length) {
            throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
          }
          for (const value of discriminatorValues) {
            if (optionsMap.has(value)) {
              throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
            }
            optionsMap.set(value, type);
          }
        }
        return new ZodDiscriminatedUnion({
          typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
          discriminator,
          options,
          optionsMap,
          ...processCreateParams(params)
        });
      }
    }
    function mergeValues(a, b) {
      const aType = getParsedType(a);
      const bType = getParsedType(b);
      if (a === b) {
        return { valid: true, data: a };
      } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
        const bKeys = util.objectKeys(b);
        const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
          const sharedValue = mergeValues(a[key], b[key]);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
      } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
        if (a.length !== b.length) {
          return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
          const itemA = a[index];
          const itemB = b[index];
          const sharedValue = mergeValues(itemA, itemB);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
      } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
        return { valid: true, data: a };
      } else {
        return { valid: false };
      }
    }
    class ZodIntersection extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
          if (isAborted(parsedLeft) || isAborted(parsedRight)) {
            return INVALID;
          }
          const merged = mergeValues(parsedLeft.value, parsedRight.value);
          if (!merged.valid) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_intersection_types
            });
            return INVALID;
          }
          if (isDirty(parsedLeft) || isDirty(parsedRight)) {
            status.dirty();
          }
          return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right));
        } else {
          return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }));
        }
      }
    }
    ZodIntersection.create = (left, right, params) => {
      return new ZodIntersection({
        left,
        right,
        typeName: ZodFirstPartyTypeKind.ZodIntersection,
        ...processCreateParams(params)
      });
    };
    class ZodTuple extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.array) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.array,
            received: ctx.parsedType
          });
          return INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          return INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          status.dirty();
        }
        const items = [...ctx.data].map((item, itemIndex) => {
          const schema = this._def.items[itemIndex] || this._def.rest;
          if (!schema)
            return null;
          return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
        }).filter((x2) => !!x2);
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return ParseStatus.mergeArray(status, results);
          });
        } else {
          return ParseStatus.mergeArray(status, items);
        }
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new ZodTuple({
          ...this._def,
          rest
        });
      }
    }
    ZodTuple.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple({
        items: schemas,
        typeName: ZodFirstPartyTypeKind.ZodTuple,
        rest: null,
        ...processCreateParams(params)
      });
    };
    class ZodRecord extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.object) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.object,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
          pairs.push({
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (ctx.common.async) {
          return ParseStatus.mergeObjectAsync(status, pairs);
        } else {
          return ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get element() {
        return this._def.valueType;
      }
      static create(first, second, third) {
        if (second instanceof ZodType) {
          return new ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind.ZodRecord,
            ...processCreateParams(third)
          });
        }
        return new ZodRecord({
          keyType: ZodString.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind.ZodRecord,
          ...processCreateParams(second)
        });
      }
    }
    class ZodMap extends ZodType {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.map) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.map,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
          return {
            key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
            value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
          };
        });
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          const finalMap = /* @__PURE__ */ new Map();
          for (const pair of pairs) {
            const key = pair.key;
            const value = pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    }
    ZodMap.create = (keyType, valueType, params) => {
      return new ZodMap({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind.ZodMap,
        ...processCreateParams(params)
      });
    };
    class ZodSet extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.set) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.set,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
          if (ctx.data.size < def.minSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: def.minSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.minSize.message
            });
            status.dirty();
          }
        }
        if (def.maxSize !== null) {
          if (ctx.data.size > def.maxSize.value) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: def.maxSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.maxSize.message
            });
            status.dirty();
          }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
          const parsedSet = /* @__PURE__ */ new Set();
          for (const element of elements2) {
            if (element.status === "aborted")
              return INVALID;
            if (element.status === "dirty")
              status.dirty();
            parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
          return Promise.all(elements).then((elements2) => finalizeSet(elements2));
        } else {
          return finalizeSet(elements);
        }
      }
      min(minSize, message) {
        return new ZodSet({
          ...this._def,
          minSize: { value: minSize, message: errorUtil.toString(message) }
        });
      }
      max(maxSize, message) {
        return new ZodSet({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil.toString(message) }
        });
      }
      size(size, message) {
        return this.min(size, message).max(size, message);
      }
      nonempty(message) {
        return this.min(1, message);
      }
    }
    ZodSet.create = (valueType, params) => {
      return new ZodSet({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind.ZodSet,
        ...processCreateParams(params)
      });
    };
    class ZodFunction extends ZodType {
      constructor() {
        super(...arguments);
        this.validate = this.implement;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.function) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.function,
            received: ctx.parsedType
          });
          return INVALID;
        }
        function makeArgsIssue(args, error) {
          return makeIssue({
            data: args,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              getErrorMap(),
              errorMap
            ].filter((x2) => !!x2),
            issueData: {
              code: ZodIssueCode.invalid_arguments,
              argumentsError: error
            }
          });
        }
        function makeReturnsIssue(returns, error) {
          return makeIssue({
            data: returns,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              getErrorMap(),
              errorMap
            ].filter((x2) => !!x2),
            issueData: {
              code: ZodIssueCode.invalid_return_type,
              returnTypeError: error
            }
          });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise) {
          const me2 = this;
          return OK(async function(...args) {
            const error = new ZodError([]);
            const parsedArgs = await me2._def.args.parseAsync(args, params).catch((e) => {
              error.addIssue(makeArgsIssue(args, e));
              throw error;
            });
            const result = await Reflect.apply(fn, this, parsedArgs);
            const parsedReturns = await me2._def.returns._def.type.parseAsync(result, params).catch((e) => {
              error.addIssue(makeReturnsIssue(result, e));
              throw error;
            });
            return parsedReturns;
          });
        } else {
          const me2 = this;
          return OK(function(...args) {
            const parsedArgs = me2._def.args.safeParse(args, params);
            if (!parsedArgs.success) {
              throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
            }
            const result = Reflect.apply(fn, this, parsedArgs.data);
            const parsedReturns = me2._def.returns.safeParse(result, params);
            if (!parsedReturns.success) {
              throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
            }
            return parsedReturns.data;
          });
        }
      }
      parameters() {
        return this._def.args;
      }
      returnType() {
        return this._def.returns;
      }
      args(...items) {
        return new ZodFunction({
          ...this._def,
          args: ZodTuple.create(items).rest(ZodUnknown.create())
        });
      }
      returns(returnType) {
        return new ZodFunction({
          ...this._def,
          returns: returnType
        });
      }
      implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      static create(args, returns, params) {
        return new ZodFunction({
          args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
          returns: returns || ZodUnknown.create(),
          typeName: ZodFirstPartyTypeKind.ZodFunction,
          ...processCreateParams(params)
        });
      }
    }
    class ZodLazy extends ZodType {
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    }
    ZodLazy.create = (getter, params) => {
      return new ZodLazy({
        getter,
        typeName: ZodFirstPartyTypeKind.ZodLazy,
        ...processCreateParams(params)
      });
    };
    class ZodLiteral extends ZodType {
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_literal,
            expected: this._def.value
          });
          return INVALID;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    }
    ZodLiteral.create = (value, params) => {
      return new ZodLiteral({
        value,
        typeName: ZodFirstPartyTypeKind.ZodLiteral,
        ...processCreateParams(params)
      });
    };
    function createZodEnum(values, params) {
      return new ZodEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodEnum,
        ...processCreateParams(params)
      });
    }
    class ZodEnum extends ZodType {
      constructor() {
        super(...arguments);
        _ZodEnum_cache.set(this, void 0);
      }
      _parse(input) {
        if (typeof input.data !== "string") {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          });
          return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache)) {
          __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values));
        }
        if (!__classPrivateFieldGet(this, _ZodEnum_cache).has(input.data)) {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return INVALID;
        }
        return OK(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      extract(values, newDef = this._def) {
        return ZodEnum.create(values, {
          ...this._def,
          ...newDef
        });
      }
      exclude(values, newDef = this._def) {
        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
          ...this._def,
          ...newDef
        });
      }
    }
    _ZodEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodEnum.create = createZodEnum;
    class ZodNativeEnum extends ZodType {
      constructor() {
        super(...arguments);
        _ZodNativeEnum_cache.set(this, void 0);
      }
      _parse(input) {
        const nativeEnumValues = util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
          const expectedValues = util.objectValues(nativeEnumValues);
          addIssueToContext(ctx, {
            expected: util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodIssueCode.invalid_type
          });
          return INVALID;
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache)) {
          __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)));
        }
        if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache).has(input.data)) {
          const expectedValues = util.objectValues(nativeEnumValues);
          addIssueToContext(ctx, {
            received: ctx.data,
            code: ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return INVALID;
        }
        return OK(input.data);
      }
      get enum() {
        return this._def.values;
      }
    }
    _ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
    ZodNativeEnum.create = (values, params) => {
      return new ZodNativeEnum({
        values,
        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
        ...processCreateParams(params)
      });
    };
    class ZodPromise extends ZodType {
      unwrap() {
        return this._def.type;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.promise,
            received: ctx.parsedType
          });
          return INVALID;
        }
        const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return OK(promisified.then((data) => {
          return this._def.type.parseAsync(data, {
            path: ctx.path,
            errorMap: ctx.common.contextualErrorMap
          });
        }));
      }
    }
    ZodPromise.create = (schema, params) => {
      return new ZodPromise({
        type: schema,
        typeName: ZodFirstPartyTypeKind.ZodPromise,
        ...processCreateParams(params)
      });
    };
    class ZodEffects extends ZodType {
      innerType() {
        return this._def.schema;
      }
      sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
          addIssue: (arg) => {
            addIssueToContext(ctx, arg);
            if (arg.fatal) {
              status.abort();
            } else {
              status.dirty();
            }
          },
          get path() {
            return ctx.path;
          }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
          const processed = effect.transform(ctx.data, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(processed).then(async (processed2) => {
              if (status.value === "aborted")
                return INVALID;
              const result = await this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return INVALID;
              if (result.status === "dirty")
                return DIRTY(result.value);
              if (status.value === "dirty")
                return DIRTY(result.value);
              return result;
            });
          } else {
            if (status.value === "aborted")
              return INVALID;
            const result = this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return INVALID;
            if (result.status === "dirty")
              return DIRTY(result.value);
            if (status.value === "dirty")
              return DIRTY(result.value);
            return result;
          }
        }
        if (effect.type === "refinement") {
          const executeRefinement = (acc) => {
            const result = effect.refinement(acc, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(result);
            }
            if (result instanceof Promise) {
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            }
            return acc;
          };
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            executeRefinement(inner.value);
            return { status: status.value, value: inner.value };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
              if (inner.status === "aborted")
                return INVALID;
              if (inner.status === "dirty")
                status.dirty();
              return executeRefinement(inner.value).then(() => {
                return { status: status.value, value: inner.value };
              });
            });
          }
        }
        if (effect.type === "transform") {
          if (ctx.common.async === false) {
            const base2 = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!isValid$1(base2))
              return base2;
            const result = effect.transform(base2.value, checkCtx);
            if (result instanceof Promise) {
              throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
            }
            return { status: status.value, value: result };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base2) => {
              if (!isValid$1(base2))
                return base2;
              return Promise.resolve(effect.transform(base2.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
            });
          }
        }
        util.assertNever(effect);
      }
    }
    ZodEffects.create = (schema, effect, params) => {
      return new ZodEffects({
        schema,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect,
        ...processCreateParams(params)
      });
    };
    ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
      return new ZodEffects({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        ...processCreateParams(params)
      });
    };
    class ZodOptional extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.undefined) {
          return OK(void 0);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    }
    ZodOptional.create = (type, params) => {
      return new ZodOptional({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodOptional,
        ...processCreateParams(params)
      });
    };
    class ZodNullable extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === ZodParsedType.null) {
          return OK(null);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    }
    ZodNullable.create = (type, params) => {
      return new ZodNullable({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodNullable,
        ...processCreateParams(params)
      });
    };
    class ZodDefault extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === ZodParsedType.undefined) {
          data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    }
    ZodDefault.create = (type, params) => {
      return new ZodDefault({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : () => params.default,
        ...processCreateParams(params)
      });
    };
    class ZodCatch extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        };
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        });
        if (isAsync(result)) {
          return result.then((result2) => {
            return {
              status: "valid",
              value: result2.status === "valid" ? result2.value : this._def.catchValue({
                get error() {
                  return new ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          });
        } else {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        }
      }
      removeCatch() {
        return this._def.innerType;
      }
    }
    ZodCatch.create = (type, params) => {
      return new ZodCatch({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams(params)
      });
    };
    class ZodNaN extends ZodType {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== ZodParsedType.nan) {
          const ctx = this._getOrReturnCtx(input);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: ZodParsedType.nan,
            received: ctx.parsedType
          });
          return INVALID;
        }
        return { status: "valid", value: input.data };
      }
    }
    ZodNaN.create = (params) => {
      return new ZodNaN({
        typeName: ZodFirstPartyTypeKind.ZodNaN,
        ...processCreateParams(params)
      });
    };
    const BRAND = Symbol("zod_brand");
    class ZodBranded extends ZodType {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    }
    class ZodPipeline extends ZodType {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
          const handleAsync = async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return DIRTY(inResult.value);
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          };
          return handleAsync();
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return {
              status: "dirty",
              value: inResult.value
            };
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }
      }
      static create(a, b) {
        return new ZodPipeline({
          in: a,
          out: b,
          typeName: ZodFirstPartyTypeKind.ZodPipeline
        });
      }
    }
    class ZodReadonly extends ZodType {
      _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data) => {
          if (isValid$1(data)) {
            data.value = Object.freeze(data.value);
          }
          return data;
        };
        return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
      }
      unwrap() {
        return this._def.innerType;
      }
    }
    ZodReadonly.create = (type, params) => {
      return new ZodReadonly({
        innerType: type,
        typeName: ZodFirstPartyTypeKind.ZodReadonly,
        ...processCreateParams(params)
      });
    };
    function custom(check, params = {}, fatal) {
      if (check)
        return ZodAny.create().superRefine((data, ctx) => {
          var _a2, _b;
          if (!check(data)) {
            const p2 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
            const _fatal = (_b = (_a2 = p2.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b !== void 0 ? _b : true;
            const p22 = typeof p2 === "string" ? { message: p2 } : p2;
            ctx.addIssue({ code: "custom", ...p22, fatal: _fatal });
          }
        });
      return ZodAny.create();
    }
    const late = {
      object: ZodObject.lazycreate
    };
    var ZodFirstPartyTypeKind;
    (function(ZodFirstPartyTypeKind2) {
      ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
    })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
    const instanceOfType = (cls, params = {
      message: `Input not instance of ${cls.name}`
    }) => custom((data) => data instanceof cls, params);
    const stringType = ZodString.create;
    const numberType = ZodNumber.create;
    const nanType = ZodNaN.create;
    const bigIntType = ZodBigInt.create;
    const booleanType = ZodBoolean.create;
    const dateType = ZodDate.create;
    const symbolType = ZodSymbol.create;
    const undefinedType = ZodUndefined.create;
    const nullType = ZodNull.create;
    const anyType = ZodAny.create;
    const unknownType = ZodUnknown.create;
    const neverType = ZodNever.create;
    const voidType = ZodVoid.create;
    const arrayType = ZodArray.create;
    const objectType = ZodObject.create;
    const strictObjectType = ZodObject.strictCreate;
    const unionType = ZodUnion.create;
    const discriminatedUnionType = ZodDiscriminatedUnion.create;
    const intersectionType = ZodIntersection.create;
    const tupleType = ZodTuple.create;
    const recordType = ZodRecord.create;
    const mapType = ZodMap.create;
    const setType = ZodSet.create;
    const functionType = ZodFunction.create;
    const lazyType = ZodLazy.create;
    const literalType = ZodLiteral.create;
    const enumType = ZodEnum.create;
    const nativeEnumType = ZodNativeEnum.create;
    const promiseType = ZodPromise.create;
    const effectsType = ZodEffects.create;
    const optionalType = ZodOptional.create;
    const nullableType = ZodNullable.create;
    const preprocessType = ZodEffects.createWithPreprocess;
    const pipelineType = ZodPipeline.create;
    const ostring = () => stringType().optional();
    const onumber = () => numberType().optional();
    const oboolean = () => booleanType().optional();
    const coerce = {
      string: (arg) => ZodString.create({ ...arg, coerce: true }),
      number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
      boolean: (arg) => ZodBoolean.create({
        ...arg,
        coerce: true
      }),
      bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
      date: (arg) => ZodDate.create({ ...arg, coerce: true })
    };
    const NEVER = INVALID;
    var z = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      defaultErrorMap: errorMap,
      setErrorMap,
      getErrorMap,
      makeIssue,
      EMPTY_PATH,
      addIssueToContext,
      ParseStatus,
      INVALID,
      DIRTY,
      OK,
      isAborted,
      isDirty,
      isValid: isValid$1,
      isAsync,
      get util() {
        return util;
      },
      get objectUtil() {
        return objectUtil;
      },
      ZodParsedType,
      getParsedType,
      ZodType,
      datetimeRegex,
      ZodString,
      ZodNumber,
      ZodBigInt,
      ZodBoolean,
      ZodDate,
      ZodSymbol,
      ZodUndefined,
      ZodNull,
      ZodAny,
      ZodUnknown,
      ZodNever,
      ZodVoid,
      ZodArray,
      ZodObject,
      ZodUnion,
      ZodDiscriminatedUnion,
      ZodIntersection,
      ZodTuple,
      ZodRecord,
      ZodMap,
      ZodSet,
      ZodFunction,
      ZodLazy,
      ZodLiteral,
      ZodEnum,
      ZodNativeEnum,
      ZodPromise,
      ZodEffects,
      ZodTransformer: ZodEffects,
      ZodOptional,
      ZodNullable,
      ZodDefault,
      ZodCatch,
      ZodNaN,
      BRAND,
      ZodBranded,
      ZodPipeline,
      ZodReadonly,
      custom,
      Schema: ZodType,
      ZodSchema: ZodType,
      late,
      get ZodFirstPartyTypeKind() {
        return ZodFirstPartyTypeKind;
      },
      coerce,
      any: anyType,
      array: arrayType,
      bigint: bigIntType,
      boolean: booleanType,
      date: dateType,
      discriminatedUnion: discriminatedUnionType,
      effect: effectsType,
      "enum": enumType,
      "function": functionType,
      "instanceof": instanceOfType,
      intersection: intersectionType,
      lazy: lazyType,
      literal: literalType,
      map: mapType,
      nan: nanType,
      nativeEnum: nativeEnumType,
      never: neverType,
      "null": nullType,
      nullable: nullableType,
      number: numberType,
      object: objectType,
      oboolean,
      onumber,
      optional: optionalType,
      ostring,
      pipeline: pipelineType,
      preprocess: preprocessType,
      promise: promiseType,
      record: recordType,
      set: setType,
      strictObject: strictObjectType,
      string: stringType,
      symbol: symbolType,
      transformer: effectsType,
      tuple: tupleType,
      "undefined": undefinedType,
      union: unionType,
      unknown: unknownType,
      "void": voidType,
      NEVER,
      ZodIssueCode,
      quotelessJson,
      ZodError
    });
    const errorFormatter = (error) => {
      if (error.message) {
        return error.message;
      }
      return "unspecified error";
    };
    class Web3ValidatorError extends BaseWeb3Error {
      constructor(errors) {
        super();
        this.code = ERR_VALIDATION;
        this.errors = errors;
        super.message = `Web3 validator found ${errors.length} error[s]:
${this._compileErrors().join("\n")}`;
      }
      _compileErrors() {
        return this.errors.map(errorFormatter);
      }
    }
    const VALID_ETH_BASE_TYPES = ["bool", "int", "uint", "bytes", "string", "address", "tuple"];
    const isAbiParameterSchema = (schema) => typeof schema === "object" && "type" in schema && "name" in schema;
    const isString = (value) => typeof value === "string";
    const isHexStrict$1 = (hex) => typeof hex === "string" && /^((-)?0x[0-9a-f]+|(0x))$/i.test(hex);
    function isHexString(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/))
        return false;
      return true;
    }
    const isHex$1 = (hex) => typeof hex === "number" || typeof hex === "bigint" || typeof hex === "string" && /^((-0x|0x|-)?[0-9a-f]+|(0x))$/i.test(hex);
    function isHexPrefixed$1(str) {
      if (typeof str !== "string") {
        throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);
      }
      return str.startsWith("0x");
    }
    const validateNoLeadingZeroes = function(values) {
      for (const [k2, v2] of Object.entries(values)) {
        if (v2 !== void 0 && v2.length > 0 && v2[0] === 0) {
          throw new Error(`${k2} cannot have leading zeroes, received: ${v2.toString()}`);
        }
      }
    };
    const extraTypes = ["hex", "number", "blockNumber", "blockNumberOrTag", "filter", "bloom"];
    const parseBaseType$1 = (type) => {
      let strippedType = type.replace(/ /, "");
      let baseTypeSize;
      let isArray = false;
      let arraySizes = [];
      if (type.includes("[")) {
        strippedType = strippedType.slice(0, strippedType.indexOf("["));
        arraySizes = [...type.matchAll(/(?:\[(\d*)\])/g)].map((match) => parseInt(match[1], 10)).map((size) => Number.isNaN(size) ? -1 : size);
        isArray = arraySizes.length > 0;
      }
      if (VALID_ETH_BASE_TYPES.includes(strippedType)) {
        return { baseType: strippedType, isArray, baseTypeSize, arraySizes };
      }
      if (strippedType.startsWith("int")) {
        baseTypeSize = parseInt(strippedType.substring(3), 10);
        strippedType = "int";
      } else if (strippedType.startsWith("uint")) {
        baseTypeSize = parseInt(type.substring(4), 10);
        strippedType = "uint";
      } else if (strippedType.startsWith("bytes")) {
        baseTypeSize = parseInt(strippedType.substring(5), 10);
        strippedType = "bytes";
      } else {
        return { baseType: void 0, isArray: false, baseTypeSize: void 0, arraySizes };
      }
      return { baseType: strippedType, isArray, baseTypeSize, arraySizes };
    };
    const convertEthType = (type, parentSchema = {}) => {
      const typePropertyPresent = Object.keys(parentSchema).includes("type");
      if (typePropertyPresent) {
        throw new Web3ValidatorError([
          {
            keyword: "eth",
            message: 'Either "eth" or "type" can be presented in schema',
            params: { eth: type },
            instancePath: "",
            schemaPath: ""
          }
        ]);
      }
      const { baseType, baseTypeSize } = parseBaseType$1(type);
      if (!baseType && !extraTypes.includes(type)) {
        throw new Web3ValidatorError([
          {
            keyword: "eth",
            message: `Eth data type "${type}" is not valid`,
            params: { eth: type },
            instancePath: "",
            schemaPath: ""
          }
        ]);
      }
      if (baseType) {
        if (baseType === "tuple") {
          throw new Error('"tuple" type is not implemented directly.');
        }
        return { format: `${baseType}${baseTypeSize !== null && baseTypeSize !== void 0 ? baseTypeSize : ""}`, required: true };
      }
      if (type) {
        return { format: type, required: true };
      }
      return {};
    };
    const abiSchemaToJsonSchema = (abis, level = "/0") => {
      const schema = {
        type: "array",
        items: [],
        maxItems: abis.length,
        minItems: abis.length
      };
      for (const [index, abi2] of abis.entries()) {
        let abiType;
        let abiName;
        let abiComponents = [];
        if (isAbiParameterSchema(abi2)) {
          abiType = abi2.type;
          abiName = abi2.name || `${level}/${index}`;
          abiComponents = abi2.components;
        } else if (typeof abi2 === "string") {
          abiType = abi2;
          abiName = `${level}/${index}`;
        } else if (Array.isArray(abi2)) {
          if (abi2[0] && typeof abi2[0] === "string" && abi2[0].startsWith("tuple") && !Array.isArray(abi2[0]) && abi2[1] && Array.isArray(abi2[1])) {
            abiType = abi2[0];
            abiName = `${level}/${index}`;
            abiComponents = abi2[1];
          } else {
            abiType = "tuple";
            abiName = `${level}/${index}`;
            abiComponents = abi2;
          }
        }
        const { baseType, isArray, arraySizes } = parseBaseType$1(abiType);
        let childSchema;
        let lastSchema = schema;
        for (let i = arraySizes.length - 1; i > 0; i -= 1) {
          childSchema = {
            type: "array",
            $id: abiName,
            items: [],
            maxItems: arraySizes[i],
            minItems: arraySizes[i]
          };
          if (arraySizes[i] < 0) {
            delete childSchema.maxItems;
            delete childSchema.minItems;
          }
          if (!Array.isArray(lastSchema.items)) {
            lastSchema.items = [lastSchema.items, childSchema];
          } else if (lastSchema.items.length === 0) {
            lastSchema.items = [childSchema];
          } else {
            lastSchema.items.push(childSchema);
          }
          lastSchema = childSchema;
        }
        if (baseType === "tuple" && !isArray) {
          const nestedTuple = abiSchemaToJsonSchema(abiComponents, abiName);
          nestedTuple.$id = abiName;
          lastSchema.items.push(nestedTuple);
        } else if (baseType === "tuple" && isArray) {
          const arraySize = arraySizes[0];
          const item = Object.assign({ type: "array", $id: abiName, items: abiSchemaToJsonSchema(abiComponents, abiName) }, arraySize >= 0 && { minItems: arraySize, maxItems: arraySize });
          lastSchema.items.push(item);
        } else if (isArray) {
          const arraySize = arraySizes[0];
          const item = Object.assign({ type: "array", $id: abiName, items: convertEthType(abiType) }, arraySize >= 0 && { minItems: arraySize, maxItems: arraySize });
          lastSchema.items.push(item);
        } else if (Array.isArray(lastSchema.items)) {
          lastSchema.items.push(Object.assign({ $id: abiName }, convertEthType(abiType)));
        } else {
          lastSchema.items.push(Object.assign({ $id: abiName }, convertEthType(abiType)));
        }
        lastSchema = schema;
      }
      return schema;
    };
    const ethAbiToJsonSchema = (abis) => abiSchemaToJsonSchema(abis);
    const fetchArrayElement = (data, level) => {
      if (level === 1) {
        return data;
      }
      return fetchArrayElement(data[0], level - 1);
    };
    const transformJsonDataToAbiFormat = (abis, data, transformedData) => {
      const newData = [];
      for (const [index, abi2] of abis.entries()) {
        let abiType;
        let abiName;
        let abiComponents = [];
        if (isAbiParameterSchema(abi2)) {
          abiType = abi2.type;
          abiName = abi2.name;
          abiComponents = abi2.components;
        } else if (typeof abi2 === "string") {
          abiType = abi2;
        } else if (Array.isArray(abi2)) {
          if (abi2[1] && Array.isArray(abi2[1])) {
            abiType = abi2[0];
            abiComponents = abi2[1];
          } else {
            abiType = "tuple";
            abiComponents = abi2;
          }
        }
        const { baseType, isArray, arraySizes } = parseBaseType$1(abiType);
        const dataItem = Array.isArray(data) ? data[index] : data[abiName];
        if (baseType === "tuple" && !isArray) {
          newData.push(transformJsonDataToAbiFormat(abiComponents, dataItem, transformedData));
        } else if (baseType === "tuple" && isArray) {
          const tupleData = [];
          for (const tupleItem of dataItem) {
            if (arraySizes.length > 1) {
              const nestedItems = fetchArrayElement(tupleItem, arraySizes.length - 1);
              const nestedData = [];
              for (const nestedItem of nestedItems) {
                nestedData.push(transformJsonDataToAbiFormat(abiComponents, nestedItem, transformedData));
              }
              tupleData.push(nestedData);
            } else {
              tupleData.push(transformJsonDataToAbiFormat(abiComponents, tupleItem, transformedData));
            }
          }
          newData.push(tupleData);
        } else {
          newData.push(dataItem);
        }
      }
      transformedData = transformedData !== null && transformedData !== void 0 ? transformedData : [];
      transformedData.push(...newData);
      return transformedData;
    };
    const codePointToInt = (codePoint) => {
      if (codePoint >= 48 && codePoint <= 57) {
        return codePoint - 48;
      }
      if (codePoint >= 65 && codePoint <= 70) {
        return codePoint - 55;
      }
      if (codePoint >= 97 && codePoint <= 102) {
        return codePoint - 87;
      }
      throw new Error(`Invalid code point: ${codePoint}`);
    };
    const hexToNumber$2 = (value) => {
      if (!isHexStrict$1(value)) {
        throw new Error("Invalid hex string");
      }
      const [negative, hexValue] = value.startsWith("-") ? [true, value.slice(1)] : [false, value];
      const num = BigInt(hexValue);
      if (num > Number.MAX_SAFE_INTEGER) {
        return negative ? -num : num;
      }
      if (num < Number.MIN_SAFE_INTEGER) {
        return num;
      }
      return negative ? -1 * Number(num) : Number(num);
    };
    const numberToHex$2 = (value) => {
      if ((typeof value === "number" || typeof value === "bigint") && value < 0) {
        return `-0x${value.toString(16).slice(1)}`;
      }
      if ((typeof value === "number" || typeof value === "bigint") && value >= 0) {
        return `0x${value.toString(16)}`;
      }
      if (typeof value === "string" && isHexStrict$1(value)) {
        const [negative, hex] = value.startsWith("-") ? [true, value.slice(1)] : [false, value];
        const hexValue = hex.split(/^(-)?0(x|X)/).slice(-1)[0];
        return `${negative ? "-" : ""}0x${hexValue.replace(/^0+/, "").toLowerCase()}`;
      }
      if (typeof value === "string" && !isHexStrict$1(value)) {
        return numberToHex$2(BigInt(value));
      }
      throw new InvalidNumberError(value);
    };
    const padLeft$1 = (value, characterAmount, sign2 = "0") => {
      if (typeof value === "string" && !isHexStrict$1(value)) {
        return value.padStart(characterAmount, sign2);
      }
      const hex = typeof value === "string" && isHexStrict$1(value) ? value : numberToHex$2(value);
      const [prefix, hexValue] = hex.startsWith("-") ? ["-0x", hex.slice(3)] : ["0x", hex.slice(2)];
      return `${prefix}${hexValue.padStart(characterAmount, sign2)}`;
    };
    function uint8ArrayToHexString$1(uint8Array) {
      let hexString = "0x";
      for (const e of uint8Array) {
        const hex = e.toString(16);
        hexString += hex.length === 1 ? `0${hex}` : hex;
      }
      return hexString;
    }
    const charCodeMap = {
      zero: 48,
      nine: 57,
      A: 65,
      F: 70,
      a: 97,
      f: 102
    };
    function charCodeToBase16(char) {
      if (char >= charCodeMap.zero && char <= charCodeMap.nine)
        return char - charCodeMap.zero;
      if (char >= charCodeMap.A && char <= charCodeMap.F)
        return char - (charCodeMap.A - 10);
      if (char >= charCodeMap.a && char <= charCodeMap.f)
        return char - (charCodeMap.a - 10);
      return void 0;
    }
    function hexToUint8Array(hex) {
      let offset = 0;
      if (hex.startsWith("0") && (hex[1] === "x" || hex[1] === "X")) {
        offset = 2;
      }
      if (hex.length % 2 !== 0) {
        throw new InvalidBytesError(`hex string has odd length: ${hex}`);
      }
      const length = (hex.length - offset) / 2;
      const bytes2 = new Uint8Array(length);
      for (let index = 0, j = offset; index < length; index += 1) {
        const nibbleLeft = charCodeToBase16(hex.charCodeAt(j++));
        const nibbleRight = charCodeToBase16(hex.charCodeAt(j++));
        if (nibbleLeft === void 0 || nibbleRight === void 0) {
          throw new InvalidBytesError(`Invalid byte sequence ("${hex[j - 2]}${hex[j - 1]}" in "${hex}").`);
        }
        bytes2[index] = nibbleLeft * 16 + nibbleRight;
      }
      return bytes2;
    }
    function ensureIfUint8Array(data) {
      var _a2;
      if (!(data instanceof Uint8Array) && ((_a2 = data === null || data === void 0 ? void 0 : data.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) === "Uint8Array") {
        return Uint8Array.from(data);
      }
      return data;
    }
    const utils$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      abiSchemaToJsonSchema,
      codePointToInt,
      ensureIfUint8Array,
      ethAbiToJsonSchema,
      fetchArrayElement,
      hexToNumber: hexToNumber$2,
      hexToUint8Array,
      numberToHex: numberToHex$2,
      padLeft: padLeft$1,
      parseBaseType: parseBaseType$1,
      transformJsonDataToAbiFormat,
      uint8ArrayToHexString: uint8ArrayToHexString$1
    }, Symbol.toStringTag, { value: "Module" }));
    const isUint8Array$1 = (data) => {
      var _a2, _b;
      return data instanceof Uint8Array || ((_a2 = data === null || data === void 0 ? void 0 : data.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) === "Uint8Array" || ((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0 ? void 0 : _b.name) === "Buffer";
    };
    const isBytes$1 = (value, options = {
      abiType: "bytes"
    }) => {
      if (typeof value !== "string" && !Array.isArray(value) && !isUint8Array$1(value)) {
        return false;
      }
      if (typeof value === "string" && isHexStrict$1(value) && value.startsWith("-")) {
        return false;
      }
      if (typeof value === "string" && !isHexStrict$1(value)) {
        return false;
      }
      let valueToCheck;
      if (typeof value === "string") {
        if (value.length % 2 !== 0) {
          return false;
        }
        valueToCheck = hexToUint8Array(value);
      } else if (Array.isArray(value)) {
        if (value.some((d) => d < 0 || d > 255 || !Number.isInteger(d))) {
          return false;
        }
        valueToCheck = new Uint8Array(value);
      } else {
        valueToCheck = value;
      }
      if (options === null || options === void 0 ? void 0 : options.abiType) {
        const { baseTypeSize } = parseBaseType$1(options.abiType);
        return baseTypeSize ? valueToCheck.length === baseTypeSize : true;
      }
      if (options === null || options === void 0 ? void 0 : options.size) {
        return valueToCheck.length === (options === null || options === void 0 ? void 0 : options.size);
      }
      return true;
    };
    const checkAddressCheckSum$1 = (data) => {
      if (!/^(0x)?[0-9a-f]{40}$/i.test(data))
        return false;
      const address = data.slice(2);
      const updatedData = utf8ToBytes$3(address.toLowerCase());
      const addressHash = uint8ArrayToHexString$1(keccak256(ensureIfUint8Array(updatedData))).slice(2);
      for (let i = 0; i < 40; i += 1) {
        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {
          return false;
        }
      }
      return true;
    };
    const isAddress$1 = (value, checkChecksum = true) => {
      if (typeof value !== "string" && !isUint8Array$1(value)) {
        return false;
      }
      let valueToCheck;
      if (isUint8Array$1(value)) {
        valueToCheck = uint8ArrayToHexString$1(value);
      } else if (typeof value === "string" && !isHexStrict$1(value)) {
        valueToCheck = value.toLowerCase().startsWith("0x") ? value : `0x${value}`;
      } else {
        valueToCheck = value;
      }
      if (!/^(0x)?[0-9a-f]{40}$/i.test(valueToCheck)) {
        return false;
      }
      if (/^(0x|0X)?[0-9a-f]{40}$/.test(valueToCheck) || /^(0x|0X)?[0-9A-F]{40}$/.test(valueToCheck)) {
        return true;
      }
      return checkChecksum ? checkAddressCheckSum$1(valueToCheck) : true;
    };
    const bigintPower = (base2, expo) => {
      if (expo === BigInt(0)) {
        return BigInt(1);
      }
      let res = base2;
      for (let index = 1; index < expo; index += 1) {
        res *= base2;
      }
      return res;
    };
    const isUInt = (value, options = {
      abiType: "uint"
    }) => {
      if (!["number", "string", "bigint"].includes(typeof value) || typeof value === "string" && value.length === 0) {
        return false;
      }
      let size;
      if (options === null || options === void 0 ? void 0 : options.abiType) {
        const { baseTypeSize } = parseBaseType$1(options.abiType);
        if (baseTypeSize) {
          size = baseTypeSize;
        }
      } else if (options.bitSize) {
        size = options.bitSize;
      }
      const maxSize = bigintPower(BigInt(2), BigInt(size !== null && size !== void 0 ? size : 256)) - BigInt(1);
      try {
        const valueToCheck = typeof value === "string" && isHexStrict$1(value) ? BigInt(hexToNumber$2(value)) : BigInt(value);
        return valueToCheck >= 0 && valueToCheck <= maxSize;
      } catch (error) {
        return false;
      }
    };
    const isInt = (value, options = {
      abiType: "int"
    }) => {
      if (!["number", "string", "bigint"].includes(typeof value)) {
        return false;
      }
      if (typeof value === "number" && value > Number.MAX_SAFE_INTEGER) {
        return false;
      }
      let size;
      if (options === null || options === void 0 ? void 0 : options.abiType) {
        const { baseTypeSize, baseType } = parseBaseType$1(options.abiType);
        if (baseType !== "int") {
          return false;
        }
        if (baseTypeSize) {
          size = baseTypeSize;
        }
      } else if (options.bitSize) {
        size = options.bitSize;
      }
      const maxSize = bigintPower(BigInt(2), BigInt((size !== null && size !== void 0 ? size : 256) - 1));
      const minSize = BigInt(-1) * bigintPower(BigInt(2), BigInt((size !== null && size !== void 0 ? size : 256) - 1));
      try {
        const valueToCheck = typeof value === "string" && isHexStrict$1(value) ? BigInt(hexToNumber$2(value)) : BigInt(value);
        return valueToCheck >= minSize && valueToCheck <= maxSize;
      } catch (error) {
        return false;
      }
    };
    const isNumber = (value) => {
      if (isInt(value)) {
        return true;
      }
      if (typeof value === "string" && /[0-9.]/.test(value) && value.indexOf(".") === value.lastIndexOf(".")) {
        return true;
      }
      if (typeof value === "number") {
        return true;
      }
      return false;
    };
    const isBlockNumber = (value) => isUInt(value);
    const isBlockTag = (value) => Object.values(BlockTags).includes(value);
    const isBlockNumberOrTag = (value) => isBlockTag(value) || isBlockNumber(value);
    const isBloom$1 = (bloom) => {
      if (typeof bloom !== "string") {
        return false;
      }
      if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
        return false;
      }
      if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
        return true;
      }
      return false;
    };
    const isInBloom$1 = (bloom, value) => {
      if (typeof value === "string" && !isHexStrict$1(value)) {
        return false;
      }
      if (!isBloom$1(bloom)) {
        return false;
      }
      const uint8Array = typeof value === "string" ? hexToUint8Array(value) : value;
      const hash2 = uint8ArrayToHexString$1(keccak256(uint8Array)).slice(2);
      for (let i = 0; i < 12; i += 4) {
        const bitpos = (
          // eslint-disable-next-line no-bitwise
          (parseInt(hash2.slice(i, i + 2), 16) << 8) + parseInt(hash2.slice(i + 2, i + 4), 16) & 2047
        );
        const code = codePointToInt(bloom.charCodeAt(bloom.length - 1 - Math.floor(bitpos / 4)));
        const offset = 1 << bitpos % 4;
        if ((code & offset) !== offset) {
          return false;
        }
      }
      return true;
    };
    const isUserEthereumAddressInBloom$1 = (bloom, ethereumAddress) => {
      if (!isBloom$1(bloom)) {
        return false;
      }
      if (!isAddress$1(ethereumAddress)) {
        return false;
      }
      const address = padLeft$1(ethereumAddress, 64);
      return isInBloom$1(bloom, address);
    };
    const isContractAddressInBloom$1 = (bloom, contractAddress) => {
      if (!isBloom$1(bloom)) {
        return false;
      }
      if (!isAddress$1(contractAddress)) {
        return false;
      }
      return isInBloom$1(bloom, contractAddress);
    };
    const isBoolean = (value) => {
      if (!["number", "string", "boolean"].includes(typeof value)) {
        return false;
      }
      if (typeof value === "boolean") {
        return true;
      }
      if (typeof value === "string" && !isHexStrict$1(value)) {
        return value === "1" || value === "0";
      }
      if (typeof value === "string" && isHexStrict$1(value)) {
        return value === "0x1" || value === "0x0";
      }
      return value === 1 || value === 0;
    };
    const isNullish$1 = (item) => (
      // Using "null" value intentionally for validation
      // eslint-disable-next-line no-null/no-null
      item === void 0 || item === null
    );
    const isObject = (item) => typeof item === "object" && !isNullish$1(item) && !Array.isArray(item) && !(item instanceof TypedArray);
    const isTopic$1 = (topic) => {
      if (typeof topic !== "string") {
        return false;
      }
      if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
        return false;
      }
      if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
        return true;
      }
      return false;
    };
    const isTopicInBloom$1 = (bloom, topic) => {
      if (!isBloom$1(bloom)) {
        return false;
      }
      if (!isTopic$1(topic)) {
        return false;
      }
      return isInBloom$1(bloom, topic);
    };
    const isFilterObject = (value) => {
      const expectedFilterProperties = [
        "fromBlock",
        "toBlock",
        "address",
        "topics",
        "blockHash"
      ];
      if (isNullish$1(value) || typeof value !== "object")
        return false;
      if (!Object.keys(value).every((property) => expectedFilterProperties.includes(property)))
        return false;
      if (!isNullish$1(value.fromBlock) && !isBlockNumberOrTag(value.fromBlock) || !isNullish$1(value.toBlock) && !isBlockNumberOrTag(value.toBlock))
        return false;
      if (!isNullish$1(value.address)) {
        if (Array.isArray(value.address)) {
          if (!value.address.every((address) => isAddress$1(address)))
            return false;
        } else if (!isAddress$1(value.address))
          return false;
      }
      if (!isNullish$1(value.topics)) {
        if (!value.topics.every((topic) => {
          if (isNullish$1(topic))
            return true;
          if (Array.isArray(topic)) {
            return topic.every((nestedTopic) => isTopic$1(nestedTopic));
          }
          if (isTopic$1(topic))
            return true;
          return false;
        }))
          return false;
      }
      return true;
    };
    const formats = {
      address: (data) => isAddress$1(data),
      bloom: (data) => isBloom$1(data),
      blockNumber: (data) => isBlockNumber(data),
      blockTag: (data) => isBlockTag(data),
      blockNumberOrTag: (data) => isBlockNumberOrTag(data),
      bool: (data) => isBoolean(data),
      bytes: (data) => isBytes$1(data),
      filter: (data) => isFilterObject(data),
      hex: (data) => isHexStrict$1(data),
      uint: (data) => isUInt(data),
      int: (data) => isInt(data),
      number: (data) => isNumber(data),
      string: (data) => isString(data)
    };
    for (let bitSize = 8; bitSize <= 256; bitSize += 8) {
      formats[`int${bitSize}`] = (data) => isInt(data, { bitSize });
      formats[`uint${bitSize}`] = (data) => isUInt(data, { bitSize });
    }
    for (let size = 1; size <= 32; size += 1) {
      formats[`bytes${size}`] = (data) => isBytes$1(data, { size });
    }
    formats.bytes256 = formats.bytes;
    const convertToZod = (schema) => {
      if ((!(schema === null || schema === void 0 ? void 0 : schema.type) || (schema === null || schema === void 0 ? void 0 : schema.type) === "object") && (schema === null || schema === void 0 ? void 0 : schema.properties)) {
        const obj = {};
        for (const name2 of Object.keys(schema.properties)) {
          const zItem = convertToZod(schema.properties[name2]);
          if (zItem) {
            obj[name2] = zItem;
          }
        }
        if (Array.isArray(schema.required)) {
          return z.object(obj).partial().required(schema.required.reduce((acc, v2) => Object.assign(Object.assign({}, acc), { [v2]: true }), {}));
        }
        return z.object(obj).partial();
      }
      if ((schema === null || schema === void 0 ? void 0 : schema.type) === "array" && (schema === null || schema === void 0 ? void 0 : schema.items)) {
        if (Array.isArray(schema.items) && schema.items.length > 1 && schema.maxItems !== void 0 && new Set(schema.items.map((item) => item.$id)).size === schema.items.length) {
          const arr = [];
          for (const item of schema.items) {
            const zItem = convertToZod(item);
            if (zItem) {
              arr.push(zItem);
            }
          }
          return z.tuple(arr);
        }
        const nextSchema = Array.isArray(schema.items) ? schema.items[0] : schema.items;
        let zodArraySchema = z.array(convertToZod(nextSchema));
        zodArraySchema = schema.minItems !== void 0 ? zodArraySchema.min(schema.minItems) : zodArraySchema;
        zodArraySchema = schema.maxItems !== void 0 ? zodArraySchema.max(schema.maxItems) : zodArraySchema;
        return zodArraySchema;
      }
      if (schema.oneOf && Array.isArray(schema.oneOf)) {
        return z.union(schema.oneOf.map((oneOfSchema) => convertToZod(oneOfSchema)));
      }
      if (schema === null || schema === void 0 ? void 0 : schema.format) {
        if (!formats[schema.format]) {
          throw new SchemaFormatError(schema.format);
        }
        return z.any().refine(formats[schema.format], (value) => ({
          params: { value, format: schema.format }
        }));
      }
      if ((schema === null || schema === void 0 ? void 0 : schema.type) && (schema === null || schema === void 0 ? void 0 : schema.type) !== "object" && typeof z[String(schema.type)] === "function") {
        return z[String(schema.type)]();
      }
      return z.object({ data: z.any() }).partial();
    };
    class Validator {
      // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function
      static factory() {
        if (!Validator.validatorInstance) {
          Validator.validatorInstance = new Validator();
        }
        return Validator.validatorInstance;
      }
      validate(schema, data, options) {
        var _a2, _b;
        const zod = convertToZod(schema);
        const result = zod.safeParse(data);
        if (!result.success) {
          const errors = this.convertErrors((_b = (_a2 = result.error) === null || _a2 === void 0 ? void 0 : _a2.issues) !== null && _b !== void 0 ? _b : []);
          if (errors) {
            if (options === null || options === void 0 ? void 0 : options.silent) {
              return errors;
            }
            throw new Web3ValidatorError(errors);
          }
        }
        return void 0;
      }
      // eslint-disable-next-line class-methods-use-this
      convertErrors(errors) {
        if (errors && Array.isArray(errors) && errors.length > 0) {
          return errors.map((error) => {
            var _a2;
            let message;
            let keyword;
            let params;
            let schemaPath;
            schemaPath = error.path.join("/");
            const field = String(error.path[error.path.length - 1]);
            const instancePath = error.path.join("/");
            if (error.code === ZodIssueCode.too_big) {
              keyword = "maxItems";
              schemaPath = `${instancePath}/maxItems`;
              params = { limit: error.maximum };
              message = `must NOT have more than ${error.maximum} items`;
            } else if (error.code === ZodIssueCode.too_small) {
              keyword = "minItems";
              schemaPath = `${instancePath}/minItems`;
              params = { limit: error.minimum };
              message = `must NOT have fewer than ${error.minimum} items`;
            } else if (error.code === ZodIssueCode.custom) {
              const { value, format: format2 } = (_a2 = error.params) !== null && _a2 !== void 0 ? _a2 : {};
              if (typeof value === "undefined") {
                message = `value at "/${schemaPath}" is required`;
              } else {
                message = `value "${// eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                typeof value === "object" ? JSON.stringify(value) : value}" at "/${schemaPath}" must pass "${format2}" validation`;
              }
              params = { value };
            }
            return {
              keyword: keyword !== null && keyword !== void 0 ? keyword : field,
              instancePath: instancePath ? `/${instancePath}` : "",
              schemaPath: schemaPath ? `#${schemaPath}` : "#",
              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
              params: params !== null && params !== void 0 ? params : { value: error.message },
              message: message !== null && message !== void 0 ? message : error.message
            };
          });
        }
        return void 0;
      }
    }
    class Web3Validator {
      constructor() {
        this._validator = Validator.factory();
      }
      validateJSONSchema(schema, data, options) {
        return this._validator.validate(schema, data, options);
      }
      validate(schema, data, options = { silent: false }) {
        var _a2, _b;
        const jsonSchema = ethAbiToJsonSchema(schema);
        if (Array.isArray(jsonSchema.items) && ((_a2 = jsonSchema.items) === null || _a2 === void 0 ? void 0 : _a2.length) === 0 && data.length === 0) {
          return void 0;
        }
        if (Array.isArray(jsonSchema.items) && ((_b = jsonSchema.items) === null || _b === void 0 ? void 0 : _b.length) === 0 && data.length !== 0) {
          throw new Web3ValidatorError([
            {
              instancePath: "/0",
              schemaPath: "/",
              keyword: "required",
              message: "empty schema against data can not be validated",
              params: data
            }
          ]);
        }
        return this._validator.validate(jsonSchema, data, options);
      }
    }
    const validator = new Web3Validator();
    function isUint8Array(data) {
      var _a2, _b;
      return data instanceof Uint8Array || ((_a2 = data === null || data === void 0 ? void 0 : data.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) === "Uint8Array" || ((_b = data === null || data === void 0 ? void 0 : data.constructor) === null || _b === void 0 ? void 0 : _b.name) === "Buffer";
    }
    function uint8ArrayConcat(...parts) {
      const length = parts.reduce((prev, part) => {
        const agg = prev + part.length;
        return agg;
      }, 0);
      const result = new Uint8Array(length);
      let offset = 0;
      for (const part of parts) {
        result.set(part, offset);
        offset += part.length;
      }
      return result;
    }
    function uint8ArrayEquals(a, b) {
      if (a === b) {
        return true;
      }
      if (a.byteLength !== b.byteLength) {
        return false;
      }
      for (let i = 0; i < a.byteLength; i += 1) {
        if (a[i] !== b[i]) {
          return false;
        }
      }
      return true;
    }
    const ethUnitMap = {
      noether: BigInt(0),
      wei: BigInt(1),
      kwei: BigInt(1e3),
      Kwei: BigInt(1e3),
      babbage: BigInt(1e3),
      femtoether: BigInt(1e3),
      mwei: BigInt(1e6),
      Mwei: BigInt(1e6),
      lovelace: BigInt(1e6),
      picoether: BigInt(1e6),
      gwei: BigInt(1e9),
      Gwei: BigInt(1e9),
      shannon: BigInt(1e9),
      nanoether: BigInt(1e9),
      nano: BigInt(1e9),
      szabo: BigInt(1e12),
      microether: BigInt(1e12),
      micro: BigInt(1e12),
      finney: BigInt(1e15),
      milliether: BigInt(1e15),
      milli: BigInt(1e15),
      ether: BigInt("1000000000000000000"),
      kether: BigInt("1000000000000000000000"),
      grand: BigInt("1000000000000000000000"),
      mether: BigInt("1000000000000000000000000"),
      gether: BigInt("1000000000000000000000000000"),
      tether: BigInt("1000000000000000000000000000000")
    };
    const PrecisionLossWarning = "Warning: Using type `number` with values that are large or contain many decimals may cause loss of precision, it is recommended to use type `string` or `BigInt` when using conversion methods";
    const bytesToUint8Array = (data) => {
      validator.validate(["bytes"], [data]);
      if (isUint8Array(data)) {
        return data;
      }
      if (Array.isArray(data)) {
        return new Uint8Array(data);
      }
      if (typeof data === "string") {
        return hexToUint8Array(data);
      }
      throw new InvalidBytesError(data);
    };
    const { uint8ArrayToHexString } = utils$1;
    const bytesToHex$2 = (bytes2) => uint8ArrayToHexString(bytesToUint8Array(bytes2));
    const hexToBytes$2 = (bytes2) => {
      if (typeof bytes2 === "string" && bytes2.slice(0, 2).toLowerCase() !== "0x") {
        return bytesToUint8Array(`0x${bytes2}`);
      }
      return bytesToUint8Array(bytes2);
    };
    const hexToNumber$1 = (value) => {
      validator.validate(["hex"], [value]);
      return hexToNumber$2(value);
    };
    const toDecimal = hexToNumber$1;
    const numberToHex$1 = (value, hexstrict) => {
      if (typeof value !== "bigint")
        validator.validate(["int"], [value]);
      let updatedValue = numberToHex$2(value);
      if (hexstrict) {
        if (!updatedValue.startsWith("-") && updatedValue.length % 2 === 1) {
          updatedValue = "0x0".concat(updatedValue.slice(2));
        } else if (updatedValue.length % 2 === 0 && updatedValue.startsWith("-"))
          updatedValue = "-0x0".concat(updatedValue.slice(3));
      }
      return updatedValue;
    };
    const fromDecimal = numberToHex$1;
    const hexToNumberString = (data) => hexToNumber$1(data).toString();
    const utf8ToHex = (str) => {
      validator.validate(["string"], [str]);
      let strWithoutNullCharacter = str.replace(/^(?:\u0000)/, "");
      strWithoutNullCharacter = strWithoutNullCharacter.replace(/(?:\u0000)$/, "");
      return bytesToHex$2(new TextEncoder().encode(strWithoutNullCharacter));
    };
    const fromUtf8 = utf8ToHex;
    const stringToHex = utf8ToHex;
    const hexToUtf8 = (str) => bytesToUtf8(hexToBytes$2(str));
    const toUtf8 = (input) => {
      if (typeof input === "string") {
        return hexToUtf8(input);
      }
      validator.validate(["bytes"], [input]);
      return bytesToUtf8(input);
    };
    const utf8ToBytes$2 = utf8ToBytes$3;
    const hexToString = hexToUtf8;
    const asciiToHex = (str) => {
      validator.validate(["string"], [str]);
      let hexString = "";
      for (let i = 0; i < str.length; i += 1) {
        const hexCharCode = str.charCodeAt(i).toString(16);
        hexString += hexCharCode.length % 2 !== 0 ? `0${hexCharCode}` : hexCharCode;
      }
      return `0x${hexString}`;
    };
    const fromAscii = asciiToHex;
    const hexToAscii = (str) => {
      const decoder = new TextDecoder("ascii");
      return decoder.decode(hexToBytes$2(str));
    };
    const toAscii = hexToAscii;
    const toHex = (value, returnType) => {
      if (typeof value === "string" && isAddress$1(value)) {
        return returnType ? "address" : `0x${value.toLowerCase().replace(/^0x/i, "")}`;
      }
      if (typeof value === "boolean") {
        return returnType ? "bool" : value ? "0x01" : "0x00";
      }
      if (typeof value === "number") {
        return returnType ? value < 0 ? "int256" : "uint256" : numberToHex$1(value);
      }
      if (typeof value === "bigint") {
        return returnType ? "bigint" : numberToHex$1(value);
      }
      if (isUint8Array(value)) {
        return returnType ? "bytes" : bytesToHex$2(value);
      }
      if (typeof value === "object" && !!value) {
        return returnType ? "string" : utf8ToHex(JSON.stringify(value));
      }
      if (typeof value === "string") {
        if (value.startsWith("-0x") || value.startsWith("-0X")) {
          return returnType ? "int256" : numberToHex$1(value);
        }
        if (isHexStrict$1(value)) {
          return returnType ? "bytes" : value;
        }
        if (isHex$1(value) && !isInt(value) && !isUInt(value)) {
          return returnType ? "bytes" : `0x${value}`;
        }
        if (isHex$1(value) && !isInt(value) && isUInt(value)) {
          return returnType ? "uint" : numberToHex$1(value);
        }
        if (!Number.isFinite(value)) {
          return returnType ? "string" : utf8ToHex(value);
        }
      }
      throw new HexProcessingError(value);
    };
    const toNumber = (value) => {
      if (typeof value === "number") {
        if (value > 1e20) {
          console.warn(PrecisionLossWarning);
          return BigInt(value);
        }
        return value;
      }
      if (typeof value === "bigint") {
        return value >= Number.MIN_SAFE_INTEGER && value <= Number.MAX_SAFE_INTEGER ? Number(value) : value;
      }
      if (typeof value === "string" && isHexStrict$1(value)) {
        return hexToNumber$1(value);
      }
      try {
        return toNumber(BigInt(value));
      } catch (_a2) {
        throw new InvalidNumberError(value);
      }
    };
    const toBigInt = (value) => {
      if (typeof value === "number") {
        return BigInt(value);
      }
      if (typeof value === "bigint") {
        return value;
      }
      if (typeof value === "string" && isHex$1(value)) {
        if (value.startsWith("-")) {
          return -BigInt(value.substring(1));
        }
        return BigInt(value);
      }
      throw new InvalidNumberError(value);
    };
    const fromWei = (number2, unit) => {
      let denomination;
      if (typeof unit === "string") {
        denomination = ethUnitMap[unit];
        if (!denomination) {
          throw new InvalidUnitError(unit);
        }
      } else {
        if (unit < 0 || !Number.isInteger(unit)) {
          throw new InvalidIntegerError(unit);
        }
        denomination = bigintPower(BigInt(10), BigInt(unit));
      }
      const value = String(toNumber(number2));
      const numberOfZerosInDenomination = denomination.toString().length - 1;
      if (numberOfZerosInDenomination <= 0) {
        return value.toString();
      }
      const zeroPaddedValue = value.padStart(numberOfZerosInDenomination, "0");
      const integer = zeroPaddedValue.slice(0, -numberOfZerosInDenomination);
      const fraction = zeroPaddedValue.slice(-numberOfZerosInDenomination).replace(/\.?0+$/, "");
      if (integer === "") {
        return `0.${fraction}`;
      }
      if (fraction === "") {
        return integer;
      }
      const updatedValue = `${integer}.${fraction}`;
      return updatedValue.slice(0, integer.length + numberOfZerosInDenomination + 1);
    };
    const toWei = (number2, unit) => {
      validator.validate(["number"], [number2]);
      let denomination;
      if (typeof unit === "string") {
        denomination = ethUnitMap[unit];
        if (!denomination) {
          throw new InvalidUnitError(unit);
        }
      } else {
        if (unit < 0 || !Number.isInteger(unit)) {
          throw new InvalidIntegerError(unit);
        }
        denomination = bigintPower(BigInt(10), BigInt(unit));
      }
      let parsedNumber = number2;
      if (typeof parsedNumber === "number") {
        if (parsedNumber < 1e-15) {
          console.warn(PrecisionLossWarning);
        }
        if (parsedNumber > 1e20) {
          console.warn(PrecisionLossWarning);
          parsedNumber = BigInt(parsedNumber);
        } else {
          parsedNumber = parsedNumber.toLocaleString("fullwide", {
            useGrouping: false,
            maximumFractionDigits: 20
          });
        }
      }
      const [integer, fraction] = String(typeof parsedNumber === "string" && !isHexStrict$1(parsedNumber) ? parsedNumber : toNumber(parsedNumber)).split(".").concat("");
      const value = BigInt(`${integer}${fraction}`);
      const updatedValue = value * denomination;
      const decimals = fraction.length;
      if (decimals === 0) {
        return updatedValue.toString();
      }
      return updatedValue.toString().slice(0, -decimals);
    };
    const toChecksumAddress = (address) => {
      if (!isAddress$1(address, false)) {
        throw new InvalidAddressError(address);
      }
      const lowerCaseAddress = address.toLowerCase().replace(/^0x/i, "");
      const hash2 = uint8ArrayToHexString$1(keccak256(ensureIfUint8Array(utf8ToBytes$2(lowerCaseAddress))));
      if (isNullish$1(hash2) || hash2 === "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470")
        return "";
      let checksumAddress = "0x";
      const addressHash = hash2.replace(/^0x/i, "");
      for (let i = 0; i < lowerCaseAddress.length; i += 1) {
        if (parseInt(addressHash[i], 16) > 7) {
          checksumAddress += lowerCaseAddress[i].toUpperCase();
        } else {
          checksumAddress += lowerCaseAddress[i];
        }
      }
      return checksumAddress;
    };
    const toBool = (value) => {
      if (typeof value === "boolean") {
        return value;
      }
      if (typeof value === "number" && (value === 0 || value === 1)) {
        return Boolean(value);
      }
      if (typeof value === "bigint" && (value === BigInt(0) || value === BigInt(1))) {
        return Boolean(value);
      }
      if (typeof value === "string" && !isHexStrict$1(value) && (value === "1" || value === "0" || value === "false" || value === "true")) {
        if (value === "true") {
          return true;
        }
        if (value === "false") {
          return false;
        }
        return Boolean(Number(value));
      }
      if (typeof value === "string" && isHexStrict$1(value) && (value === "0x1" || value === "0x0")) {
        return Boolean(toNumber(value));
      }
      throw new InvalidBooleanError(value);
    };
    var eventemitter3 = { exports: {} };
    (function(module2) {
      var has = Object.prototype.hasOwnProperty, prefix = "~";
      function Events() {
      }
      if (Object.create) {
        Events.prototype = /* @__PURE__ */ Object.create(null);
        if (!new Events().__proto__) prefix = false;
      }
      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }
      function addListener(emitter, event, fn, context, once) {
        if (typeof fn !== "function") {
          throw new TypeError("The listener must be a function");
        }
        var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
        if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
        else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
        else emitter._events[evt] = [emitter._events[evt], listener];
        return emitter;
      }
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0) emitter._events = new Events();
        else delete emitter._events[evt];
      }
      function EventEmitter2() {
        this._events = new Events();
        this._eventsCount = 0;
      }
      EventEmitter2.prototype.eventNames = function eventNames() {
        var names = [], events, name2;
        if (this._eventsCount === 0) return names;
        for (name2 in events = this._events) {
          if (has.call(events, name2)) names.push(prefix ? name2.slice(1) : name2);
        }
        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events));
        }
        return names;
      };
      EventEmitter2.prototype.listeners = function listeners(event) {
        var evt = prefix ? prefix + event : event, handlers = this._events[evt];
        if (!handlers) return [];
        if (handlers.fn) return [handlers.fn];
        for (var i = 0, l2 = handlers.length, ee2 = new Array(l2); i < l2; i++) {
          ee2[i] = handlers[i].fn;
        }
        return ee2;
      };
      EventEmitter2.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix ? prefix + event : event, listeners = this._events[evt];
        if (!listeners) return 0;
        if (listeners.fn) return 1;
        return listeners.length;
      };
      EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt]) return false;
        var listeners = this._events[evt], len = arguments.length, args, i;
        if (listeners.fn) {
          if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }
          for (i = 1, args = new Array(len - 1); i < len; i++) {
            args[i - 1] = arguments[i];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length, j;
          for (i = 0; i < length; i++) {
            if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
            switch (len) {
              case 1:
                listeners[i].fn.call(listeners[i].context);
                break;
              case 2:
                listeners[i].fn.call(listeners[i].context, a1);
                break;
              case 3:
                listeners[i].fn.call(listeners[i].context, a1, a2);
                break;
              case 4:
                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                break;
              default:
                if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
                listeners[i].fn.apply(listeners[i].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter2.prototype.on = function on(event, fn, context) {
        return addListener(this, event, fn, context, false);
      };
      EventEmitter2.prototype.once = function once(event, fn, context) {
        return addListener(this, event, fn, context, true);
      };
      EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt]) return this;
        if (!fn) {
          clearEvent(this, evt);
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i = 0, events = [], length = listeners.length; i < length; i++) {
            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
              events.push(listeners[i]);
            }
          }
          if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
          else clearEvent(this, evt);
        }
        return this;
      };
      EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix ? prefix + event : event;
          if (this._events[evt]) clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
      EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
      EventEmitter2.prefixed = prefix;
      EventEmitter2.EventEmitter = EventEmitter2;
      {
        module2.exports = EventEmitter2;
      }
    })(eventemitter3);
    var eventemitter3Exports = eventemitter3.exports;
    const EventEmitter$1 = /* @__PURE__ */ getDefaultExportFromCjs(eventemitter3Exports);
    class EventEmitter extends EventEmitter$1 {
      constructor() {
        super(...arguments);
        this.maxListeners = Number.MAX_SAFE_INTEGER;
      }
      setMaxListeners(maxListeners) {
        this.maxListeners = maxListeners;
        return this;
      }
      getMaxListeners() {
        return this.maxListeners;
      }
    }
    const isHexStrict = isHexStrict$1;
    const isHex = isHex$1;
    const checkAddressCheckSum = checkAddressCheckSum$1;
    const isAddress = isAddress$1;
    const isBloom = isBloom$1;
    const isInBloom = isInBloom$1;
    const isUserEthereumAddressInBloom = isUserEthereumAddressInBloom$1;
    const isContractAddressInBloom = isContractAddressInBloom$1;
    const isTopic = isTopic$1;
    const isTopicInBloom = isTopicInBloom$1;
    const compareBlockNumbers = (blockA, blockB) => {
      const isABlockTag = typeof blockA === "string" && isBlockTag(blockA);
      const isBBlockTag = typeof blockB === "string" && isBlockTag(blockB);
      if (blockA === blockB || (blockA === "earliest" || blockA === 0) && (blockB === "earliest" || blockB === 0)) {
        return 0;
      }
      if (blockA === "earliest" && blockB > 0) {
        return -1;
      }
      if (blockB === "earliest" && blockA > 0) {
        return 1;
      }
      if (isABlockTag && isBBlockTag) {
        const tagsOrder = {
          [BlockTags.EARLIEST]: 1,
          [BlockTags.FINALIZED]: 2,
          [BlockTags.SAFE]: 3,
          [BlockTags.LATEST]: 4,
          [BlockTags.PENDING]: 5
        };
        if (tagsOrder[blockA] < tagsOrder[blockB]) {
          return -1;
        }
        return 1;
      }
      if (isABlockTag && !isBBlockTag || !isABlockTag && isBBlockTag) {
        throw new InvalidBlockError("Cannot compare blocktag with provided non-blocktag input.");
      }
      const bigIntA = BigInt(blockA);
      const bigIntB = BigInt(blockB);
      if (bigIntA < bigIntB) {
        return -1;
      }
      if (bigIntA === bigIntB) {
        return 0;
      }
      return 1;
    };
    const isContractInitOptions = (options) => typeof options === "object" && !isNullish$1(options) && Object.keys(options).length !== 0 && [
      "input",
      "data",
      "from",
      "gas",
      "gasPrice",
      "gasLimit",
      "address",
      "jsonInterface",
      "syncWithContext",
      "dataInputFill"
    ].some((key) => key in options);
    const isNullish = isNullish$1;
    const isIterable = (item) => typeof item === "object" && !isNullish$1(item) && !Array.isArray(item) && !(item instanceof TypedArray);
    const mergeDeep = (destination, ...sources) => {
      if (!isIterable(destination)) {
        return destination;
      }
      const result = Object.assign({}, destination);
      for (const src of sources) {
        for (const key in src) {
          if (isIterable(src[key])) {
            if (!result[key]) {
              result[key] = {};
            }
            result[key] = mergeDeep(result[key], src[key]);
          } else if (!isNullish$1(src[key]) && Object.hasOwnProperty.call(src, key)) {
            if (Array.isArray(src[key]) || src[key] instanceof TypedArray) {
              result[key] = src[key].slice(0);
            } else {
              result[key] = src[key];
            }
          }
        }
      }
      return result;
    };
    const padLeft = (value, characterAmount, sign2 = "0") => {
      if (typeof value === "string") {
        if (!isHexStrict$1(value)) {
          return value.padStart(characterAmount, sign2);
        }
        return padLeft$1(value, characterAmount, sign2);
      }
      validator.validate(["int"], [value]);
      return padLeft$1(value, characterAmount, sign2);
    };
    const padRight = (value, characterAmount, sign2 = "0") => {
      if (typeof value === "string" && !isHexStrict$1(value)) {
        return value.padEnd(characterAmount, sign2);
      }
      const hexString = typeof value === "string" && isHexStrict$1(value) ? value : numberToHex$1(value);
      const prefixLength = hexString.startsWith("-") ? 3 : 2;
      validator.validate([hexString.startsWith("-") ? "int" : "uint"], [value]);
      return hexString.padEnd(characterAmount + prefixLength, sign2);
    };
    const rightPad = padRight;
    const leftPad = padLeft;
    const toTwosComplement = (value, nibbleWidth = 64) => {
      validator.validate(["int"], [value]);
      const val = toNumber(value);
      if (val >= 0)
        return padLeft(toHex(val), nibbleWidth);
      const largestBit = bigintPower(BigInt(2), BigInt(nibbleWidth * 4));
      if (-val >= largestBit) {
        throw new NibbleWidthError(`value: ${value}, nibbleWidth: ${nibbleWidth}`);
      }
      const updatedVal = BigInt(val);
      const complement = updatedVal + largestBit;
      return padLeft(numberToHex$1(complement), nibbleWidth);
    };
    const fromTwosComplement = (value, nibbleWidth = 64) => {
      validator.validate(["int"], [value]);
      const val = toNumber(value);
      if (val < 0)
        return val;
      const largestBit = Math.ceil(Math.log(Number(val)) / Math.log(2));
      if (largestBit > nibbleWidth * 4)
        throw new NibbleWidthError(`value: "${value}", nibbleWidth: "${nibbleWidth}"`);
      if (nibbleWidth * 4 !== largestBit)
        return val;
      const complement = bigintPower(BigInt(2), BigInt(nibbleWidth) * BigInt(4));
      return toNumber(BigInt(val) - complement);
    };
    const { parseBaseType } = utils$1;
    const isDataFormat = (dataFormat) => typeof dataFormat === "object" && !isNullish$1(dataFormat) && "number" in dataFormat && "bytes" in dataFormat;
    const findSchemaByDataPath = (schema, dataPath, oneOfPath = []) => {
      let result = Object.assign({}, schema);
      let previousDataPath;
      for (const dataPart of dataPath) {
        if (result.oneOf && previousDataPath) {
          const currentDataPath = previousDataPath;
          const path = oneOfPath.find(([key]) => key === currentDataPath);
          if (path && path[0] === previousDataPath) {
            result = result.oneOf[path[1]];
          }
        }
        if (!result.properties && !result.items) {
          return void 0;
        }
        if (result.properties) {
          result = result.properties[dataPart];
        } else if (result.items && result.items.properties) {
          const node = result.items.properties;
          result = node[dataPart];
        } else if (result.items && isObject(result.items)) {
          result = result.items;
        } else if (result.items && Array.isArray(result.items)) {
          result = result.items[parseInt(dataPart, 10)];
        }
        if (result && dataPart)
          previousDataPath = dataPart;
      }
      return result;
    };
    const convertScalarValue = (value, ethType, format2) => {
      try {
        const { baseType, baseTypeSize } = parseBaseType(ethType);
        if (baseType === "int" || baseType === "uint") {
          switch (format2.number) {
            case FMT_NUMBER.NUMBER:
              return Number(toBigInt(value));
            case FMT_NUMBER.HEX:
              return numberToHex$1(toBigInt(value));
            case FMT_NUMBER.STR:
              return toBigInt(value).toString();
            case FMT_NUMBER.BIGINT:
              return toBigInt(value);
            default:
              throw new FormatterError(`Invalid format: ${String(format2.number)}`);
          }
        }
        if (baseType === "bytes") {
          let paddedValue;
          if (baseTypeSize) {
            if (typeof value === "string")
              paddedValue = padLeft(value, baseTypeSize * 2);
            else if (isUint8Array(value)) {
              paddedValue = uint8ArrayConcat(new Uint8Array(baseTypeSize - value.length), value);
            }
          } else {
            paddedValue = value;
          }
          switch (format2.bytes) {
            case FMT_BYTES.HEX:
              return bytesToHex$2(bytesToUint8Array(paddedValue));
            case FMT_BYTES.UINT8ARRAY:
              return bytesToUint8Array(paddedValue);
            default:
              throw new FormatterError(`Invalid format: ${String(format2.bytes)}`);
          }
        }
        if (baseType === "string") {
          return String(value);
        }
      } catch (error) {
        return value;
      }
      return value;
    };
    const convertArray = ({ value, schemaProp, schema, object, key, dataPath, format: format2, oneOfPath = [] }) => {
      var _a2, _b;
      if (Array.isArray(value)) {
        let _schemaProp = schemaProp;
        if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== void 0) {
          schemaProp.oneOf.forEach((oneOfSchemaProp, index) => {
            var _a3, _b2;
            if (!Array.isArray(schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.items) && (typeof value[0] === "object" && ((_a3 = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _a3 === void 0 ? void 0 : _a3.type) === "object" || typeof value[0] === "string" && ((_b2 = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _b2 === void 0 ? void 0 : _b2.type) !== "object")) {
              _schemaProp = oneOfSchemaProp;
              oneOfPath.push([key, index]);
            }
          });
        }
        if (isNullish$1(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {
          delete object[key];
          dataPath.pop();
          return true;
        }
        if (isObject(_schemaProp.items) && !isNullish$1(_schemaProp.items.format)) {
          for (let i = 0; i < value.length; i += 1) {
            object[key][i] = convertScalarValue(
              value[i],
              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
              (_a2 = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _a2 === void 0 ? void 0 : _a2.format,
              format2
            );
          }
          dataPath.pop();
          return true;
        }
        if (!Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) && ((_b = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _b === void 0 ? void 0 : _b.type) === "object") {
          for (const arrObject of value) {
            convert(arrObject, schema, dataPath, format2, oneOfPath);
          }
          dataPath.pop();
          return true;
        }
        if (Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {
          for (let i = 0; i < value.length; i += 1) {
            object[key][i] = convertScalarValue(value[i], _schemaProp.items[i].format, format2);
          }
          dataPath.pop();
          return true;
        }
      }
      return false;
    };
    const convert = (data, schema, dataPath, format2, oneOfPath = []) => {
      var _a2;
      if (!isObject(data) && !Array.isArray(data)) {
        return convertScalarValue(data, schema === null || schema === void 0 ? void 0 : schema.format, format2);
      }
      const object = data;
      if (Array.isArray(object) && (schema === null || schema === void 0 ? void 0 : schema.type) === "array" && ((_a2 = schema === null || schema === void 0 ? void 0 : schema.items) === null || _a2 === void 0 ? void 0 : _a2.type) === "object") {
        convertArray({
          value: object,
          schemaProp: schema,
          schema,
          object,
          key: "",
          dataPath,
          format: format2,
          oneOfPath
        });
      } else {
        for (const [key, value] of Object.entries(object)) {
          dataPath.push(key);
          let schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);
          if (isNullish$1(schemaProp)) {
            delete object[key];
            dataPath.pop();
            continue;
          }
          if (isObject(value)) {
            convert(value, schema, dataPath, format2, oneOfPath);
            dataPath.pop();
            continue;
          }
          if (convertArray({
            value,
            schemaProp,
            schema,
            object,
            key,
            dataPath,
            format: format2,
            oneOfPath
          })) {
            continue;
          }
          if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.format) === void 0 && (schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== void 0) {
            for (const [_index, oneOfSchemaProp] of schemaProp.oneOf.entries()) {
              if ((oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.format) !== void 0) {
                schemaProp = oneOfSchemaProp;
                break;
              }
            }
          }
          object[key] = convertScalarValue(value, schemaProp.format, format2);
          dataPath.pop();
        }
      }
      return object;
    };
    const format = (schema, data, returnFormat = DEFAULT_RETURN_FORMAT) => {
      let dataToParse;
      if (isObject(data)) {
        dataToParse = mergeDeep({}, data);
      } else if (Array.isArray(data)) {
        dataToParse = [...data];
      } else {
        dataToParse = data;
      }
      const jsonSchema = isObject(schema) ? schema : ethAbiToJsonSchema(schema);
      if (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) {
        throw new FormatterError("Invalid json schema for formatting");
      }
      return convert(dataToParse, jsonSchema, [], returnFormat);
    };
    const SHA3_EMPTY_BYTES = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    const keccak256Wrapper = (data) => {
      let processedData;
      if (typeof data === "bigint" || typeof data === "number") {
        processedData = utf8ToBytes$3(data.toString());
      } else if (Array.isArray(data)) {
        processedData = new Uint8Array(data);
      } else if (typeof data === "string" && !isHexStrict$1(data)) {
        processedData = utf8ToBytes$3(data);
      } else {
        processedData = bytesToUint8Array(data);
      }
      return bytesToHex$2(keccak256(ensureIfUint8Array(processedData)));
    };
    const sha3 = (data) => {
      let updatedData;
      if (typeof data === "string") {
        if (data.startsWith("0x") && isHexStrict$1(data)) {
          updatedData = hexToBytes$2(data);
        } else {
          updatedData = utf8ToBytes$3(data);
        }
      } else {
        updatedData = data;
      }
      const hash2 = keccak256Wrapper(updatedData);
      return hash2 === SHA3_EMPTY_BYTES ? void 0 : hash2;
    };
    const sha3Raw = (data) => {
      const hash2 = sha3(data);
      if (isNullish$1(hash2)) {
        return SHA3_EMPTY_BYTES;
      }
      return hash2;
    };
    const getType = (arg) => {
      if (Array.isArray(arg)) {
        throw new Error("Autodetection of array types is not supported.");
      }
      let type;
      let value;
      if (typeof arg === "object" && ("t" in arg || "type" in arg) && ("v" in arg || "value" in arg)) {
        type = "t" in arg ? arg.t : arg.type;
        value = "v" in arg ? arg.v : arg.value;
        type = type.toLowerCase() === "bigint" ? "int" : type;
      } else if (typeof arg === "bigint") {
        return ["int", arg];
      } else {
        type = toHex(arg, true);
        value = toHex(arg);
        if (!type.startsWith("int") && !type.startsWith("uint")) {
          type = "bytes";
        }
      }
      if ((type.startsWith("int") || type.startsWith("uint")) && typeof value === "string" && !/^(-)?0x/i.test(value)) {
        value = toBigInt(value);
      }
      return [type, value];
    };
    const elementaryName = (name2) => {
      if (name2.startsWith("int[")) {
        return `int256${name2.slice(3)}`;
      }
      if (name2 === "int") {
        return "int256";
      }
      if (name2.startsWith("uint[")) {
        return `uint256'${name2.slice(4)}`;
      }
      if (name2 === "uint") {
        return "uint256";
      }
      return name2;
    };
    const parseTypeN = (value, typeLength) => {
      const typesize = /^(\d+).*$/.exec(value.slice(typeLength));
      return typesize ? parseInt(typesize[1], 10) : 0;
    };
    const bitLength = (value) => {
      const updatedVal = value.toString(2);
      return updatedVal.length;
    };
    const solidityPack = (type, val) => {
      const value = val.toString();
      if (type === "string") {
        if (typeof val === "string")
          return utf8ToHex(val);
        throw new InvalidStringError(val);
      }
      if (type === "bool" || type === "boolean") {
        if (typeof val === "boolean")
          return val ? "01" : "00";
        throw new InvalidBooleanError(val);
      }
      if (type === "address") {
        if (!isAddress$1(value)) {
          throw new InvalidAddressError(value);
        }
        return value;
      }
      const name2 = elementaryName(type);
      if (type.startsWith("uint")) {
        const size = parseTypeN(name2, "uint".length);
        if (size % 8 || size < 8 || size > 256) {
          throw new InvalidSizeError(value);
        }
        const num = toNumber(value);
        if (bitLength(num) > size) {
          throw new InvalidLargeValueError(value);
        }
        if (num < BigInt(0)) {
          throw new InvalidUnsignedIntegerError(value);
        }
        return size ? leftPad(num.toString(16), size / 8 * 2) : num.toString(16);
      }
      if (type.startsWith("int")) {
        const size = parseTypeN(name2, "int".length);
        if (size % 8 || size < 8 || size > 256) {
          throw new InvalidSizeError(type);
        }
        const num = toNumber(value);
        if (bitLength(num) > size) {
          throw new InvalidLargeValueError(value);
        }
        if (num < BigInt(0)) {
          return toTwosComplement(num.toString(), size / 8 * 2);
        }
        return size ? leftPad(num.toString(16), size / 4) : num.toString(16);
      }
      if (name2 === "bytes") {
        if (value.replace(/^0x/i, "").length % 2 !== 0) {
          throw new InvalidBytesError(value);
        }
        return value;
      }
      if (type.startsWith("bytes")) {
        if (value.replace(/^0x/i, "").length % 2 !== 0) {
          throw new InvalidBytesError(value);
        }
        const size = parseTypeN(type, "bytes".length);
        if (!size || size < 1 || size > 64 || size < value.replace(/^0x/i, "").length / 2) {
          throw new InvalidBytesError(value);
        }
        return rightPad(value, size * 2);
      }
      return "";
    };
    const processSolidityEncodePackedArgs = (arg) => {
      const [type, val] = getType(arg);
      if (Array.isArray(val)) {
        const hexArg2 = val.map((v2) => solidityPack(type, v2).replace("0x", ""));
        return hexArg2.join("");
      }
      const hexArg = solidityPack(type, val);
      return hexArg.replace("0x", "");
    };
    const encodePacked = (...values) => {
      const hexArgs = values.map(processSolidityEncodePackedArgs);
      return `0x${hexArgs.join("").toLowerCase()}`;
    };
    const soliditySha3 = (...values) => sha3(encodePacked(...values));
    const soliditySha3Raw = (...values) => sha3Raw(encodePacked(...values));
    const getStorageSlotNumForLongString = (mainSlotNumber) => sha3(`0x${(typeof mainSlotNumber === "number" ? mainSlotNumber.toString() : mainSlotNumber).padStart(64, "0")}`);
    function getRandomBytesSync(bytes2) {
      return randomBytes$1(bytes2);
    }
    const randomBytes = (size) => getRandomBytesSync(size);
    const randomHex = (byteSize) => bytesToHex$2(randomBytes(byteSize));
    var __awaiter$F = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    function isPromise(object) {
      return (typeof object === "object" || typeof object === "function") && // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      typeof object.then === "function";
    }
    function waitWithTimeout(awaitable, timeout, error) {
      return __awaiter$F(this, void 0, void 0, function* () {
        let timeoutId;
        const result = yield Promise.race([
          awaitable instanceof Promise ? awaitable : awaitable(),
          new Promise((resolve, reject) => {
            timeoutId = setTimeout(() => error ? reject(error) : resolve(void 0), timeout);
          })
        ]);
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (result instanceof Error) {
          throw result;
        }
        return result;
      });
    }
    function pollTillDefinedAndReturnIntervalId(func, interval) {
      let intervalId;
      const polledRes = new Promise((resolve, reject) => {
        intervalId = setInterval(
          function intervalCallbackFunc() {
            (() => __awaiter$F(this, void 0, void 0, function* () {
              try {
                const res = yield waitWithTimeout(func, interval);
                if (!isNullish$1(res)) {
                  clearInterval(intervalId);
                  resolve(res);
                }
              } catch (error) {
                clearInterval(intervalId);
                reject(error);
              }
            }))();
            return intervalCallbackFunc;
          }(),
          // this will immediate invoke first call
          interval
        );
      });
      return [polledRes, intervalId];
    }
    function pollTillDefined(func, interval) {
      return __awaiter$F(this, void 0, void 0, function* () {
        return pollTillDefinedAndReturnIntervalId(func, interval)[0];
      });
    }
    function rejectIfTimeout(timeout, error) {
      let timeoutId;
      const rejectOnTimeout = new Promise((_, reject) => {
        timeoutId = setTimeout(() => {
          reject(error);
        }, timeout);
      });
      return [timeoutId, rejectOnTimeout];
    }
    function rejectIfConditionAtInterval(cond, interval) {
      let intervalId;
      const rejectIfCondition = new Promise((_, reject) => {
        intervalId = setInterval(() => {
          (() => __awaiter$F(this, void 0, void 0, function* () {
            const error = yield cond();
            if (error) {
              clearInterval(intervalId);
              reject(error);
            }
          }))();
        }, interval);
      });
      return [intervalId, rejectIfCondition];
    }
    const uuidV4 = () => {
      const bytes2 = randomBytes(16);
      bytes2[6] = bytes2[6] & 15 | 64;
      bytes2[8] = bytes2[8] & 63 | 128;
      const hexString = bytesToHex$2(bytes2);
      return [
        hexString.substring(2, 10),
        hexString.substring(10, 14),
        hexString.substring(14, 18),
        hexString.substring(18, 22),
        hexString.substring(22, 34)
      ].join("-");
    };
    const isResponseRpcError = (rpcError) => {
      const errorCode = rpcError.error.code;
      return rpcErrorsMap.has(errorCode) || errorCode >= -32099 && errorCode <= -32e3;
    };
    const isResponseWithResult = (response) => !Array.isArray(response) && !!response && response.jsonrpc === "2.0" && // JSON RPC consider "null" as valid response
    "result" in response && isNullish$1(response.error) && (typeof response.id === "number" || typeof response.id === "string");
    const isResponseWithError = (response) => !Array.isArray(response) && response.jsonrpc === "2.0" && !!response && isNullish$1(response.result) && // JSON RPC consider "null" as valid response
    "error" in response && (typeof response.id === "number" || typeof response.id === "string");
    const isResponseWithNotification = (response) => !Array.isArray(response) && !!response && response.jsonrpc === "2.0" && !isNullish$1(response.params) && !isNullish$1(response.method);
    const isSubscriptionResult = (response) => !Array.isArray(response) && !!response && response.jsonrpc === "2.0" && "id" in response && // JSON RPC consider "null" as valid response
    "result" in response;
    const validateResponse = (response) => isResponseWithResult(response) || isResponseWithError(response);
    const isValidResponse = (response) => Array.isArray(response) ? response.every(validateResponse) : validateResponse(response);
    const isBatchResponse = (response) => Array.isArray(response) && response.length > 0 && isValidResponse(response);
    let requestIdSeed;
    const setRequestIdStart = (start) => {
      requestIdSeed = start;
    };
    const toPayload = (request) => {
      var _a2, _b, _c, _d;
      if (typeof requestIdSeed !== "undefined") {
        requestIdSeed += 1;
      }
      return {
        jsonrpc: (_a2 = request.jsonrpc) !== null && _a2 !== void 0 ? _a2 : "2.0",
        id: (_c = (_b = request.id) !== null && _b !== void 0 ? _b : requestIdSeed) !== null && _c !== void 0 ? _c : uuidV4(),
        method: request.method,
        params: (_d = request.params) !== null && _d !== void 0 ? _d : void 0
      };
    };
    const toBatchPayload = (requests) => requests.map((request) => toPayload(request));
    const isBatchRequest = (request) => Array.isArray(request) && request.length > 0;
    const json_rpc = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      isBatchRequest,
      isBatchResponse,
      isResponseRpcError,
      isResponseWithError,
      isResponseWithNotification,
      isResponseWithResult,
      isSubscriptionResult,
      isValidResponse,
      setRequestIdStart,
      toBatchPayload,
      toPayload,
      validateResponse
    }, Symbol.toStringTag, { value: "Module" }));
    var __awaiter$E = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var _a$2;
    class Web3DeferredPromise {
      /**
       *
       * @param timeout - (optional) The timeout in milliseconds.
       * @param eagerStart - (optional) If true, the timer starts as soon as the promise is created.
       * @param timeoutMessage - (optional) The message to include in the timeout erro that is thrown when the promise times out.
       */
      constructor({ timeout, eagerStart, timeoutMessage } = {
        timeout: 0,
        eagerStart: false,
        timeoutMessage: "DeferredPromise timed out"
      }) {
        this[_a$2] = "Promise";
        this._state = "pending";
        this._promise = new Promise((resolve, reject) => {
          this._resolve = resolve;
          this._reject = reject;
        });
        this._timeoutMessage = timeoutMessage;
        this._timeoutInterval = timeout;
        if (eagerStart) {
          this.startTimer();
        }
      }
      /**
       * Returns the current state of the promise.
       * @returns 'pending' | 'fulfilled' | 'rejected'
       */
      get state() {
        return this._state;
      }
      /**
       *
       * @param onfulfilled - (optional) The callback to execute when the promise is fulfilled.
       * @param onrejected  - (optional) The callback to execute when the promise is rejected.
       * @returns
       */
      then(onfulfilled, onrejected) {
        return __awaiter$E(this, void 0, void 0, function* () {
          return this._promise.then(onfulfilled, onrejected);
        });
      }
      /**
       *
       * @param onrejected - (optional) The callback to execute when the promise is rejected.
       * @returns
       */
      catch(onrejected) {
        return __awaiter$E(this, void 0, void 0, function* () {
          return this._promise.catch(onrejected);
        });
      }
      /**
       *
       * @param onfinally - (optional) The callback to execute when the promise is settled (fulfilled or rejected).
       * @returns
       */
      finally(onfinally) {
        return __awaiter$E(this, void 0, void 0, function* () {
          return this._promise.finally(onfinally);
        });
      }
      /**
       * Resolves the current promise.
       * @param value - The value to resolve the promise with.
       */
      resolve(value) {
        this._resolve(value);
        this._state = "fulfilled";
        this._clearTimeout();
      }
      /**
       * Rejects the current promise.
       * @param reason - The reason to reject the promise with.
       */
      reject(reason) {
        this._reject(reason);
        this._state = "rejected";
        this._clearTimeout();
      }
      /**
       * Starts the timeout timer for the promise.
       */
      startTimer() {
        if (this._timeoutInterval && this._timeoutInterval > 0) {
          this._timeoutId = setTimeout(this._checkTimeout.bind(this), this._timeoutInterval);
        }
      }
      _checkTimeout() {
        if (this._state === "pending" && this._timeoutId) {
          this.reject(new OperationTimeoutError(this._timeoutMessage));
        }
      }
      _clearTimeout() {
        if (this._timeoutId) {
          clearTimeout(this._timeoutId);
        }
      }
    }
    _a$2 = Symbol.toStringTag;
    class ChunkResponseParser {
      constructor(eventEmitter, autoReconnect) {
        this.eventEmitter = eventEmitter;
        this.autoReconnect = autoReconnect;
        this.chunkTimeout = 1e3 * 15;
      }
      clearQueues() {
        if (typeof this._clearQueues === "function") {
          this._clearQueues();
        }
      }
      onError(clearQueues) {
        this._clearQueues = clearQueues;
      }
      parseResponse(data) {
        const returnValues = [];
        const dechunkedData = data.replace(/\}[\n\r]?\{/g, "}|--|{").replace(/\}\][\n\r]?\[\{/g, "}]|--|[{").replace(/\}[\n\r]?\[\{/g, "}|--|[{").replace(/\}\][\n\r]?\{/g, "}]|--|{").split("|--|");
        dechunkedData.forEach((_chunkData) => {
          let chunkData = _chunkData;
          if (this.lastChunk) {
            chunkData = this.lastChunk + chunkData;
          }
          let result;
          try {
            result = JSON.parse(chunkData);
          } catch (e) {
            this.lastChunk = chunkData;
            if (this.lastChunkTimeout) {
              clearTimeout(this.lastChunkTimeout);
            }
            this.lastChunkTimeout = setTimeout(() => {
              if (this.autoReconnect)
                return;
              this.clearQueues();
              this.eventEmitter.emit("error", new InvalidResponseError({
                id: 1,
                jsonrpc: "2.0",
                error: { code: 2, message: "Chunk timeout" }
              }));
            }, this.chunkTimeout);
            return;
          }
          clearTimeout(this.lastChunkTimeout);
          this.lastChunk = void 0;
          if (result)
            returnValues.push(result);
        });
        return returnValues;
      }
    }
    var __awaiter$D = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class Eip1193Provider extends Web3BaseProvider {
      constructor() {
        super(...arguments);
        this._eventEmitter = new EventEmitter$1();
        this._chainId = "";
        this._accounts = [];
      }
      _getChainId() {
        var _a2;
        return __awaiter$D(this, void 0, void 0, function* () {
          const data = yield this.request(toPayload({
            method: "eth_chainId",
            params: []
          }));
          return (_a2 = data === null || data === void 0 ? void 0 : data.result) !== null && _a2 !== void 0 ? _a2 : "";
        });
      }
      _getAccounts() {
        var _a2;
        return __awaiter$D(this, void 0, void 0, function* () {
          const data = yield this.request(toPayload({
            method: "eth_accounts",
            params: []
          }));
          return (_a2 = data === null || data === void 0 ? void 0 : data.result) !== null && _a2 !== void 0 ? _a2 : [];
        });
      }
      _onConnect() {
        Promise.all([
          this._getChainId().then((chainId) => {
            if (chainId !== this._chainId) {
              this._chainId = chainId;
              this._eventEmitter.emit("chainChanged", this._chainId);
            }
          }).catch((err) => {
            console.error(err);
          }),
          this._getAccounts().then((accounts) => {
            if (!(this._accounts.length === accounts.length && accounts.every((v2) => accounts.includes(v2)))) {
              this._accounts = accounts;
              this._onAccountsChanged();
            }
          }).catch((err) => {
            console.error(err);
          })
        ]).then(() => this._eventEmitter.emit("connect", {
          chainId: this._chainId
        })).catch((err) => {
          console.error(err);
        });
      }
      // todo this must be ProvideRpcError with a message too
      _onDisconnect(code, data) {
        this._eventEmitter.emit("disconnect", new EIP1193ProviderRpcError(code, data));
      }
      _onAccountsChanged() {
        this._eventEmitter.emit("accountsChanged", this._accounts);
      }
    }
    var __awaiter$C = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const DEFAULT_RECONNECTION_OPTIONS = {
      autoReconnect: true,
      delay: 5e3,
      maxAttempts: 5
    };
    const NORMAL_CLOSE_CODE = 1e3;
    class SocketProvider extends Eip1193Provider {
      /**
       * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.
       * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)
       * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.
       * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}
       */
      constructor(socketPath, socketOptions, reconnectOptions) {
        super();
        this._connectionStatus = "connecting";
        this._onMessageHandler = this._onMessage.bind(this);
        this._onOpenHandler = this._onConnect.bind(this);
        this._onCloseHandler = this._onCloseEvent.bind(this);
        this._onErrorHandler = this._onError.bind(this);
        if (!this._validateProviderPath(socketPath))
          throw new InvalidClientError(socketPath);
        this._socketPath = socketPath;
        this._socketOptions = socketOptions;
        this._reconnectOptions = Object.assign(Object.assign({}, DEFAULT_RECONNECTION_OPTIONS), reconnectOptions !== null && reconnectOptions !== void 0 ? reconnectOptions : {});
        this._pendingRequestsQueue = /* @__PURE__ */ new Map();
        this._sentRequestsQueue = /* @__PURE__ */ new Map();
        this._init();
        this.connect();
        this.chunkResponseParser = new ChunkResponseParser(this._eventEmitter, this._reconnectOptions.autoReconnect);
        this.chunkResponseParser.onError(() => {
          this._clearQueues();
        });
        this.isReconnecting = false;
      }
      get SocketConnection() {
        return this._socketConnection;
      }
      _init() {
        this._reconnectAttempts = 0;
      }
      /**
       * Try to establish a connection to the socket
       */
      connect() {
        try {
          this._openSocketConnection();
          this._connectionStatus = "connecting";
          this._addSocketListeners();
        } catch (e) {
          if (!this.isReconnecting) {
            this._connectionStatus = "disconnected";
            if (e && e.message) {
              throw new ConnectionError(`Error while connecting to ${this._socketPath}. Reason: ${e.message}`);
            } else {
              throw new InvalidClientError(this._socketPath);
            }
          } else {
            setImmediate(() => {
              this._reconnect();
            });
          }
        }
      }
      // eslint-disable-next-line class-methods-use-this
      _validateProviderPath(path) {
        return !!path;
      }
      /**
       *
       * @returns the pendingRequestQueue size
       */
      // eslint-disable-next-line class-methods-use-this
      getPendingRequestQueueSize() {
        return this._pendingRequestsQueue.size;
      }
      /**
       *
       * @returns the sendPendingRequests size
       */
      // eslint-disable-next-line class-methods-use-this
      getSentRequestsQueueSize() {
        return this._sentRequestsQueue.size;
      }
      /**
       *
       * @returns `true` if the socket supports subscriptions
       */
      // eslint-disable-next-line class-methods-use-this
      supportsSubscriptions() {
        return true;
      }
      on(type, listener) {
        this._eventEmitter.on(type, listener);
      }
      once(type, listener) {
        this._eventEmitter.once(type, listener);
      }
      removeListener(type, listener) {
        this._eventEmitter.removeListener(type, listener);
      }
      _onDisconnect(code, data) {
        this._connectionStatus = "disconnected";
        super._onDisconnect(code, data);
      }
      /**
       * Disconnects the socket
       * @param code - The code to be sent to the server
       * @param data - The data to be sent to the server
       */
      disconnect(code, data) {
        const disconnectCode = code !== null && code !== void 0 ? code : NORMAL_CLOSE_CODE;
        this._removeSocketListeners();
        if (this.getStatus() !== "disconnected") {
          this._closeSocketConnection(disconnectCode, data);
        }
        this._onDisconnect(disconnectCode, data);
      }
      /**
       * Safely disconnects the socket, async and waits for request size to be 0 before disconnecting
       * @param forceDisconnect - If true, will clear queue after 5 attempts of waiting for both pending and sent queue to be 0
       * @param ms - Determines the ms of setInterval
       * @param code - The code to be sent to the server
       * @param data - The data to be sent to the server
       */
      safeDisconnect(code, data, forceDisconnect = false, ms = 1e3) {
        return __awaiter$C(this, void 0, void 0, function* () {
          let retryAttempt = 0;
          const checkQueue = () => __awaiter$C(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
              const interval = setInterval(() => {
                if (forceDisconnect && retryAttempt >= 5) {
                  this.clearQueues();
                }
                if (this.getPendingRequestQueueSize() === 0 && this.getSentRequestsQueueSize() === 0) {
                  clearInterval(interval);
                  resolve(true);
                }
                retryAttempt += 1;
              }, ms);
            });
          });
          yield checkQueue();
          this.disconnect(code, data);
        });
      }
      /**
       * Removes all listeners for the specified event type.
       * @param type - The event type to remove the listeners for
       */
      removeAllListeners(type) {
        this._eventEmitter.removeAllListeners(type);
      }
      _onError(event) {
        if (this.isReconnecting) {
          this._reconnect();
        } else {
          this._eventEmitter.emit("error", event);
        }
      }
      /**
       * Resets the socket, removing all listeners and pending requests
       */
      reset() {
        this._sentRequestsQueue.clear();
        this._pendingRequestsQueue.clear();
        this._init();
        this._removeSocketListeners();
        this._addSocketListeners();
      }
      _reconnect() {
        if (this.isReconnecting) {
          return;
        }
        this.isReconnecting = true;
        if (this._sentRequestsQueue.size > 0) {
          this._sentRequestsQueue.forEach((request, key) => {
            request.deferredPromise.reject(new PendingRequestsOnReconnectingError());
            this._sentRequestsQueue.delete(key);
          });
        }
        if (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {
          this._reconnectAttempts += 1;
          setTimeout(() => {
            this._removeSocketListeners();
            this.connect();
            this.isReconnecting = false;
          }, this._reconnectOptions.delay);
        } else {
          this.isReconnecting = false;
          this._clearQueues();
          this._removeSocketListeners();
          this._eventEmitter.emit("error", new MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts));
        }
      }
      /**
       *  Creates a request object to be sent to the server
       */
      request(request) {
        return __awaiter$C(this, void 0, void 0, function* () {
          if (isNullish(this._socketConnection)) {
            throw new Error("Connection is undefined");
          }
          if (this.getStatus() === "disconnected") {
            this.connect();
          }
          const requestId = isBatchRequest(request) ? request[0].id : request.id;
          if (!requestId) {
            throw new Web3WSProviderError("Request Id not defined");
          }
          if (this._sentRequestsQueue.has(requestId)) {
            throw new RequestAlreadySentError(requestId);
          }
          const deferredPromise = new Web3DeferredPromise();
          deferredPromise.catch((error) => {
            this._eventEmitter.emit("error", error);
          });
          const reqItem = {
            payload: request,
            deferredPromise
          };
          if (this.getStatus() === "connecting") {
            this._pendingRequestsQueue.set(requestId, reqItem);
            return reqItem.deferredPromise;
          }
          this._sentRequestsQueue.set(requestId, reqItem);
          try {
            this._sendToSocket(reqItem.payload);
          } catch (error) {
            this._sentRequestsQueue.delete(requestId);
            this._eventEmitter.emit("error", error);
          }
          return deferredPromise;
        });
      }
      _onConnect() {
        this._connectionStatus = "connected";
        this._reconnectAttempts = 0;
        super._onConnect();
        this._sendPendingRequests();
      }
      _sendPendingRequests() {
        for (const [id2, value] of this._pendingRequestsQueue.entries()) {
          try {
            this._sendToSocket(value.payload);
            this._pendingRequestsQueue.delete(id2);
            this._sentRequestsQueue.set(id2, value);
          } catch (error) {
            this._pendingRequestsQueue.delete(id2);
            this._eventEmitter.emit("error", error);
          }
        }
      }
      _onMessage(event) {
        const responses = this._parseResponses(event);
        if (isNullish(responses) || responses.length === 0) {
          return;
        }
        for (const response of responses) {
          if (isResponseWithNotification(response) && response.method.endsWith("_subscription")) {
            this._eventEmitter.emit("message", response);
            return;
          }
          const requestId = isBatchResponse(response) ? response[0].id : response.id;
          const requestItem = this._sentRequestsQueue.get(requestId);
          if (!requestItem) {
            return;
          }
          if (isBatchResponse(response) || isResponseWithResult(response) || isResponseWithError(response)) {
            this._eventEmitter.emit("message", response);
            requestItem.deferredPromise.resolve(response);
          }
          this._sentRequestsQueue.delete(requestId);
        }
      }
      clearQueues(event) {
        this._clearQueues(event);
      }
      _clearQueues(event) {
        if (this._pendingRequestsQueue.size > 0) {
          this._pendingRequestsQueue.forEach((request, key) => {
            request.deferredPromise.reject(new ConnectionNotOpenError(event));
            this._pendingRequestsQueue.delete(key);
          });
        }
        if (this._sentRequestsQueue.size > 0) {
          this._sentRequestsQueue.forEach((request, key) => {
            request.deferredPromise.reject(new ConnectionNotOpenError(event));
            this._sentRequestsQueue.delete(key);
          });
        }
        this._removeSocketListeners();
      }
    }
    const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      ChunkResponseParser,
      Eip1193Provider,
      EventEmitter,
      SocketProvider,
      Web3DeferredPromise,
      asciiToHex,
      bytesToHex: bytesToHex$2,
      bytesToUint8Array,
      checkAddressCheckSum,
      compareBlockNumbers,
      convert,
      convertScalarValue,
      encodePacked,
      ethUnitMap,
      format,
      fromAscii,
      fromDecimal,
      fromTwosComplement,
      fromUtf8,
      fromWei,
      getStorageSlotNumForLongString,
      hexToAscii,
      hexToBytes: hexToBytes$2,
      hexToNumber: hexToNumber$1,
      hexToNumberString,
      hexToString,
      hexToUtf8,
      isAddress,
      isBatchRequest,
      isBatchResponse,
      isBloom,
      isContractAddressInBloom,
      isContractInitOptions,
      isDataFormat,
      isHex,
      isHexStrict,
      isInBloom,
      isNullish,
      isPromise,
      isResponseRpcError,
      isResponseWithError,
      isResponseWithNotification,
      isResponseWithResult,
      isSubscriptionResult,
      isTopic,
      isTopicInBloom,
      isUint8Array,
      isUserEthereumAddressInBloom,
      isValidResponse,
      jsonRpc: json_rpc,
      keccak256: keccak256Wrapper,
      keccak256Wrapper,
      leftPad,
      mergeDeep,
      numberToHex: numberToHex$1,
      padLeft,
      padRight,
      pollTillDefined,
      pollTillDefinedAndReturnIntervalId,
      processSolidityEncodePackedArgs,
      randomBytes,
      randomHex,
      rejectIfConditionAtInterval,
      rejectIfTimeout,
      rightPad,
      setRequestIdStart,
      sha3,
      sha3Raw,
      soliditySha3,
      soliditySha3Raw,
      stringToHex,
      toAscii,
      toBatchPayload,
      toBigInt,
      toBool,
      toChecksumAddress,
      toDecimal,
      toHex,
      toNumber,
      toPayload,
      toTwosComplement,
      toUtf8,
      toWei,
      uint8ArrayConcat,
      uint8ArrayEquals,
      utf8ToBytes: utf8ToBytes$2,
      utf8ToHex,
      uuidV4,
      validateResponse,
      waitWithTimeout
    }, Symbol.toStringTag, { value: "Module" }));
    class Web3EventEmitter {
      constructor() {
        this._emitter = new EventEmitter();
      }
      on(eventName, fn) {
        this._emitter.on(eventName, fn);
      }
      once(eventName, fn) {
        this._emitter.once(eventName, fn);
      }
      off(eventName, fn) {
        this._emitter.off(eventName, fn);
      }
      emit(eventName, params) {
        this._emitter.emit(eventName, params);
      }
      listenerCount(eventName) {
        return this._emitter.listenerCount(eventName);
      }
      listeners(eventName) {
        return this._emitter.listeners(eventName);
      }
      eventNames() {
        return this._emitter.eventNames();
      }
      removeAllListeners() {
        return this._emitter.removeAllListeners();
      }
      setMaxListenerWarningThreshold(maxListenersWarningThreshold) {
        this._emitter.setMaxListeners(maxListenersWarningThreshold);
      }
      getMaxListeners() {
        return this._emitter.getMaxListeners();
      }
    }
    var Web3ConfigEvent;
    (function(Web3ConfigEvent2) {
      Web3ConfigEvent2["CONFIG_CHANGE"] = "CONFIG_CHANGE";
    })(Web3ConfigEvent || (Web3ConfigEvent = {}));
    class Web3Config extends Web3EventEmitter {
      constructor(options) {
        super();
        this.config = {
          handleRevert: false,
          defaultAccount: void 0,
          defaultBlock: "latest",
          transactionBlockTimeout: 50,
          transactionConfirmationBlocks: 24,
          transactionPollingInterval: 1e3,
          transactionPollingTimeout: 750 * 1e3,
          transactionReceiptPollingInterval: void 0,
          transactionSendTimeout: 750 * 1e3,
          transactionConfirmationPollingInterval: void 0,
          blockHeaderTimeout: 10,
          maxListenersWarningThreshold: 100,
          contractDataInputFill: "data",
          defaultNetworkId: void 0,
          defaultChain: "mainnet",
          defaultHardfork: "london",
          // TODO - Check if there is a default Common
          defaultCommon: void 0,
          defaultTransactionType: "0x2",
          defaultMaxPriorityFeePerGas: toHex(25e8),
          enableExperimentalFeatures: {
            useSubscriptionWhenCheckingBlockTimeout: false,
            useRpcCallSpecification: false
          },
          transactionBuilder: void 0,
          transactionTypeParser: void 0,
          customTransactionSchema: void 0,
          defaultReturnFormat: DEFAULT_RETURN_FORMAT,
          ignoreGasPricing: false
        };
        this.setConfig(options !== null && options !== void 0 ? options : {});
      }
      setConfig(options) {
        const keys = Object.keys(options);
        for (const key of keys) {
          this._triggerConfigChange(key, options[key]);
          if (!isNullish(options[key]) && typeof options[key] === "number" && key === "maxListenersWarningThreshold") {
            this.setMaxListenerWarningThreshold(Number(options[key]));
          }
        }
        Object.assign(this.config, options);
      }
      /**
       * The `handleRevert` options property returns the revert reason string if enabled for the following methods:
       * - web3.eth.sendTransaction()
       * - web3.eth.call()
       * - myContract.methods.myMethod().call()
       * - myContract.methods.myMethod().send()
       * Default is `false`.
       *
       * `Note`: At the moment `handleRevert` is only supported for `sendTransaction` and not for `sendSignedTransaction`
       */
      get handleRevert() {
        return this.config.handleRevert;
      }
      /**
       * Will set the handleRevert
       */
      set handleRevert(val) {
        this._triggerConfigChange("handleRevert", val);
        this.config.handleRevert = val;
      }
      /**
       * The `contractDataInputFill` options property will allow you to set the hash of the method signature and encoded parameters to the property
       * either `data`, `input` or both within your contract.
       * This will affect the contracts send, call and estimateGas methods
       * Default is `data`.
       */
      get contractDataInputFill() {
        return this.config.contractDataInputFill;
      }
      /**
       * Will set the contractDataInputFill
       */
      set contractDataInputFill(val) {
        this._triggerConfigChange("contractDataInputFill", val);
        this.config.contractDataInputFill = val;
      }
      /**
       * This default address is used as the default `from` property, if no `from` property is specified in for the following methods:
       * - web3.eth.sendTransaction()
       * - web3.eth.call()
       * - myContract.methods.myMethod().call()
       * - myContract.methods.myMethod().send()
       */
      get defaultAccount() {
        return this.config.defaultAccount;
      }
      /**
       * Will set the default account.
       */
      set defaultAccount(val) {
        this._triggerConfigChange("defaultAccount", val);
        this.config.defaultAccount = val;
      }
      /**
       * The default block is used for certain methods. You can override it by passing in the defaultBlock as last parameter. The default value is `"latest"`.
       * - web3.eth.getBalance()
       * - web3.eth.getCode()
       * - web3.eth.getTransactionCount()
       * - web3.eth.getStorageAt()
       * - web3.eth.call()
       * - myContract.methods.myMethod().call()
       */
      get defaultBlock() {
        return this.config.defaultBlock;
      }
      /**
       * Will set the default block.
       *
       * - A block number
       * - `"earliest"` - String: The genesis block
       * - `"latest"` - String: The latest block (current head of the blockchain)
       * - `"pending"` - String: The currently mined block (including pending transactions)
       * - `"finalized"` - String: (For POS networks) The finalized block is one which has been accepted as canonical by greater than 2/3 of validators
       * - `"safe"` - String: (For POS networks) The safe head block is one which under normal network conditions, is expected to be included in the canonical chain. Under normal network conditions the safe head and the actual tip of the chain will be equivalent (with safe head trailing only by a few seconds). Safe heads will be less likely to be reorged than the proof of work network's latest blocks.
       */
      set defaultBlock(val) {
        this._triggerConfigChange("defaultBlock", val);
        this.config.defaultBlock = val;
      }
      /**
       * The time used to wait for Ethereum Node to return the sent transaction result.
       * Note: If the RPC call stuck at the Node and therefor timed-out, the transaction may still be pending or even mined by the Network. We recommend checking the pending transactions in such a case.
       * Default is `750` seconds (12.5 minutes).
       */
      get transactionSendTimeout() {
        return this.config.transactionSendTimeout;
      }
      /**
       * Will set the transactionSendTimeout.
       */
      set transactionSendTimeout(val) {
        this._triggerConfigChange("transactionSendTimeout", val);
        this.config.transactionSendTimeout = val;
      }
      /**
       * The `transactionBlockTimeout` is used over socket-based connections. This option defines the amount of new blocks it should wait until the first confirmation happens, otherwise the PromiEvent rejects with a timeout error.
       * Default is `50`.
       */
      get transactionBlockTimeout() {
        return this.config.transactionBlockTimeout;
      }
      /**
       * Will set the transactionBlockTimeout.
       */
      set transactionBlockTimeout(val) {
        this._triggerConfigChange("transactionBlockTimeout", val);
        this.config.transactionBlockTimeout = val;
      }
      /**
       * This defines the number of blocks it requires until a transaction is considered confirmed.
       * Default is `24`.
       */
      get transactionConfirmationBlocks() {
        return this.config.transactionConfirmationBlocks;
      }
      /**
       * Will set the transactionConfirmationBlocks.
       */
      set transactionConfirmationBlocks(val) {
        this._triggerConfigChange("transactionConfirmationBlocks", val);
        this.config.transactionConfirmationBlocks = val;
      }
      /**
       * Used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.
       * Default is `1000` ms.
       */
      get transactionPollingInterval() {
        return this.config.transactionPollingInterval;
      }
      /**
       * Will set the transactionPollingInterval.
       */
      set transactionPollingInterval(val) {
        this._triggerConfigChange("transactionPollingInterval", val);
        this.config.transactionPollingInterval = val;
        this.transactionReceiptPollingInterval = val;
        this.transactionConfirmationPollingInterval = val;
      }
      /**
       * Used over HTTP connections. This option defines the number of seconds Web3 will wait for a receipt which confirms that a transaction was mined by the network. Note: If this method times out, the transaction may still be pending.
       * Default is `750` seconds (12.5 minutes).
       */
      get transactionPollingTimeout() {
        return this.config.transactionPollingTimeout;
      }
      /**
       * Will set the transactionPollingTimeout.
       */
      set transactionPollingTimeout(val) {
        this._triggerConfigChange("transactionPollingTimeout", val);
        this.config.transactionPollingTimeout = val;
      }
      /**
       * The `transactionPollingInterval` is used over HTTP connections. This option defines the number of seconds between Web3 calls for a receipt which confirms that a transaction was mined by the network.
       * Default is `undefined`
       */
      get transactionReceiptPollingInterval() {
        return this.config.transactionReceiptPollingInterval;
      }
      /**
       * Will set the transactionReceiptPollingInterval
       */
      set transactionReceiptPollingInterval(val) {
        this._triggerConfigChange("transactionReceiptPollingInterval", val);
        this.config.transactionReceiptPollingInterval = val;
      }
      get transactionConfirmationPollingInterval() {
        return this.config.transactionConfirmationPollingInterval;
      }
      set transactionConfirmationPollingInterval(val) {
        this._triggerConfigChange("transactionConfirmationPollingInterval", val);
        this.config.transactionConfirmationPollingInterval = val;
      }
      /**
       * The blockHeaderTimeout is used over socket-based connections. This option defines the amount seconds it should wait for `'newBlockHeaders'` event before falling back to polling to fetch transaction receipt.
       * Default is `10` seconds.
       */
      get blockHeaderTimeout() {
        return this.config.blockHeaderTimeout;
      }
      /**
       * Will set the blockHeaderTimeout
       */
      set blockHeaderTimeout(val) {
        this._triggerConfigChange("blockHeaderTimeout", val);
        this.config.blockHeaderTimeout = val;
      }
      /**
       * The enableExperimentalFeatures is used to enable trying new experimental features that are still not fully implemented or not fully tested or still have some related issues.
       * Default is `false` for every feature.
       */
      get enableExperimentalFeatures() {
        return this.config.enableExperimentalFeatures;
      }
      /**
       * Will set the enableExperimentalFeatures
       */
      set enableExperimentalFeatures(val) {
        this._triggerConfigChange("enableExperimentalFeatures", val);
        this.config.enableExperimentalFeatures = val;
      }
      get maxListenersWarningThreshold() {
        return this.config.maxListenersWarningThreshold;
      }
      set maxListenersWarningThreshold(val) {
        this._triggerConfigChange("maxListenersWarningThreshold", val);
        this.setMaxListenerWarningThreshold(val);
        this.config.maxListenersWarningThreshold = val;
      }
      get defaultReturnFormat() {
        return this.config.defaultReturnFormat;
      }
      set defaultReturnFormat(val) {
        this._triggerConfigChange("defaultReturnFormat", val);
        this.config.defaultReturnFormat = val;
      }
      get defaultNetworkId() {
        return this.config.defaultNetworkId;
      }
      set defaultNetworkId(val) {
        this._triggerConfigChange("defaultNetworkId", val);
        this.config.defaultNetworkId = val;
      }
      get defaultChain() {
        return this.config.defaultChain;
      }
      set defaultChain(val) {
        if (!isNullish(this.config.defaultCommon) && !isNullish(this.config.defaultCommon.baseChain) && val !== this.config.defaultCommon.baseChain)
          throw new ConfigChainMismatchError(this.config.defaultChain, val);
        this._triggerConfigChange("defaultChain", val);
        this.config.defaultChain = val;
      }
      /**
       * Will return the default hardfork. Default is `london`
       * The default hardfork property can be one of the following:
       * - `chainstart`
       * - `homestead`
       * - `dao`
       * - `tangerineWhistle`
       * - `spuriousDragon`
       * - `byzantium`
       * - `constantinople`
       * - `petersburg`
       * - `istanbul`
       * - `berlin`
       * - `london`
       * - 'arrowGlacier',
       * - 'tangerineWhistle',
       * - 'muirGlacier'
       *
       */
      get defaultHardfork() {
        return this.config.defaultHardfork;
      }
      /**
       * Will set the default hardfork.
       *
       */
      set defaultHardfork(val) {
        if (!isNullish(this.config.defaultCommon) && !isNullish(this.config.defaultCommon.hardfork) && val !== this.config.defaultCommon.hardfork)
          throw new ConfigHardforkMismatchError(this.config.defaultCommon.hardfork, val);
        this._triggerConfigChange("defaultHardfork", val);
        this.config.defaultHardfork = val;
      }
      /**
       *
       * Will get the default common property
       * The default common property does contain the following Common object:
       * - `customChain` - `Object`: The custom chain properties
       * 	- `name` - `string`: (optional) The name of the chain
       * 	- `networkId` - `number`: Network ID of the custom chain
       * 	- `chainId` - `number`: Chain ID of the custom chain
       * - `baseChain` - `string`: (optional) mainnet, goerli, kovan, rinkeby, or ropsten
       * - `hardfork` - `string`: (optional) chainstart, homestead, dao, tangerineWhistle, spuriousDragon, byzantium, constantinople, petersburg, istanbul, berlin, or london
       * Default is `undefined`.
       *
       */
      get defaultCommon() {
        return this.config.defaultCommon;
      }
      /**
       * Will set the default common property
       *
       */
      set defaultCommon(val) {
        if (!isNullish(this.config.defaultHardfork) && !isNullish(val) && !isNullish(val.hardfork) && this.config.defaultHardfork !== val.hardfork)
          throw new ConfigHardforkMismatchError(this.config.defaultHardfork, val.hardfork);
        if (!isNullish(this.config.defaultChain) && !isNullish(val) && !isNullish(val.baseChain) && this.config.defaultChain !== val.baseChain)
          throw new ConfigChainMismatchError(this.config.defaultChain, val.baseChain);
        this._triggerConfigChange("defaultCommon", val);
        this.config.defaultCommon = val;
      }
      /**
       *  Will get the ignoreGasPricing property. When true, the gasPrice, maxPriorityFeePerGas, and maxFeePerGas will not be autofilled in the transaction object.
       *  Useful when you want wallets to handle gas pricing.
       */
      get ignoreGasPricing() {
        return this.config.ignoreGasPricing;
      }
      set ignoreGasPricing(val) {
        this._triggerConfigChange("ignoreGasPricing", val);
        this.config.ignoreGasPricing = val;
      }
      get defaultTransactionType() {
        return this.config.defaultTransactionType;
      }
      set defaultTransactionType(val) {
        this._triggerConfigChange("defaultTransactionType", val);
        this.config.defaultTransactionType = val;
      }
      get defaultMaxPriorityFeePerGas() {
        return this.config.defaultMaxPriorityFeePerGas;
      }
      set defaultMaxPriorityFeePerGas(val) {
        this._triggerConfigChange("defaultMaxPriorityFeePerGas", val);
        this.config.defaultMaxPriorityFeePerGas = val;
      }
      get transactionBuilder() {
        return this.config.transactionBuilder;
      }
      set transactionBuilder(val) {
        this._triggerConfigChange("transactionBuilder", val);
        this.config.transactionBuilder = val;
      }
      get transactionTypeParser() {
        return this.config.transactionTypeParser;
      }
      set transactionTypeParser(val) {
        this._triggerConfigChange("transactionTypeParser", val);
        this.config.transactionTypeParser = val;
      }
      get customTransactionSchema() {
        return this.config.customTransactionSchema;
      }
      set customTransactionSchema(schema) {
        this._triggerConfigChange("customTransactionSchema", schema);
        this.config.customTransactionSchema = schema;
      }
      _triggerConfigChange(config, newValue) {
        this.emit(Web3ConfigEvent.CONFIG_CHANGE, {
          name: config,
          oldValue: this.config[config],
          newValue
        });
      }
    }
    var browserPonyfill = { exports: {} };
    (function(module2, exports2) {
      var __global__ = typeof globalThis !== "undefined" && globalThis || typeof self !== "undefined" && self || typeof commonjsGlobal !== "undefined" && commonjsGlobal;
      var __globalThis__ = function() {
        function F2() {
          this.fetch = false;
          this.DOMException = __global__.DOMException;
        }
        F2.prototype = __global__;
        return new F2();
      }();
      (function(globalThis2) {
        (function(exports3) {
          var global2 = typeof globalThis2 !== "undefined" && globalThis2 || typeof self !== "undefined" && self || typeof global2 !== "undefined" && global2;
          var support = {
            searchParams: "URLSearchParams" in global2,
            iterable: "Symbol" in global2 && "iterator" in Symbol,
            blob: "FileReader" in global2 && "Blob" in global2 && function() {
              try {
                new Blob();
                return true;
              } catch (e) {
                return false;
              }
            }(),
            formData: "FormData" in global2,
            arrayBuffer: "ArrayBuffer" in global2
          };
          function isDataView(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj);
          }
          if (support.arrayBuffer) {
            var viewClasses = [
              "[object Int8Array]",
              "[object Uint8Array]",
              "[object Uint8ClampedArray]",
              "[object Int16Array]",
              "[object Uint16Array]",
              "[object Int32Array]",
              "[object Uint32Array]",
              "[object Float32Array]",
              "[object Float64Array]"
            ];
            var isArrayBufferView = ArrayBuffer.isView || function(obj) {
              return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
            };
          }
          function normalizeName(name2) {
            if (typeof name2 !== "string") {
              name2 = String(name2);
            }
            if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name2) || name2 === "") {
              throw new TypeError('Invalid character in header field name: "' + name2 + '"');
            }
            return name2.toLowerCase();
          }
          function normalizeValue(value) {
            if (typeof value !== "string") {
              value = String(value);
            }
            return value;
          }
          function iteratorFor(items) {
            var iterator = {
              next: function() {
                var value = items.shift();
                return { done: value === void 0, value };
              }
            };
            if (support.iterable) {
              iterator[Symbol.iterator] = function() {
                return iterator;
              };
            }
            return iterator;
          }
          function Headers(headers) {
            this.map = {};
            if (headers instanceof Headers) {
              headers.forEach(function(value, name2) {
                this.append(name2, value);
              }, this);
            } else if (Array.isArray(headers)) {
              headers.forEach(function(header) {
                this.append(header[0], header[1]);
              }, this);
            } else if (headers) {
              Object.getOwnPropertyNames(headers).forEach(function(name2) {
                this.append(name2, headers[name2]);
              }, this);
            }
          }
          Headers.prototype.append = function(name2, value) {
            name2 = normalizeName(name2);
            value = normalizeValue(value);
            var oldValue = this.map[name2];
            this.map[name2] = oldValue ? oldValue + ", " + value : value;
          };
          Headers.prototype["delete"] = function(name2) {
            delete this.map[normalizeName(name2)];
          };
          Headers.prototype.get = function(name2) {
            name2 = normalizeName(name2);
            return this.has(name2) ? this.map[name2] : null;
          };
          Headers.prototype.has = function(name2) {
            return this.map.hasOwnProperty(normalizeName(name2));
          };
          Headers.prototype.set = function(name2, value) {
            this.map[normalizeName(name2)] = normalizeValue(value);
          };
          Headers.prototype.forEach = function(callback, thisArg) {
            for (var name2 in this.map) {
              if (this.map.hasOwnProperty(name2)) {
                callback.call(thisArg, this.map[name2], name2, this);
              }
            }
          };
          Headers.prototype.keys = function() {
            var items = [];
            this.forEach(function(value, name2) {
              items.push(name2);
            });
            return iteratorFor(items);
          };
          Headers.prototype.values = function() {
            var items = [];
            this.forEach(function(value) {
              items.push(value);
            });
            return iteratorFor(items);
          };
          Headers.prototype.entries = function() {
            var items = [];
            this.forEach(function(value, name2) {
              items.push([name2, value]);
            });
            return iteratorFor(items);
          };
          if (support.iterable) {
            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
          }
          function consumed(body) {
            if (body.bodyUsed) {
              return Promise.reject(new TypeError("Already read"));
            }
            body.bodyUsed = true;
          }
          function fileReaderReady(reader) {
            return new Promise(function(resolve, reject) {
              reader.onload = function() {
                resolve(reader.result);
              };
              reader.onerror = function() {
                reject(reader.error);
              };
            });
          }
          function readBlobAsArrayBuffer(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsArrayBuffer(blob);
            return promise;
          }
          function readBlobAsText(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsText(blob);
            return promise;
          }
          function readArrayBufferAsText(buf) {
            var view = new Uint8Array(buf);
            var chars = new Array(view.length);
            for (var i = 0; i < view.length; i++) {
              chars[i] = String.fromCharCode(view[i]);
            }
            return chars.join("");
          }
          function bufferClone(buf) {
            if (buf.slice) {
              return buf.slice(0);
            } else {
              var view = new Uint8Array(buf.byteLength);
              view.set(new Uint8Array(buf));
              return view.buffer;
            }
          }
          function Body() {
            this.bodyUsed = false;
            this._initBody = function(body) {
              this.bodyUsed = this.bodyUsed;
              this._bodyInit = body;
              if (!body) {
                this._bodyText = "";
              } else if (typeof body === "string") {
                this._bodyText = body;
              } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
              } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
              } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer);
                this._bodyInit = new Blob([this._bodyArrayBuffer]);
              } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                this._bodyArrayBuffer = bufferClone(body);
              } else {
                this._bodyText = body = Object.prototype.toString.call(body);
              }
              if (!this.headers.get("content-type")) {
                if (typeof body === "string") {
                  this.headers.set("content-type", "text/plain;charset=UTF-8");
                } else if (this._bodyBlob && this._bodyBlob.type) {
                  this.headers.set("content-type", this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                  this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8");
                }
              }
            };
            if (support.blob) {
              this.blob = function() {
                var rejected = consumed(this);
                if (rejected) {
                  return rejected;
                }
                if (this._bodyBlob) {
                  return Promise.resolve(this._bodyBlob);
                } else if (this._bodyArrayBuffer) {
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]));
                } else if (this._bodyFormData) {
                  throw new Error("could not read FormData body as blob");
                } else {
                  return Promise.resolve(new Blob([this._bodyText]));
                }
              };
              this.arrayBuffer = function() {
                if (this._bodyArrayBuffer) {
                  var isConsumed = consumed(this);
                  if (isConsumed) {
                    return isConsumed;
                  }
                  if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                    return Promise.resolve(
                      this._bodyArrayBuffer.buffer.slice(
                        this._bodyArrayBuffer.byteOffset,
                        this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                      )
                    );
                  } else {
                    return Promise.resolve(this._bodyArrayBuffer);
                  }
                } else {
                  return this.blob().then(readBlobAsArrayBuffer);
                }
              };
            }
            this.text = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected;
              }
              if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
              } else if (this._bodyFormData) {
                throw new Error("could not read FormData body as text");
              } else {
                return Promise.resolve(this._bodyText);
              }
            };
            if (support.formData) {
              this.formData = function() {
                return this.text().then(decode2);
              };
            }
            this.json = function() {
              return this.text().then(JSON.parse);
            };
            return this;
          }
          var methods = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
          function normalizeMethod(method) {
            var upcased = method.toUpperCase();
            return methods.indexOf(upcased) > -1 ? upcased : method;
          }
          function Request(input, options) {
            if (!(this instanceof Request)) {
              throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
            }
            options = options || {};
            var body = options.body;
            if (input instanceof Request) {
              if (input.bodyUsed) {
                throw new TypeError("Already read");
              }
              this.url = input.url;
              this.credentials = input.credentials;
              if (!options.headers) {
                this.headers = new Headers(input.headers);
              }
              this.method = input.method;
              this.mode = input.mode;
              this.signal = input.signal;
              if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
              }
            } else {
              this.url = String(input);
            }
            this.credentials = options.credentials || this.credentials || "same-origin";
            if (options.headers || !this.headers) {
              this.headers = new Headers(options.headers);
            }
            this.method = normalizeMethod(options.method || this.method || "GET");
            this.mode = options.mode || this.mode || null;
            this.signal = options.signal || this.signal;
            this.referrer = null;
            if ((this.method === "GET" || this.method === "HEAD") && body) {
              throw new TypeError("Body not allowed for GET or HEAD requests");
            }
            this._initBody(body);
            if (this.method === "GET" || this.method === "HEAD") {
              if (options.cache === "no-store" || options.cache === "no-cache") {
                var reParamSearch = /([?&])_=[^&]*/;
                if (reParamSearch.test(this.url)) {
                  this.url = this.url.replace(reParamSearch, "$1_=" + (/* @__PURE__ */ new Date()).getTime());
                } else {
                  var reQueryString = /\?/;
                  this.url += (reQueryString.test(this.url) ? "&" : "?") + "_=" + (/* @__PURE__ */ new Date()).getTime();
                }
              }
            }
          }
          Request.prototype.clone = function() {
            return new Request(this, { body: this._bodyInit });
          };
          function decode2(body) {
            var form = new FormData();
            body.trim().split("&").forEach(function(bytes2) {
              if (bytes2) {
                var split2 = bytes2.split("=");
                var name2 = split2.shift().replace(/\+/g, " ");
                var value = split2.join("=").replace(/\+/g, " ");
                form.append(decodeURIComponent(name2), decodeURIComponent(value));
              }
            });
            return form;
          }
          function parseHeaders(rawHeaders) {
            var headers = new Headers();
            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, " ");
            preProcessedHeaders.split("\r").map(function(header) {
              return header.indexOf("\n") === 0 ? header.substr(1, header.length) : header;
            }).forEach(function(line) {
              var parts = line.split(":");
              var key = parts.shift().trim();
              if (key) {
                var value = parts.join(":").trim();
                headers.append(key, value);
              }
            });
            return headers;
          }
          Body.call(Request.prototype);
          function Response(bodyInit, options) {
            if (!(this instanceof Response)) {
              throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
            }
            if (!options) {
              options = {};
            }
            this.type = "default";
            this.status = options.status === void 0 ? 200 : options.status;
            this.ok = this.status >= 200 && this.status < 300;
            this.statusText = options.statusText === void 0 ? "" : "" + options.statusText;
            this.headers = new Headers(options.headers);
            this.url = options.url || "";
            this._initBody(bodyInit);
          }
          Body.call(Response.prototype);
          Response.prototype.clone = function() {
            return new Response(this._bodyInit, {
              status: this.status,
              statusText: this.statusText,
              headers: new Headers(this.headers),
              url: this.url
            });
          };
          Response.error = function() {
            var response = new Response(null, { status: 0, statusText: "" });
            response.type = "error";
            return response;
          };
          var redirectStatuses = [301, 302, 303, 307, 308];
          Response.redirect = function(url, status) {
            if (redirectStatuses.indexOf(status) === -1) {
              throw new RangeError("Invalid status code");
            }
            return new Response(null, { status, headers: { location: url } });
          };
          exports3.DOMException = global2.DOMException;
          try {
            new exports3.DOMException();
          } catch (err) {
            exports3.DOMException = function(message, name2) {
              this.message = message;
              this.name = name2;
              var error = Error(message);
              this.stack = error.stack;
            };
            exports3.DOMException.prototype = Object.create(Error.prototype);
            exports3.DOMException.prototype.constructor = exports3.DOMException;
          }
          function fetch2(input, init2) {
            return new Promise(function(resolve, reject) {
              var request = new Request(input, init2);
              if (request.signal && request.signal.aborted) {
                return reject(new exports3.DOMException("Aborted", "AbortError"));
              }
              var xhr = new XMLHttpRequest();
              function abortXhr() {
                xhr.abort();
              }
              xhr.onload = function() {
                var options = {
                  status: xhr.status,
                  statusText: xhr.statusText,
                  headers: parseHeaders(xhr.getAllResponseHeaders() || "")
                };
                options.url = "responseURL" in xhr ? xhr.responseURL : options.headers.get("X-Request-URL");
                var body = "response" in xhr ? xhr.response : xhr.responseText;
                setTimeout(function() {
                  resolve(new Response(body, options));
                }, 0);
              };
              xhr.onerror = function() {
                setTimeout(function() {
                  reject(new TypeError("Network request failed"));
                }, 0);
              };
              xhr.ontimeout = function() {
                setTimeout(function() {
                  reject(new TypeError("Network request failed"));
                }, 0);
              };
              xhr.onabort = function() {
                setTimeout(function() {
                  reject(new exports3.DOMException("Aborted", "AbortError"));
                }, 0);
              };
              function fixUrl(url) {
                try {
                  return url === "" && global2.location.href ? global2.location.href : url;
                } catch (e) {
                  return url;
                }
              }
              xhr.open(request.method, fixUrl(request.url), true);
              if (request.credentials === "include") {
                xhr.withCredentials = true;
              } else if (request.credentials === "omit") {
                xhr.withCredentials = false;
              }
              if ("responseType" in xhr) {
                if (support.blob) {
                  xhr.responseType = "blob";
                } else if (support.arrayBuffer && request.headers.get("Content-Type") && request.headers.get("Content-Type").indexOf("application/octet-stream") !== -1) {
                  xhr.responseType = "arraybuffer";
                }
              }
              if (init2 && typeof init2.headers === "object" && !(init2.headers instanceof Headers)) {
                Object.getOwnPropertyNames(init2.headers).forEach(function(name2) {
                  xhr.setRequestHeader(name2, normalizeValue(init2.headers[name2]));
                });
              } else {
                request.headers.forEach(function(value, name2) {
                  xhr.setRequestHeader(name2, value);
                });
              }
              if (request.signal) {
                request.signal.addEventListener("abort", abortXhr);
                xhr.onreadystatechange = function() {
                  if (xhr.readyState === 4) {
                    request.signal.removeEventListener("abort", abortXhr);
                  }
                };
              }
              xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
            });
          }
          fetch2.polyfill = true;
          if (!global2.fetch) {
            global2.fetch = fetch2;
            global2.Headers = Headers;
            global2.Request = Request;
            global2.Response = Response;
          }
          exports3.Headers = Headers;
          exports3.Request = Request;
          exports3.Response = Response;
          exports3.fetch = fetch2;
          return exports3;
        })({});
      })(__globalThis__);
      __globalThis__.fetch.ponyfill = true;
      delete __globalThis__.fetch.polyfill;
      var ctx = __global__.fetch ? __global__ : __globalThis__;
      exports2 = ctx.fetch;
      exports2.default = ctx.fetch;
      exports2.fetch = ctx.fetch;
      exports2.Headers = ctx.Headers;
      exports2.Request = ctx.Request;
      exports2.Response = ctx.Response;
      module2.exports = exports2;
    })(browserPonyfill, browserPonyfill.exports);
    var browserPonyfillExports = browserPonyfill.exports;
    const fetch$1 = /* @__PURE__ */ getDefaultExportFromCjs(browserPonyfillExports);
    var __awaiter$B = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class HttpProvider extends Web3BaseProvider {
      constructor(clientUrl, httpProviderOptions) {
        super();
        if (!HttpProvider.validateClientUrl(clientUrl))
          throw new InvalidClientError(clientUrl);
        this.clientUrl = clientUrl;
        this.httpProviderOptions = httpProviderOptions;
      }
      static validateClientUrl(clientUrl) {
        return typeof clientUrl === "string" ? /^http(s)?:\/\//i.test(clientUrl) : false;
      }
      /* eslint-disable class-methods-use-this */
      getStatus() {
        throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      supportsSubscriptions() {
        return false;
      }
      request(payload, requestOptions) {
        var _a2;
        return __awaiter$B(this, void 0, void 0, function* () {
          const providerOptionsCombined = Object.assign(Object.assign({}, (_a2 = this.httpProviderOptions) === null || _a2 === void 0 ? void 0 : _a2.providerOptions), requestOptions);
          const response = yield fetch$1(this.clientUrl, Object.assign(Object.assign({}, providerOptionsCombined), { method: "POST", headers: Object.assign(Object.assign({}, providerOptionsCombined.headers), { "Content-Type": "application/json" }), body: JSON.stringify(payload) }));
          if (!response.ok) {
            throw new ResponseError(yield response.json(), void 0, void 0, response.status);
          }
          return yield response.json();
        });
      }
      /* eslint-disable class-methods-use-this */
      on() {
        throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      removeListener() {
        throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      once() {
        throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      removeAllListeners() {
        throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      connect() {
        throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      disconnect() {
        throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      reset() {
        throw new MethodNotImplementedError();
      }
      /* eslint-disable class-methods-use-this */
      reconnect() {
        throw new MethodNotImplementedError();
      }
    }
    var ws = null;
    if (typeof WebSocket !== "undefined") {
      ws = WebSocket;
    } else if (typeof MozWebSocket !== "undefined") {
      ws = MozWebSocket;
    } else if (typeof global !== "undefined") {
      ws = global.WebSocket || global.MozWebSocket;
    } else if (typeof window !== "undefined") {
      ws = window.WebSocket || window.MozWebSocket;
    } else if (typeof self !== "undefined") {
      ws = self.WebSocket || self.MozWebSocket;
    }
    const WebSocket$1 = ws;
    class WebSocketProvider extends SocketProvider {
      /**
       * This is a class used for Web Socket connections. It extends the abstract class SocketProvider {@link SocketProvider} that extends the EIP-1193 provider {@link EIP1193Provider}.
       * @param socketPath - The path to the Web Socket.
       * @param socketOptions - The options for the Web Socket client.
       * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}
       */
      // this constructor is to specify the type for `socketOptions` for a better intellisense.
      // eslint-disable-next-line no-useless-constructor
      constructor(socketPath, socketOptions, reconnectOptions) {
        super(socketPath, socketOptions, reconnectOptions);
      }
      // eslint-disable-next-line class-methods-use-this
      _validateProviderPath(providerUrl) {
        return typeof providerUrl === "string" ? /^ws(s)?:\/\//i.test(providerUrl) : false;
      }
      getStatus() {
        if (this._socketConnection && !isNullish(this._socketConnection)) {
          switch (this._socketConnection.readyState) {
            case this._socketConnection.CONNECTING: {
              return "connecting";
            }
            case this._socketConnection.OPEN: {
              return "connected";
            }
            default: {
              return "disconnected";
            }
          }
        }
        return "disconnected";
      }
      _openSocketConnection() {
        this._socketConnection = new WebSocket$1(this._socketPath, void 0, this._socketOptions && Object.keys(this._socketOptions).length === 0 ? void 0 : this._socketOptions);
      }
      _closeSocketConnection(code, data) {
        var _a2;
        (_a2 = this._socketConnection) === null || _a2 === void 0 ? void 0 : _a2.close(code, data);
      }
      _sendToSocket(payload) {
        var _a2;
        if (this.getStatus() === "disconnected") {
          throw new ConnectionNotOpenError();
        }
        (_a2 = this._socketConnection) === null || _a2 === void 0 ? void 0 : _a2.send(JSON.stringify(payload));
      }
      _parseResponses(event) {
        return this.chunkResponseParser.parseResponse(event.data);
      }
      _addSocketListeners() {
        var _a2, _b, _c, _d;
        (_a2 = this._socketConnection) === null || _a2 === void 0 ? void 0 : _a2.addEventListener("open", this._onOpenHandler);
        (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.addEventListener("message", this._onMessageHandler);
        (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.addEventListener("close", (e) => this._onCloseHandler(e));
        (_d = this._socketConnection) === null || _d === void 0 ? void 0 : _d.addEventListener("error", this._onErrorHandler);
      }
      _removeSocketListeners() {
        var _a2, _b, _c;
        (_a2 = this._socketConnection) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener("message", this._onMessageHandler);
        (_b = this._socketConnection) === null || _b === void 0 ? void 0 : _b.removeEventListener("open", this._onOpenHandler);
        (_c = this._socketConnection) === null || _c === void 0 ? void 0 : _c.removeEventListener("close", this._onCloseHandler);
      }
      _onCloseEvent(event) {
        var _a2;
        if (this._reconnectOptions.autoReconnect && (![1e3, 1001].includes(event.code) || !event.wasClean)) {
          this._reconnect();
          return;
        }
        this._clearQueues(event);
        this._removeSocketListeners();
        this._onDisconnect(event.code, event.reason);
        (_a2 = this._socketConnection) === null || _a2 === void 0 ? void 0 : _a2.removeEventListener("error", this._onErrorHandler);
      }
    }
    const isWeb3Provider = (provider) => Web3BaseProvider.isWeb3Provider(provider);
    const isLegacyRequestProvider = (provider) => typeof provider !== "string" && "request" in provider && provider.request.constructor.name === "Function";
    const isEIP1193Provider = (provider) => typeof provider !== "string" && "request" in provider && provider.request.constructor.name === "AsyncFunction";
    const isLegacySendProvider = (provider) => typeof provider !== "string" && "send" in provider;
    const isLegacySendAsyncProvider = (provider) => typeof provider !== "string" && "sendAsync" in provider;
    const isSupportedProvider = (provider) => provider && (isWeb3Provider(provider) || isEIP1193Provider(provider) || isLegacyRequestProvider(provider) || isLegacySendAsyncProvider(provider) || isLegacySendProvider(provider));
    const isSupportSubscriptions = (provider) => {
      if (provider && "supportsSubscriptions" in provider) {
        return provider.supportsSubscriptions();
      }
      if (provider && typeof provider !== "string" && "on" in provider) {
        return true;
      }
      return false;
    };
    var __awaiter$A = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var Web3RequestManagerEvent;
    (function(Web3RequestManagerEvent2) {
      Web3RequestManagerEvent2["PROVIDER_CHANGED"] = "PROVIDER_CHANGED";
      Web3RequestManagerEvent2["BEFORE_PROVIDER_CHANGE"] = "BEFORE_PROVIDER_CHANGE";
    })(Web3RequestManagerEvent || (Web3RequestManagerEvent = {}));
    const availableProviders = {
      HttpProvider,
      WebsocketProvider: WebSocketProvider
    };
    class Web3RequestManager extends Web3EventEmitter {
      constructor(provider, useRpcCallSpecification, requestManagerMiddleware) {
        super();
        if (!isNullish(provider)) {
          this.setProvider(provider);
        }
        this.useRpcCallSpecification = useRpcCallSpecification;
        if (!isNullish(requestManagerMiddleware))
          this.middleware = requestManagerMiddleware;
      }
      /**
       * Will return all available providers
       */
      static get providers() {
        return availableProviders;
      }
      /**
       * Will return the current provider.
       *
       * @returns Returns the current provider
       */
      get provider() {
        return this._provider;
      }
      /**
       * Will return all available providers
       */
      // eslint-disable-next-line class-methods-use-this
      get providers() {
        return availableProviders;
      }
      /**
       * Use to set provider. Provider can be a provider instance or a string.
       *
       * @param provider - The provider to set
       */
      setProvider(provider) {
        let newProvider;
        if (provider && typeof provider === "string" && this.providers) {
          if (/^http(s)?:\/\//i.test(provider)) {
            newProvider = new this.providers.HttpProvider(provider);
          } else if (/^ws(s)?:\/\//i.test(provider)) {
            newProvider = new this.providers.WebsocketProvider(provider);
          } else {
            throw new ProviderError(`Can't autodetect provider for "${provider}"`);
          }
        } else if (isNullish(provider)) {
          newProvider = void 0;
        } else {
          newProvider = provider;
        }
        this.emit(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, this._provider);
        this._provider = newProvider;
        this.emit(Web3RequestManagerEvent.PROVIDER_CHANGED, this._provider);
        return true;
      }
      setMiddleware(requestManagerMiddleware) {
        this.middleware = requestManagerMiddleware;
      }
      /**
       *
       * Will execute a request
       *
       * @param request - {@link Web3APIRequest} The request to send
       *
       * @returns The response of the request {@link ResponseType}. If there is error
       * in the response, will throw an error
       */
      send(request) {
        return __awaiter$A(this, void 0, void 0, function* () {
          const requestObj = Object.assign({}, request);
          let response = yield this._sendRequest(requestObj);
          if (!isNullish(this.middleware))
            response = yield this.middleware.processResponse(response);
          if (isResponseWithResult(response)) {
            return response.result;
          }
          throw new ResponseError(response);
        });
      }
      /**
       * Same as send, but, will execute a batch of requests
       *
       * @param request {@link JsonRpcBatchRequest} The batch request to send
       */
      sendBatch(request) {
        return __awaiter$A(this, void 0, void 0, function* () {
          const response = yield this._sendRequest(request);
          return response;
        });
      }
      _sendRequest(request) {
        return __awaiter$A(this, void 0, void 0, function* () {
          const { provider } = this;
          if (isNullish(provider)) {
            throw new ProviderError("Provider not available. Use `.setProvider` or `.provider=` to initialize the provider.");
          }
          let payload = isBatchRequest(request) ? toBatchPayload(request) : toPayload(request);
          if (!isNullish(this.middleware)) {
            payload = yield this.middleware.processRequest(payload);
          }
          if (isWeb3Provider(provider)) {
            let response;
            try {
              response = yield provider.request(payload);
            } catch (error) {
              response = error;
            }
            return this._processJsonRpcResponse(payload, response, { legacy: false, error: false });
          }
          if (isEIP1193Provider(provider)) {
            return provider.request(payload).then((res) => this._processJsonRpcResponse(payload, res, {
              legacy: true,
              error: false
            })).catch((error) => this._processJsonRpcResponse(payload, error, { legacy: true, error: true }));
          }
          if (isLegacyRequestProvider(provider)) {
            return new Promise((resolve, reject) => {
              const rejectWithError = (err) => {
                reject(this._processJsonRpcResponse(payload, err, {
                  legacy: true,
                  error: true
                }));
              };
              const resolveWithResponse = (response) => resolve(this._processJsonRpcResponse(payload, response, {
                legacy: true,
                error: false
              }));
              const result = provider.request(
                payload,
                // a callback that is expected to be called after getting the response:
                (err, response) => {
                  if (err) {
                    return rejectWithError(err);
                  }
                  return resolveWithResponse(response);
                }
              );
              if (isPromise(result)) {
                const responsePromise = result;
                responsePromise.then(resolveWithResponse).catch((error) => {
                  try {
                    const processedError = this._processJsonRpcResponse(payload, error, { legacy: true, error: true });
                    reject(processedError);
                  } catch (processingError) {
                    reject(processingError);
                  }
                });
              }
            });
          }
          if (isLegacySendProvider(provider)) {
            return new Promise((resolve, reject) => {
              provider.send(payload, (err, response) => {
                if (err) {
                  return reject(this._processJsonRpcResponse(payload, err, {
                    legacy: true,
                    error: true
                  }));
                }
                if (isNullish(response)) {
                  throw new ResponseError({}, 'Got a "nullish" response from provider.');
                }
                return resolve(this._processJsonRpcResponse(payload, response, {
                  legacy: true,
                  error: false
                }));
              });
            });
          }
          if (isLegacySendAsyncProvider(provider)) {
            return provider.sendAsync(payload).then((response) => this._processJsonRpcResponse(payload, response, { legacy: true, error: false })).catch((error) => this._processJsonRpcResponse(payload, error, {
              legacy: true,
              error: true
            }));
          }
          throw new ProviderError("Provider does not have a request or send method to use.");
        });
      }
      // eslint-disable-next-line class-methods-use-this
      _processJsonRpcResponse(payload, response, { legacy, error }) {
        if (isNullish(response)) {
          return this._buildResponse(
            payload,
            // Some providers uses "null" as valid empty response
            // eslint-disable-next-line no-null/no-null
            null,
            error
          );
        }
        if (isResponseWithError(response)) {
          if (this.useRpcCallSpecification && isResponseRpcError(response)) {
            const rpcErrorResponse = response;
            if (rpcErrorsMap.get(rpcErrorResponse.error.code)) {
              const Err = rpcErrorsMap.get(rpcErrorResponse.error.code).error;
              throw new Err(rpcErrorResponse);
            } else {
              throw new RpcError(rpcErrorResponse);
            }
          } else if (!Web3RequestManager._isReverted(response)) {
            throw new InvalidResponseError(response, payload);
          }
        }
        if (isResponseWithResult(response)) {
          return response;
        }
        if (response instanceof Error) {
          Web3RequestManager._isReverted(response);
          throw response;
        }
        if (!legacy && isBatchRequest(payload) && isBatchResponse(response)) {
          return response;
        }
        if (legacy && !error && isBatchRequest(payload)) {
          return response;
        }
        if (legacy && error && isBatchRequest(payload)) {
          throw response;
        }
        if (legacy && !isResponseWithError(response) && !isResponseWithResult(response)) {
          return this._buildResponse(payload, response, error);
        }
        if (isBatchRequest(payload) && !Array.isArray(response)) {
          throw new ResponseError(response, "Got normal response for a batch request.");
        }
        if (!isBatchRequest(payload) && Array.isArray(response)) {
          throw new ResponseError(response, "Got batch response for a normal request.");
        }
        throw new ResponseError(response, "Invalid response");
      }
      static _isReverted(response) {
        let error;
        if (isResponseWithError(response)) {
          error = response.error;
        } else if (response instanceof Error) {
          error = response;
        }
        if (error === null || error === void 0 ? void 0 : error.message.includes("revert"))
          throw new ContractExecutionError(error);
        return false;
      }
      // Need to use same types as _processJsonRpcResponse so have to declare as instance method
      // eslint-disable-next-line class-methods-use-this
      _buildResponse(payload, response, error) {
        const res = {
          jsonrpc: "2.0",
          // eslint-disable-next-line no-nested-ternary
          id: isBatchRequest(payload) ? payload[0].id : "id" in payload ? payload.id : (
            // Have to use the null here explicitly
            // eslint-disable-next-line no-null/no-null
            null
          )
        };
        if (error) {
          return Object.assign(Object.assign({}, res), { error: response });
        }
        return Object.assign(Object.assign({}, res), { result: response });
      }
    }
    var __awaiter$z = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class Web3SubscriptionManager {
      constructor(requestManager, registeredSubscriptions2, tolerateUnlinkedSubscription = false) {
        this.requestManager = requestManager;
        this.registeredSubscriptions = registeredSubscriptions2;
        this.tolerateUnlinkedSubscription = tolerateUnlinkedSubscription;
        this._subscriptions = /* @__PURE__ */ new Map();
        this.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, () => __awaiter$z(this, void 0, void 0, function* () {
          yield this.unsubscribe();
        }));
        this.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {
          this.clear();
          this.listenToProviderEvents();
        });
        this.listenToProviderEvents();
      }
      listenToProviderEvents() {
        const providerAsWebProvider = this.requestManager.provider;
        if (!this.requestManager.provider || typeof (providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions) === "function" && !(providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions())) {
          return;
        }
        if (typeof this.requestManager.provider.on === "function") {
          if (typeof this.requestManager.provider.request === "function") {
            this.requestManager.provider.on(
              "message",
              // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument
              (message) => this.messageListener(message)
            );
          } else {
            providerAsWebProvider.on("data", (data) => this.messageListener(data));
          }
        }
      }
      messageListener(data) {
        var _a2, _b, _c;
        if (!data) {
          throw new SubscriptionError("Should not call messageListener with no data. Type was");
        }
        const subscriptionId = ((_a2 = data.params) === null || _a2 === void 0 ? void 0 : _a2.subscription) || ((_b = data.data) === null || _b === void 0 ? void 0 : _b.subscription) || ((_c = data.id) === null || _c === void 0 ? void 0 : _c.toString(16));
        if (subscriptionId) {
          const sub = this._subscriptions.get(subscriptionId);
          sub === null || sub === void 0 ? void 0 : sub.processSubscriptionData(data);
        }
      }
      /**
       * Will create a new subscription
       *
       * @param name - The subscription you want to subscribe to
       * @param args - Optional additional parameters, depending on the subscription type
       * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       *
       * Will subscribe to a specific topic (note: name)
       * @returns The subscription object
       */
      subscribe(name2, args, returnFormat = DEFAULT_RETURN_FORMAT) {
        return __awaiter$z(this, void 0, void 0, function* () {
          const Klass = this.registeredSubscriptions[name2];
          if (!Klass) {
            throw new SubscriptionError("Invalid subscription type");
          }
          const subscription = new Klass(args !== null && args !== void 0 ? args : void 0, {
            subscriptionManager: this,
            returnFormat
          });
          yield this.addSubscription(subscription);
          return subscription;
        });
      }
      /**
       * Will returns all subscriptions.
       */
      get subscriptions() {
        return this._subscriptions;
      }
      /**
       *
       * Adds an instance of {@link Web3Subscription} and subscribes to it
       *
       * @param sub - A {@link Web3Subscription} object
       */
      addSubscription(sub) {
        return __awaiter$z(this, void 0, void 0, function* () {
          if (!this.requestManager.provider) {
            throw new ProviderError("Provider not available");
          }
          if (!this.supportsSubscriptions()) {
            throw new SubscriptionError("The current provider does not support subscriptions");
          }
          if (sub.id && this._subscriptions.has(sub.id)) {
            throw new SubscriptionError(`Subscription with id "${sub.id}" already exists`);
          }
          yield sub.sendSubscriptionRequest();
          if (isNullish(sub.id)) {
            throw new SubscriptionError("Subscription is not subscribed yet.");
          }
          this._subscriptions.set(sub.id, sub);
          return sub.id;
        });
      }
      /**
       * Will clear a subscription
       *
       * @param id - The subscription of type {@link Web3Subscription}  to remove
       */
      removeSubscription(sub) {
        return __awaiter$z(this, void 0, void 0, function* () {
          const { id: id2 } = sub;
          if (isNullish(id2)) {
            throw new SubscriptionError("Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.");
          }
          if (!this._subscriptions.has(id2) && !this.tolerateUnlinkedSubscription) {
            throw new SubscriptionError(`Subscription with id "${id2.toString()}" does not exists`);
          }
          yield sub.sendUnsubscribeRequest();
          this._subscriptions.delete(id2);
          return id2;
        });
      }
      /**
       * Will unsubscribe all subscriptions that fulfill the condition
       *
       * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`
       * @returns An array of all the un-subscribed subscriptions
       */
      unsubscribe(condition) {
        return __awaiter$z(this, void 0, void 0, function* () {
          const result = [];
          for (const [id2, sub] of this.subscriptions.entries()) {
            if (!condition || typeof condition === "function" && condition({ id: id2, sub })) {
              result.push(this.removeSubscription(sub));
            }
          }
          return Promise.all(result);
        });
      }
      /**
       * Clears all subscriptions
       */
      clear() {
        this._subscriptions.clear();
      }
      /**
       * Check whether the current provider supports subscriptions.
       *
       * @returns `true` or `false` depending on if the current provider supports subscriptions
       */
      supportsSubscriptions() {
        return isNullish(this.requestManager.provider) ? false : isSupportSubscriptions(this.requestManager.provider);
      }
    }
    var __awaiter$y = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class Web3Subscription extends Web3EventEmitter {
      constructor(args, options) {
        var _a2;
        super();
        this.args = args;
        const { requestManager } = options;
        const { subscriptionManager } = options;
        if (requestManager) {
          this._subscriptionManager = new Web3SubscriptionManager(requestManager, {}, true);
        } else {
          this._subscriptionManager = subscriptionManager;
        }
        this._returnFormat = (_a2 = options === null || options === void 0 ? void 0 : options.returnFormat) !== null && _a2 !== void 0 ? _a2 : DEFAULT_RETURN_FORMAT;
      }
      get id() {
        return this._id;
      }
      get lastBlock() {
        return this._lastBlock;
      }
      subscribe() {
        return __awaiter$y(this, void 0, void 0, function* () {
          return this._subscriptionManager.addSubscription(this);
        });
      }
      processSubscriptionData(data) {
        var _a2, _b;
        if (data === null || data === void 0 ? void 0 : data.data) {
          this._processSubscriptionResult((_b = (_a2 = data === null || data === void 0 ? void 0 : data.data) === null || _a2 === void 0 ? void 0 : _a2.result) !== null && _b !== void 0 ? _b : data === null || data === void 0 ? void 0 : data.data);
        } else if (data && isResponseWithNotification(data)) {
          this._processSubscriptionResult(data === null || data === void 0 ? void 0 : data.params.result);
        }
      }
      sendSubscriptionRequest() {
        return __awaiter$y(this, void 0, void 0, function* () {
          this._id = yield this._subscriptionManager.requestManager.send({
            method: "eth_subscribe",
            params: this._buildSubscriptionParams()
          });
          this.emit("connected", this._id);
          return this._id;
        });
      }
      get returnFormat() {
        return this._returnFormat;
      }
      get subscriptionManager() {
        return this._subscriptionManager;
      }
      resubscribe() {
        return __awaiter$y(this, void 0, void 0, function* () {
          yield this.unsubscribe();
          yield this.subscribe();
        });
      }
      unsubscribe() {
        return __awaiter$y(this, void 0, void 0, function* () {
          if (!this.id) {
            return;
          }
          yield this._subscriptionManager.removeSubscription(this);
        });
      }
      sendUnsubscribeRequest() {
        return __awaiter$y(this, void 0, void 0, function* () {
          yield this._subscriptionManager.requestManager.send({
            method: "eth_unsubscribe",
            params: [this.id]
          });
          this._id = void 0;
        });
      }
      // eslint-disable-next-line class-methods-use-this
      formatSubscriptionResult(data) {
        return data;
      }
      _processSubscriptionResult(data) {
        this.emit("data", this.formatSubscriptionResult(data));
      }
      _processSubscriptionError(error) {
        this.emit("error", error);
      }
      // eslint-disable-next-line class-methods-use-this
      _buildSubscriptionParams() {
        throw new Error("Implement in the child class");
      }
    }
    var __awaiter$x = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class Wallet extends Web3BaseWallet {
      constructor() {
        super(...arguments);
        this._addressMap = /* @__PURE__ */ new Map();
        this._defaultKeyName = "web3js_wallet";
      }
      /**
       * Get the storage object of the browser
       *
       * @returns the storage
       */
      static getStorage() {
        let storage;
        try {
          storage = window.localStorage;
          const x2 = "__storage_test__";
          storage.setItem(x2, x2);
          storage.removeItem(x2);
          return storage;
        } catch (e) {
          return e && // everything except Firefox
          (e.code === 22 || // Firefox
          e.code === 1014 || // test name field too, because code might not be present
          // everything except Firefox
          e.name === "QuotaExceededError" || // Firefox
          e.name === "NS_ERROR_DOM_QUOTA_REACHED") && // acknowledge QuotaExceededError only if there's something already stored
          !isNullish$1(storage) && storage.length !== 0 ? storage : void 0;
        }
      }
      /**
       * Generates one or more accounts in the wallet. If wallets already exist they will not be overridden.
       *
       * @param numberOfAccounts - Number of accounts to create. Leave empty to create an empty wallet.
       * @returns The wallet
       * ```ts
       * web3.eth.accounts.wallet.create(2)
       * > Wallet(2) [
       *   {
       *     address: '0xde38310a42B751AE57d30cFFF4a0A3c52A442fCE',
       *     privateKey: '0x6422c9d28efdcbee93c1d32a5fc6fd6fa081b985487885296cf8c9bbb5872600',
       *     signTransaction: [Function: signTransaction],
       *     sign: [Function: sign],
       *     encrypt: [Function: encrypt]
       *   },
       *   {
       *     address: '0x766BF755246d924B1d017Fdb5390f38a60166691',
       *     privateKey: '0x756530f13c0eb636ebdda655335f5dea9921e3362e2e588b0ad59e556f7751f0',
       *     signTransaction: [Function: signTransaction],
       *     sign: [Function: sign],
       *     encrypt: [Function: encrypt]
       *   },
       *   _accountProvider: {
       *     create: [Function: create],
       *     privateKeyToAccount: [Function: privateKeyToAccount],
       *     decrypt: [Function: decrypt]
       *   },
       *   _addressMap: Map(2) {
       *     '0xde38310a42b751ae57d30cfff4a0a3c52a442fce' => 0,
       *     '0x766bf755246d924b1d017fdb5390f38a60166691' => 1
       *   },
       *   _defaultKeyName: 'web3js_wallet'
       * ]
       *
       * ```
       */
      create(numberOfAccounts) {
        for (let i = 0; i < numberOfAccounts; i += 1) {
          this.add(this._accountProvider.create());
        }
        return this;
      }
      /**
       * Adds an account using a private key or account object to the wallet.
       *
       * @param account - A private key or account object
       * @returns The wallet
       *
       * ```ts
       * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');
       * > Wallet(1) [
       *   {
       *     address: '0x85D70633b90e03e0276B98880286D0D055685ed7',
       *     privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',
       *     signTransaction: [Function: signTransaction],
       *     sign: [Function: sign],
       *     encrypt: [Function: encrypt]
       *   },
       *   _accountProvider: {
       *     create: [Function: create],
       *     privateKeyToAccount: [Function: privateKeyToAccount],
       *     decrypt: [Function: decrypt]
       *   },
       *   _addressMap: Map(1) { '0x85d70633b90e03e0276b98880286d0d055685ed7' => 0 },
       *   _defaultKeyName: 'web3js_wallet'
       * ]
       * ```
       */
      add(account) {
        var _a2;
        if (typeof account === "string") {
          return this.add(this._accountProvider.privateKeyToAccount(account));
        }
        let index = this.length;
        const existAccount = this.get(account.address);
        if (existAccount) {
          console.warn(`Account ${account.address.toLowerCase()} already exists.`);
          index = (_a2 = this._addressMap.get(account.address.toLowerCase())) !== null && _a2 !== void 0 ? _a2 : index;
        }
        this._addressMap.set(account.address.toLowerCase(), index);
        this[index] = account;
        return this;
      }
      /**
       * Get the account of the wallet with either the index or public address.
       *
       * @param addressOrIndex - A string of the address or number index within the wallet.
       * @returns The account object or undefined if the account doesn't exist
       */
      get(addressOrIndex) {
        if (typeof addressOrIndex === "string") {
          const index = this._addressMap.get(addressOrIndex.toLowerCase());
          if (!isNullish$1(index)) {
            return this[index];
          }
          return void 0;
        }
        return this[addressOrIndex];
      }
      /**
       * Removes an account from the wallet.
       *
       * @param addressOrIndex - The account address, or index in the wallet.
       * @returns true if the wallet was removed. false if it couldn't be found.
       * ```ts
       * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');
       *
       * web3.eth.accounts.wallet.remove('0x85D70633b90e03e0276B98880286D0D055685ed7');
       * > true
       * web3.eth.accounts.wallet
       * > Wallet(0) [
       * _accountProvider: {
       *   create: [Function: create],
       *   privateKeyToAccount: [Function: privateKeyToAccount],
       *   decrypt: [Function: decrypt]
       * },
       * _addressMap: Map(0) {},
       * _defaultKeyName: 'web3js_wallet'
       * ]
       * ```
       */
      remove(addressOrIndex) {
        if (typeof addressOrIndex === "string") {
          const index = this._addressMap.get(addressOrIndex.toLowerCase());
          if (isNullish$1(index)) {
            return false;
          }
          this._addressMap.delete(addressOrIndex.toLowerCase());
          this.splice(index, 1);
          return true;
        }
        if (this[addressOrIndex]) {
          this.splice(addressOrIndex, 1);
          return true;
        }
        return false;
      }
      /**
       * Securely empties the wallet and removes all its accounts.
       * Use this with *caution as it will remove all accounts stored in local wallet.
       *
       * @returns The wallet object
       * ```ts
       *
       * web3.eth.accounts.wallet.clear();
       * > Wallet(0) [
       * _accountProvider: {
       *   create: [Function: create],
       *   privateKeyToAccount: [Function: privateKeyToAccount],
       *   decrypt: [Function: decrypt]
       * },
       * _addressMap: Map(0) {},
       * _defaultKeyName: 'web3js_wallet'
       * ]
       * ```
       */
      clear() {
        this._addressMap.clear();
        this.length = 0;
        return this;
      }
      /**
       * Encrypts all wallet accounts to an array of encrypted keystore v3 objects.
       *
       * @param password - The password which will be used for encryption
       * @param options - encryption options
       * @returns An array of the encrypted keystore v3.
       *
       * ```ts
       * web3.eth.accounts.wallet.create(1)
       * web3.eth.accounts.wallet.encrypt("abc").then(console.log);
       * > [
       * '{"version":3,"id":"fa46e213-a7c3-4844-b903-dd14d39cc7db",
       * "address":"fa3e41a401609103c241431cbdee8623ae2a321a","crypto":
       * {"ciphertext":"8d179a911d6146ad2924e86bf493ed89b8ff3596ffec0816e761c542016ab13c",
       * "cipherparams":{"iv":"acc888c6cf4a19b86846cef0185a7164"},"cipher":"aes-128-ctr",
       * "kdf":"scrypt","kdfparams":{"n":8192,"r":8,"p":1,"dklen":32,"salt":"6a743c9b367d15f4758e4f3f3378ff0fd443708d1c64854e07588ea5331823ae"},
       * "mac":"410544c8307e3691fda305eb3722d82c3431f212a87daa119a21587d96698b57"}}'
       * ]
       * ```
       */
      encrypt(password, options) {
        return __awaiter$x(this, void 0, void 0, function* () {
          return Promise.all(this.map((account) => __awaiter$x(this, void 0, void 0, function* () {
            return account.encrypt(password, options);
          })));
        });
      }
      /**
       * Decrypts keystore v3 objects.
       *
       * @param encryptedWallets - An array of encrypted keystore v3 objects to decrypt
       * @param password - The password to encrypt with
       * @param options - decrypt options for the wallets
       * @returns The decrypted wallet object
       *
       * ```ts
       * web3.eth.accounts.wallet.decrypt([
       * { version: 3,
       * id: '83191a81-aaca-451f-b63d-0c5f3b849289',
       * address: '06f702337909c06c82b09b7a22f0a2f0855d1f68',
       * crypto:
       * { ciphertext: '7d34deae112841fba86e3e6cf08f5398dda323a8e4d29332621534e2c4069e8d',
       *   cipherparams: { iv: '497f4d26997a84d570778eae874b2333' },
       *   cipher: 'aes-128-ctr',
       *   kdf: 'scrypt',
       *   kdfparams:
       *    { dklen: 32,
       *      salt: '208dd732a27aa4803bb760228dff18515d5313fd085bbce60594a3919ae2d88d',
       *      n: 262144,
       *      r: 8,
       *      p: 1 },
       *   mac: '0062a853de302513c57bfe3108ab493733034bf3cb313326f42cf26ea2619cf9' } },
       * { version: 3,
       * id: '7d6b91fa-3611-407b-b16b-396efb28f97e',
       * address: 'b5d89661b59a9af0b34f58d19138baa2de48baaf',
       * crypto:
       * { ciphertext: 'cb9712d1982ff89f571fa5dbef447f14b7e5f142232bd2a913aac833730eeb43',
       *   cipherparams: { iv: '8cccb91cb84e435437f7282ec2ffd2db' },
       *   cipher: 'aes-128-ctr',
       *   kdf: 'scrypt',
       *   kdfparams:
       *    { dklen: 32,
       *      salt: '08ba6736363c5586434cd5b895e6fe41ea7db4785bd9b901dedce77a1514e8b8',
       *      n: 262144,
       *      r: 8,
       *      p: 1 },
       *   mac: 'd2eb068b37e2df55f56fa97a2bf4f55e072bef0dd703bfd917717d9dc54510f0' } }
       * ], 'test').then(console.log)
       * > Wallet {
       *   _accountProvider: {
       *     create: [Function: create],
       *     privateKeyToAccount: [Function: privateKeyToAccount],
       *     decrypt: [Function: decrypt]
       *   },
       *   _defaultKeyName: 'web3js_wallet',
       *   _accounts: {
       *     '0x85d70633b90e03e0276b98880286d0d055685ed7': {
       *       address: '0x85D70633b90e03e0276B98880286D0D055685ed7',
       *       privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',
       *       signTransaction: [Function: signTransaction],
       *       sign: [Function: sign],
       *       encrypt: [Function: encrypt]
       *     },
       *     '0x06f702337909c06c82b09b7a22f0a2f0855d1f68': {
       *       address: '0x06F702337909C06C82B09B7A22F0a2f0855d1F68',
       *       privateKey: '87a51da18900da7398b3bab03996833138f269f8f66dd1237b98df6b9ce14573',
       *       signTransaction: [Function: signTransaction],
       *       sign: [Function: sign],
       *       encrypt: [Function: encrypt]
       *     },
       *     '0xb5d89661b59a9af0b34f58d19138baa2de48baaf': {
       *       address: '0xB5d89661B59a9aF0b34f58D19138bAa2de48BAaf',
       *       privateKey: '7ee61c5282979aae9dd795bb6a54e8bdc2bfe009acb64eb9a67322eec3b3da6e',
       *       signTransaction: [Function: signTransaction],
       *       sign: [Function: sign],
       *       encrypt: [Function: encrypt]
       *     }
       *   }
       * }
       * ```
       */
      decrypt(encryptedWallets, password, options) {
        return __awaiter$x(this, void 0, void 0, function* () {
          const results = yield Promise.all(encryptedWallets.map((wallet) => __awaiter$x(this, void 0, void 0, function* () {
            return this._accountProvider.decrypt(wallet, password, options);
          })));
          for (const res of results) {
            this.add(res);
          }
          return this;
        });
      }
      /**
       * Stores the wallet encrypted and as string in local storage.
       * **__NOTE:__** Browser only
       *
       * @param password - The password to encrypt the wallet
       * @param keyName - (optional) The key used for the local storage position, defaults to `"web3js_wallet"`.
       * @returns Will return boolean value true if saved properly
       * ```ts
       * web3.eth.accounts.wallet.save('test#!$');
       * >true
       * ```
       */
      save(password, keyName) {
        return __awaiter$x(this, void 0, void 0, function* () {
          const storage = Wallet.getStorage();
          if (!storage) {
            throw new Error("Local storage not available.");
          }
          storage.setItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName, JSON.stringify(yield this.encrypt(password)));
          return true;
        });
      }
      /**
       * Loads a wallet from local storage and decrypts it.
       * **__NOTE:__** Browser only
       *
       * @param password - The password to decrypt the wallet.
       * @param keyName - (optional)The key used for local storage position, defaults to `web3js_wallet"`
       * @returns Returns the wallet object
       *
       * ```ts
       * web3.eth.accounts.wallet.save('test#!$');
       * > true
       * web3.eth.accounts.wallet.load('test#!$');
       * { defaultKeyName: "web3js_wallet",
       *   length: 0,
       *   _accounts: Accounts {_requestManager: RequestManager, givenProvider: Proxy, providers: {…}, _provider: WebsocketProvider, …},
       *   [[Prototype]]: Object
       * }
       * ```
       */
      load(password, keyName) {
        return __awaiter$x(this, void 0, void 0, function* () {
          const storage = Wallet.getStorage();
          if (!storage) {
            throw new Error("Local storage not available.");
          }
          const keystore = storage.getItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName);
          if (keystore) {
            yield this.decrypt(JSON.parse(keystore) || [], password);
          }
          return this;
        });
      }
    }
    const crypto = { web: crypto$1 };
    function validateOpt(key, iv, mode) {
      if (!mode.startsWith("aes-")) {
        throw new Error(`AES submodule doesn't support mode ${mode}`);
      }
      if (iv.length !== 16) {
        throw new Error("AES: wrong IV length");
      }
      if (mode.startsWith("aes-128") && key.length !== 16 || mode.startsWith("aes-256") && key.length !== 32) {
        throw new Error("AES: wrong key length");
      }
    }
    async function getBrowserKey(mode, key, iv) {
      if (!crypto.web) {
        throw new Error("Browser crypto not available.");
      }
      let keyMode;
      if (["aes-128-cbc", "aes-256-cbc"].includes(mode)) {
        keyMode = "cbc";
      }
      if (["aes-128-ctr", "aes-256-ctr"].includes(mode)) {
        keyMode = "ctr";
      }
      if (!keyMode) {
        throw new Error("AES: unsupported mode");
      }
      const wKey = await crypto.web.subtle.importKey("raw", key, { name: `AES-${keyMode.toUpperCase()}`, length: key.length * 8 }, true, ["encrypt", "decrypt"]);
      return [wKey, { name: `aes-${keyMode}`, iv, counter: iv, length: 128 }];
    }
    async function encrypt$1(msg, key, iv, mode = "aes-128-ctr", pkcs7PaddingEnabled = true) {
      validateOpt(key, iv, mode);
      if (crypto.web) {
        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);
        const cipher = await crypto.web.subtle.encrypt(wOpt, wKey, msg);
        let res = new Uint8Array(cipher);
        if (!pkcs7PaddingEnabled && wOpt.name === "aes-cbc" && !(msg.length % 16)) {
          res = res.slice(0, -16);
        }
        return res;
      } else if (crypto.node) {
        const cipher = crypto.node.createCipheriv(mode, key, iv);
        cipher.setAutoPadding(pkcs7PaddingEnabled);
        return concatBytes$2(cipher.update(msg), cipher.final());
      } else {
        throw new Error("The environment doesn't have AES module");
      }
    }
    async function getPadding(cypherText, key, iv, mode) {
      const lastBlock = cypherText.slice(-16);
      for (let i = 0; i < 16; i++) {
        lastBlock[i] ^= iv[i] ^ 16;
      }
      const res = await encrypt$1(lastBlock, key, iv, mode);
      return res.slice(0, 16);
    }
    async function decrypt$1(cypherText, key, iv, mode = "aes-128-ctr", pkcs7PaddingEnabled = true) {
      validateOpt(key, iv, mode);
      if (crypto.web) {
        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);
        if (!pkcs7PaddingEnabled && wOpt.name === "aes-cbc") {
          const padding = await getPadding(cypherText, key, iv, mode);
          cypherText = concatBytes$2(cypherText, padding);
        }
        const msg = await crypto.web.subtle.decrypt(wOpt, wKey, cypherText);
        const msgBytes = new Uint8Array(msg);
        if (wOpt.name === "aes-cbc") {
          const encrypted = await encrypt$1(msgBytes, key, iv, mode);
          if (!equalsBytes(encrypted, cypherText)) {
            throw new Error("AES: wrong padding");
          }
        }
        return msgBytes;
      } else if (crypto.node) {
        const decipher = crypto.node.createDecipheriv(mode, key, iv);
        decipher.setAutoPadding(pkcs7PaddingEnabled);
        return concatBytes$2(decipher.update(cypherText), decipher.final());
      } else {
        throw new Error("The environment doesn't have AES module");
      }
    }
    class HMAC extends Hash {
      constructor(hash$1, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        hash(hash$1);
        const key = toBytes$1(_key);
        this.iHash = hash$1.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash$1.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash$1.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        exists(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        exists(this);
        bytes(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    }
    const hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
    hmac.create = (hash2, key) => new HMAC(hash2, key);
    function pbkdf2Init(hash$1, _password, _salt, _opts) {
      hash(hash$1);
      const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
      const { c, dkLen, asyncTick } = opts;
      number(c);
      number(dkLen);
      number(asyncTick);
      if (c < 1)
        throw new Error("PBKDF2: iterations (c) should be >= 1");
      const password = toBytes$1(_password);
      const salt = toBytes$1(_salt);
      const DK = new Uint8Array(dkLen);
      const PRF = hmac.create(hash$1, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
    }
    function pbkdf2Output(PRF, PRFSalt, DK, prfW, u2) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW)
        prfW.destroy();
      u2.fill(0);
      return DK;
    }
    function pbkdf2(hash2, password, salt, opts) {
      const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = createView(arr);
      const u2 = new Uint8Array(PRF.outputLen);
      for (let ti2 = 1, pos = 0; pos < dkLen; ti2++, pos += PRF.outputLen) {
        const Ti2 = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti2, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u2);
        Ti2.set(u2.subarray(0, Ti2.length));
        for (let ui2 = 1; ui2 < c; ui2++) {
          PRF._cloneInto(prfW).update(u2).digestInto(u2);
          for (let i = 0; i < Ti2.length; i++)
            Ti2[i] ^= u2[i];
        }
      }
      return pbkdf2Output(PRF, PRFSalt, DK, prfW, u2);
    }
    function setBigUint64(view, byteOffset, value, isLE2) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE2);
      const _32n2 = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh2 = Number(value >> _32n2 & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE2 ? 4 : 0;
      const l2 = isLE2 ? 0 : 4;
      view.setUint32(byteOffset + h, wh2, isLE2);
      view.setUint32(byteOffset + l2, wl, isLE2);
    }
    const Chi = (a, b, c) => a & b ^ ~a & c;
    const Maj = (a, b, c) => a & b ^ a & c ^ b & c;
    class HashMD extends Hash {
      constructor(blockLen, outputLen, padOffset, isLE2) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE2;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = createView(this.buffer);
      }
      update(data) {
        exists(this);
        const { view, buffer, blockLen } = this;
        data = toBytes$1(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = createView(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        exists(this);
        output(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE: isLE2 } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
        this.process(view, 0);
        const oview = createView(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE2);
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer);
        return to;
      }
    }
    const SHA256_K = /* @__PURE__ */ new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    const SHA256_IV = /* @__PURE__ */ new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
    class SHA256 extends HashMD {
      constructor() {
        super(64, 32, 8, false);
        this.A = SHA256_IV[0] | 0;
        this.B = SHA256_IV[1] | 0;
        this.C = SHA256_IV[2] | 0;
        this.D = SHA256_IV[3] | 0;
        this.E = SHA256_IV[4] | 0;
        this.F = SHA256_IV[5] | 0;
        this.G = SHA256_IV[6] | 0;
        this.H = SHA256_IV[7] | 0;
      }
      get() {
        const { A: A2, B: B2, C: C2, D: D2, E: E2, F: F2, G: G2, H: H2 } = this;
        return [A2, B2, C2, D2, E2, F2, G2, H2];
      }
      // prettier-ignore
      set(A2, B2, C2, D2, E2, F2, G2, H2) {
        this.A = A2 | 0;
        this.B = B2 | 0;
        this.C = C2 | 0;
        this.D = D2 | 0;
        this.E = E2 | 0;
        this.F = F2 | 0;
        this.G = G2 | 0;
        this.H = H2 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W[i - 15];
          const W2 = SHA256_W[i - 2];
          const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
          const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
          SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
        }
        let { A: A2, B: B2, C: C2, D: D2, E: E2, F: F2, G: G2, H: H2 } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = rotr(E2, 6) ^ rotr(E2, 11) ^ rotr(E2, 25);
          const T12 = H2 + sigma1 + Chi(E2, F2, G2) + SHA256_K[i] + SHA256_W[i] | 0;
          const sigma0 = rotr(A2, 2) ^ rotr(A2, 13) ^ rotr(A2, 22);
          const T2 = sigma0 + Maj(A2, B2, C2) | 0;
          H2 = G2;
          G2 = F2;
          F2 = E2;
          E2 = D2 + T12 | 0;
          D2 = C2;
          C2 = B2;
          B2 = A2;
          A2 = T12 + T2 | 0;
        }
        A2 = A2 + this.A | 0;
        B2 = B2 + this.B | 0;
        C2 = C2 + this.C | 0;
        D2 = D2 + this.D | 0;
        E2 = E2 + this.E | 0;
        F2 = F2 + this.F | 0;
        G2 = G2 + this.G | 0;
        H2 = H2 + this.H | 0;
        this.set(A2, B2, C2, D2, E2, F2, G2, H2);
      }
      roundClean() {
        SHA256_W.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    }
    const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());
    function pbkdf2Sync(password, salt, iterations, keylen, digest) {
      if (!["sha256", "sha512"].includes(digest)) {
        throw new Error("Only sha256 and sha512 are supported");
      }
      assertBytes(password);
      assertBytes(salt);
      return pbkdf2(sha256, password, salt, {
        c: iterations,
        dkLen: keylen
      });
    }
    function XorAndSalsa(prev, pi2, input, ii2, out, oi2) {
      let y00 = prev[pi2++] ^ input[ii2++], y01 = prev[pi2++] ^ input[ii2++];
      let y02 = prev[pi2++] ^ input[ii2++], y03 = prev[pi2++] ^ input[ii2++];
      let y04 = prev[pi2++] ^ input[ii2++], y05 = prev[pi2++] ^ input[ii2++];
      let y06 = prev[pi2++] ^ input[ii2++], y07 = prev[pi2++] ^ input[ii2++];
      let y08 = prev[pi2++] ^ input[ii2++], y09 = prev[pi2++] ^ input[ii2++];
      let y10 = prev[pi2++] ^ input[ii2++], y11 = prev[pi2++] ^ input[ii2++];
      let y12 = prev[pi2++] ^ input[ii2++], y13 = prev[pi2++] ^ input[ii2++];
      let y14 = prev[pi2++] ^ input[ii2++], y15 = prev[pi2++] ^ input[ii2++];
      let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
      for (let i = 0; i < 8; i += 2) {
        x04 ^= rotl(x00 + x12 | 0, 7);
        x08 ^= rotl(x04 + x00 | 0, 9);
        x12 ^= rotl(x08 + x04 | 0, 13);
        x00 ^= rotl(x12 + x08 | 0, 18);
        x09 ^= rotl(x05 + x01 | 0, 7);
        x13 ^= rotl(x09 + x05 | 0, 9);
        x01 ^= rotl(x13 + x09 | 0, 13);
        x05 ^= rotl(x01 + x13 | 0, 18);
        x14 ^= rotl(x10 + x06 | 0, 7);
        x02 ^= rotl(x14 + x10 | 0, 9);
        x06 ^= rotl(x02 + x14 | 0, 13);
        x10 ^= rotl(x06 + x02 | 0, 18);
        x03 ^= rotl(x15 + x11 | 0, 7);
        x07 ^= rotl(x03 + x15 | 0, 9);
        x11 ^= rotl(x07 + x03 | 0, 13);
        x15 ^= rotl(x11 + x07 | 0, 18);
        x01 ^= rotl(x00 + x03 | 0, 7);
        x02 ^= rotl(x01 + x00 | 0, 9);
        x03 ^= rotl(x02 + x01 | 0, 13);
        x00 ^= rotl(x03 + x02 | 0, 18);
        x06 ^= rotl(x05 + x04 | 0, 7);
        x07 ^= rotl(x06 + x05 | 0, 9);
        x04 ^= rotl(x07 + x06 | 0, 13);
        x05 ^= rotl(x04 + x07 | 0, 18);
        x11 ^= rotl(x10 + x09 | 0, 7);
        x08 ^= rotl(x11 + x10 | 0, 9);
        x09 ^= rotl(x08 + x11 | 0, 13);
        x10 ^= rotl(x09 + x08 | 0, 18);
        x12 ^= rotl(x15 + x14 | 0, 7);
        x13 ^= rotl(x12 + x15 | 0, 9);
        x14 ^= rotl(x13 + x12 | 0, 13);
        x15 ^= rotl(x14 + x13 | 0, 18);
      }
      out[oi2++] = y00 + x00 | 0;
      out[oi2++] = y01 + x01 | 0;
      out[oi2++] = y02 + x02 | 0;
      out[oi2++] = y03 + x03 | 0;
      out[oi2++] = y04 + x04 | 0;
      out[oi2++] = y05 + x05 | 0;
      out[oi2++] = y06 + x06 | 0;
      out[oi2++] = y07 + x07 | 0;
      out[oi2++] = y08 + x08 | 0;
      out[oi2++] = y09 + x09 | 0;
      out[oi2++] = y10 + x10 | 0;
      out[oi2++] = y11 + x11 | 0;
      out[oi2++] = y12 + x12 | 0;
      out[oi2++] = y13 + x13 | 0;
      out[oi2++] = y14 + x14 | 0;
      out[oi2++] = y15 + x15 | 0;
    }
    function BlockMix(input, ii2, out, oi2, r2) {
      let head = oi2 + 0;
      let tail = oi2 + 16 * r2;
      for (let i = 0; i < 16; i++)
        out[tail + i] = input[ii2 + (2 * r2 - 1) * 16 + i];
      for (let i = 0; i < r2; i++, head += 16, ii2 += 16) {
        XorAndSalsa(out, tail, input, ii2, out, head);
        if (i > 0)
          tail += 16;
        XorAndSalsa(out, head, input, ii2 += 16, out, tail);
      }
    }
    function scryptInit(password, salt, _opts) {
      const opts = checkOpts({
        dkLen: 32,
        asyncTick: 10,
        maxmem: 1024 ** 3 + 1024
      }, _opts);
      const { N: N2, r: r2, p: p2, dkLen, asyncTick, maxmem, onProgress } = opts;
      number(N2);
      number(r2);
      number(p2);
      number(dkLen);
      number(asyncTick);
      number(maxmem);
      if (onProgress !== void 0 && typeof onProgress !== "function")
        throw new Error("progressCb should be function");
      const blockSize = 128 * r2;
      const blockSize32 = blockSize / 4;
      if (N2 <= 1 || (N2 & N2 - 1) !== 0 || N2 >= 2 ** (blockSize / 8) || N2 > 2 ** 32) {
        throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
      }
      if (p2 < 0 || p2 > (2 ** 32 - 1) * 32 / blockSize) {
        throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
      }
      if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
        throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
      }
      const memUsed = blockSize * (N2 + p2);
      if (memUsed > maxmem) {
        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
      }
      const B2 = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p2 });
      const B32 = u32(B2);
      const V2 = u32(new Uint8Array(blockSize * N2));
      const tmp = u32(new Uint8Array(blockSize));
      let blockMixCb = () => {
      };
      if (onProgress) {
        const totalBlockMix = 2 * N2 * p2;
        const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
        let blockMixCnt = 0;
        blockMixCb = () => {
          blockMixCnt++;
          if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
            onProgress(blockMixCnt / totalBlockMix);
        };
      }
      return { N: N2, r: r2, p: p2, dkLen, blockSize32, V: V2, B32, B: B2, tmp, blockMixCb, asyncTick };
    }
    function scryptOutput(password, dkLen, B2, V2, tmp) {
      const res = pbkdf2(sha256, password, B2, { c: 1, dkLen });
      B2.fill(0);
      V2.fill(0);
      tmp.fill(0);
      return res;
    }
    function scrypt(password, salt, opts) {
      const { N: N2, r: r2, p: p2, dkLen, blockSize32, V: V2, B32, B: B2, tmp, blockMixCb } = scryptInit(password, salt, opts);
      if (!isLE)
        byteSwap32(B32);
      for (let pi2 = 0; pi2 < p2; pi2++) {
        const Pi2 = blockSize32 * pi2;
        for (let i = 0; i < blockSize32; i++)
          V2[i] = B32[Pi2 + i];
        for (let i = 0, pos = 0; i < N2 - 1; i++) {
          BlockMix(V2, pos, V2, pos += blockSize32, r2);
          blockMixCb();
        }
        BlockMix(V2, (N2 - 1) * blockSize32, B32, Pi2, r2);
        blockMixCb();
        for (let i = 0; i < N2; i++) {
          const j = B32[Pi2 + blockSize32 - 16] % N2;
          for (let k2 = 0; k2 < blockSize32; k2++)
            tmp[k2] = B32[Pi2 + k2] ^ V2[j * blockSize32 + k2];
          BlockMix(tmp, 0, B32, Pi2, r2);
          blockMixCb();
        }
      }
      if (!isLE)
        byteSwap32(B32);
      return scryptOutput(password, dkLen, B2, V2, tmp);
    }
    function scryptSync(password, salt, n2, p2, r2, dkLen, onProgress) {
      assertBytes(password);
      assertBytes(salt);
      return scrypt(password, salt, { N: n2, r: r2, p: p2, dkLen, onProgress });
    }
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const _0n$3 = /* @__PURE__ */ BigInt(0);
    const _1n$4 = /* @__PURE__ */ BigInt(1);
    const _2n$2 = /* @__PURE__ */ BigInt(2);
    function isBytes(a) {
      return a instanceof Uint8Array || a != null && typeof a === "object" && a.constructor.name === "Uint8Array";
    }
    function abytes(item) {
      if (!isBytes(item))
        throw new Error("Uint8Array expected");
    }
    const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex$1(bytes2) {
      abytes(bytes2);
      let hex = "";
      for (let i = 0; i < bytes2.length; i++) {
        hex += hexes[bytes2[i]];
      }
      return hex;
    }
    function numberToHexUnpadded(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    }
    function hexToNumber(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return BigInt(hex === "" ? "0" : `0x${hex}`);
    }
    const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase16(char) {
      if (char >= asciis._0 && char <= asciis._9)
        return char - asciis._0;
      if (char >= asciis._A && char <= asciis._F)
        return char - (asciis._A - 10);
      if (char >= asciis._a && char <= asciis._f)
        return char - (asciis._a - 10);
      return;
    }
    function hexToBytes$1(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const hl2 = hex.length;
      const al2 = hl2 / 2;
      if (hl2 % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + hl2);
      const array = new Uint8Array(al2);
      for (let ai2 = 0, hi2 = 0; ai2 < al2; ai2++, hi2 += 2) {
        const n1 = asciiToBase16(hex.charCodeAt(hi2));
        const n2 = asciiToBase16(hex.charCodeAt(hi2 + 1));
        if (n1 === void 0 || n2 === void 0) {
          const char = hex[hi2] + hex[hi2 + 1];
          throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi2);
        }
        array[ai2] = n1 * 16 + n2;
      }
      return array;
    }
    function bytesToNumberBE(bytes2) {
      return hexToNumber(bytesToHex$1(bytes2));
    }
    function bytesToNumberLE(bytes2) {
      abytes(bytes2);
      return hexToNumber(bytesToHex$1(Uint8Array.from(bytes2).reverse()));
    }
    function numberToBytesBE(n2, len) {
      return hexToBytes$1(n2.toString(16).padStart(len * 2, "0"));
    }
    function numberToBytesLE(n2, len) {
      return numberToBytesBE(n2, len).reverse();
    }
    function numberToVarBytesBE(n2) {
      return hexToBytes$1(numberToHexUnpadded(n2));
    }
    function ensureBytes(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes$1(hex);
        } catch (e) {
          throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
      } else if (isBytes(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
    }
    function concatBytes$1(...arrays) {
      let sum = 0;
      for (let i = 0; i < arrays.length; i++) {
        const a = arrays[i];
        abytes(a);
        sum += a.length;
      }
      const res = new Uint8Array(sum);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const a = arrays[i];
        res.set(a, pad);
        pad += a.length;
      }
      return res;
    }
    function equalBytes(a, b) {
      if (a.length !== b.length)
        return false;
      let diff = 0;
      for (let i = 0; i < a.length; i++)
        diff |= a[i] ^ b[i];
      return diff === 0;
    }
    function utf8ToBytes$1(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    function bitLen(n2) {
      let len;
      for (len = 0; n2 > _0n$3; n2 >>= _1n$4, len += 1)
        ;
      return len;
    }
    function bitGet(n2, pos) {
      return n2 >> BigInt(pos) & _1n$4;
    }
    function bitSet(n2, pos, value) {
      return n2 | (value ? _1n$4 : _0n$3) << BigInt(pos);
    }
    const bitMask = (n2) => (_2n$2 << BigInt(n2 - 1)) - _1n$4;
    const u8n = (data) => new Uint8Array(data);
    const u8fr = (arr) => Uint8Array.from(arr);
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v2 = u8n(hashLen);
      let k2 = u8n(hashLen);
      let i = 0;
      const reset = () => {
        v2.fill(1);
        k2.fill(0);
        i = 0;
      };
      const h = (...b) => hmacFn(k2, v2, ...b);
      const reseed = (seed = u8n()) => {
        k2 = h(u8fr([0]), seed);
        v2 = h();
        if (seed.length === 0)
          return;
        k2 = h(u8fr([1]), seed);
        v2 = h();
      };
      const gen2 = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v2 = h();
          const sl2 = v2.slice();
          out.push(sl2);
          len += v2.length;
        }
        return concatBytes$1(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen2())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    const validatorFns = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || isBytes(val),
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object) => object.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject(object, validators, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns[type];
        if (typeof checkVal !== "function")
          throw new Error(`Invalid validator "${type}", expected function`);
        const val = object[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object)) {
          throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
      };
      for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object;
    }
    const ut = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      abytes,
      bitGet,
      bitLen,
      bitMask,
      bitSet,
      bytesToHex: bytesToHex$1,
      bytesToNumberBE,
      bytesToNumberLE,
      concatBytes: concatBytes$1,
      createHmacDrbg,
      ensureBytes,
      equalBytes,
      hexToBytes: hexToBytes$1,
      hexToNumber,
      isBytes,
      numberToBytesBE,
      numberToBytesLE,
      numberToHexUnpadded,
      numberToVarBytesBE,
      utf8ToBytes: utf8ToBytes$1,
      validateObject
    }, Symbol.toStringTag, { value: "Module" }));
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const _0n$2 = BigInt(0), _1n$3 = BigInt(1), _2n$1 = BigInt(2), _3n$1 = BigInt(3);
    const _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
    BigInt(9);
    BigInt(16);
    function mod(a, b) {
      const result = a % b;
      return result >= _0n$2 ? result : b + result;
    }
    function pow(num, power, modulo) {
      if (modulo <= _0n$2 || power < _0n$2)
        throw new Error("Expected power/modulo > 0");
      if (modulo === _1n$3)
        return _0n$2;
      let res = _1n$3;
      while (power > _0n$2) {
        if (power & _1n$3)
          res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n$3;
      }
      return res;
    }
    function pow2(x2, power, modulo) {
      let res = x2;
      while (power-- > _0n$2) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    function invert(number2, modulo) {
      if (number2 === _0n$2 || modulo <= _0n$2) {
        throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
      }
      let a = mod(number2, modulo);
      let b = modulo;
      let x2 = _0n$2, u2 = _1n$3;
      while (a !== _0n$2) {
        const q2 = b / a;
        const r2 = b % a;
        const m2 = x2 - u2 * q2;
        b = a, a = r2, x2 = u2, u2 = m2;
      }
      const gcd = b;
      if (gcd !== _1n$3)
        throw new Error("invert: does not exist");
      return mod(x2, modulo);
    }
    function tonelliShanks(P2) {
      const legendreC = (P2 - _1n$3) / _2n$1;
      let Q2, S2, Z2;
      for (Q2 = P2 - _1n$3, S2 = 0; Q2 % _2n$1 === _0n$2; Q2 /= _2n$1, S2++)
        ;
      for (Z2 = _2n$1; Z2 < P2 && pow(Z2, legendreC, P2) !== P2 - _1n$3; Z2++)
        ;
      if (S2 === 1) {
        const p1div4 = (P2 + _1n$3) / _4n;
        return function tonelliFast(Fp2, n2) {
          const root = Fp2.pow(n2, p1div4);
          if (!Fp2.eql(Fp2.sqr(root), n2))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      const Q1div2 = (Q2 + _1n$3) / _2n$1;
      return function tonelliSlow(Fp2, n2) {
        if (Fp2.pow(n2, legendreC) === Fp2.neg(Fp2.ONE))
          throw new Error("Cannot find square root");
        let r2 = S2;
        let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z2), Q2);
        let x2 = Fp2.pow(n2, Q1div2);
        let b = Fp2.pow(n2, Q2);
        while (!Fp2.eql(b, Fp2.ONE)) {
          if (Fp2.eql(b, Fp2.ZERO))
            return Fp2.ZERO;
          let m2 = 1;
          for (let t2 = Fp2.sqr(b); m2 < r2; m2++) {
            if (Fp2.eql(t2, Fp2.ONE))
              break;
            t2 = Fp2.sqr(t2);
          }
          const ge2 = Fp2.pow(g, _1n$3 << BigInt(r2 - m2 - 1));
          g = Fp2.sqr(ge2);
          x2 = Fp2.mul(x2, ge2);
          b = Fp2.mul(b, g);
          r2 = m2;
        }
        return x2;
      };
    }
    function FpSqrt(P2) {
      if (P2 % _4n === _3n$1) {
        const p1div4 = (P2 + _1n$3) / _4n;
        return function sqrt3mod4(Fp2, n2) {
          const root = Fp2.pow(n2, p1div4);
          if (!Fp2.eql(Fp2.sqr(root), n2))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P2 % _8n === _5n) {
        const c1 = (P2 - _5n) / _8n;
        return function sqrt5mod8(Fp2, n2) {
          const n22 = Fp2.mul(n2, _2n$1);
          const v2 = Fp2.pow(n22, c1);
          const nv = Fp2.mul(n2, v2);
          const i = Fp2.mul(Fp2.mul(nv, _2n$1), v2);
          const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
          if (!Fp2.eql(Fp2.sqr(root), n2))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      return tonelliShanks(P2);
    }
    const FIELD_FIELDS = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return validateObject(field, opts);
    }
    function FpPow(f2, num, power) {
      if (power < _0n$2)
        throw new Error("Expected power > 0");
      if (power === _0n$2)
        return f2.ONE;
      if (power === _1n$3)
        return num;
      let p2 = f2.ONE;
      let d = num;
      while (power > _0n$2) {
        if (power & _1n$3)
          p2 = f2.mul(p2, d);
        d = f2.sqr(d);
        power >>= _1n$3;
      }
      return p2;
    }
    function FpInvertBatch(f2, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f2.is0(num))
          return acc;
        tmp[i] = acc;
        return f2.mul(acc, num);
      }, f2.ONE);
      const inverted = f2.inv(lastMultiplied);
      nums.reduceRight((acc, num, i) => {
        if (f2.is0(num))
          return acc;
        tmp[i] = f2.mul(acc, tmp[i]);
        return f2.mul(acc, num);
      }, inverted);
      return tmp;
    }
    function nLength(n2, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n2.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
      if (ORDER <= _0n$2)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
      if (BYTES > 2048)
        throw new Error("Field lengths over 2048 bytes are not supported");
      const sqrtP = FpSqrt(ORDER);
      const f2 = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: bitMask(BITS),
        ZERO: _0n$2,
        ONE: _1n$3,
        create: (num) => mod(num, ORDER),
        isValid: (num) => {
          if (typeof num !== "bigint")
            throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
          return _0n$2 <= num && num < ORDER;
        },
        is0: (num) => num === _0n$2,
        isOdd: (num) => (num & _1n$3) === _1n$3,
        neg: (num) => mod(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod(num * num, ORDER),
        add: (lhs, rhs) => mod(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
        pow: (num, power) => FpPow(f2, num, power),
        div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert(num, ORDER),
        sqrt: redef.sqrt || ((n2) => sqrtP(f2, n2)),
        invertBatch: (lst) => FpInvertBatch(f2, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b, c) => c ? b : a,
        toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
        fromBytes: (bytes2) => {
          if (bytes2.length !== BYTES)
            throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes2.length}`);
          return isLE2 ? bytesToNumberLE(bytes2) : bytesToNumberBE(bytes2);
        }
      });
      return Object.freeze(f2);
    }
    function getFieldBytesLength(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength2 = fieldOrder.toString(2).length;
      return Math.ceil(bitLength2 / 8);
    }
    function getMinHashLength(fieldOrder) {
      const length = getFieldBytesLength(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    function mapHashToField(key, fieldOrder, isLE2 = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength(fieldOrder);
      const minLen = getMinHashLength(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num = isLE2 ? bytesToNumberBE(key) : bytesToNumberLE(key);
      const reduced = mod(num, fieldOrder - _1n$3) + _1n$3;
      return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
    }
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const _0n$1 = BigInt(0);
    const _1n$2 = BigInt(1);
    function wNAF(c, bits) {
      const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
      };
      const opts = (W2) => {
        const windows = Math.ceil(bits / W2) + 1;
        const windowSize = 2 ** (W2 - 1);
        return { windows, windowSize };
      };
      return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n2) {
          let p2 = c.ZERO;
          let d = elm;
          while (n2 > _0n$1) {
            if (n2 & _1n$2)
              p2 = p2.add(d);
            d = d.double();
            n2 >>= _1n$2;
          }
          return p2;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W2) {
          const { windows, windowSize } = opts(W2);
          const points = [];
          let p2 = elm;
          let base2 = p2;
          for (let window2 = 0; window2 < windows; window2++) {
            base2 = p2;
            points.push(base2);
            for (let i = 1; i < windowSize; i++) {
              base2 = base2.add(p2);
              points.push(base2);
            }
            p2 = base2.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W2, precomputes, n2) {
          const { windows, windowSize } = opts(W2);
          let p2 = c.ZERO;
          let f2 = c.BASE;
          const mask2 = BigInt(2 ** W2 - 1);
          const maxNumber = 2 ** W2;
          const shiftBy = BigInt(W2);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n2 & mask2);
            n2 >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n2 += _1n$2;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p2 = p2.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p: p2, f: f2 };
        },
        wNAFCached(P2, precomputesMap, n2, transform) {
          const W2 = P2._WINDOW_SIZE || 1;
          let comp = precomputesMap.get(P2);
          if (!comp) {
            comp = this.precomputeWindow(P2, W2);
            if (W2 !== 1) {
              precomputesMap.set(P2, transform(comp));
            }
          }
          return this.wNAF(W2, comp, n2);
        }
      };
    }
    function validateBasic(curve) {
      validateField(curve.Fp);
      validateObject(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...nLength(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    function validatePointOpts(curve) {
      const opts = validateBasic(curve);
      validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp: Fp2, a } = opts;
      if (endo) {
        if (!Fp2.eql(a, Fp2.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    const DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m2 = "") {
          super(m2);
        }
      },
      _parseInt(data) {
        const { Err: E2 } = DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E2("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len)
          throw new E2("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E2("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E2("Invalid signature integer: unnecessary leading zero");
        return { d: b2n(res), l: data.subarray(len + 2) };
      },
      toSig(hex) {
        const { Err: E2 } = DER;
        const data = typeof hex === "string" ? h2b(hex) : hex;
        abytes(data);
        let l2 = data.length;
        if (l2 < 2 || data[0] != 48)
          throw new E2("Invalid signature tag");
        if (data[1] !== l2 - 2)
          throw new E2("Invalid signature: incorrect length");
        const { d: r2, l: sBytes } = DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E2("Invalid signature: left bytes after parsing");
        return { r: r2, s };
      },
      hexFromSig(sig) {
        const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
        const h = (num) => {
          const hex = num.toString(16);
          return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r2 = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r2.length / 2;
        const sl2 = h(shl);
        const rl2 = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl2}${r2}02${sl2}${s}`;
      }
    };
    const _0n = BigInt(0), _1n$1 = BigInt(1);
    BigInt(2);
    const _3n = BigInt(3);
    BigInt(4);
    function weierstrassPoints(opts) {
      const CURVE = validatePointOpts(opts);
      const { Fp: Fp2 } = CURVE;
      const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return concatBytes$1(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes2) => {
        const tail = bytes2.subarray(1);
        const x2 = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
        const y2 = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
        return { x: x2, y: y2 };
      });
      function weierstrassEquation(x2) {
        const { a, b } = CURVE;
        const x22 = Fp2.sqr(x2);
        const x3 = Fp2.mul(x22, x2);
        return Fp2.add(Fp2.add(x3, Fp2.mul(x2, a)), b);
      }
      if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n < num && num < CURVE.n;
      }
      function assertGE(num) {
        if (!isWithinCurveOrder(num))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: n2 } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (isBytes(key))
            key = bytesToHex$1(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("Invalid key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
          num = mod(num, n2);
        assertGE(num);
        return num;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point))
          throw new Error("ProjectivePoint expected");
      }
      class Point {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp2.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp2.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp2.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p2) {
          const { x: x2, y: y2 } = p2 || {};
          if (!p2 || !Fp2.isValid(x2) || !Fp2.isValid(y2))
            throw new Error("invalid affine point");
          if (p2 instanceof Point)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
          if (is0(x2) && is0(y2))
            return Point.ZERO;
          return new Point(x2, y2, Fp2.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp2.invertBatch(points.map((p2) => p2.pz));
          return points.map((p2, i) => p2.toAffine(toInv[i])).map(Point.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P2 = Point.fromAffine(fromBytes(ensureBytes("pointHex", hex)));
          P2.assertValidity();
          return P2;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp2.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x: x2, y: y2 } = this.toAffine();
          if (!Fp2.isValid(x2) || !Fp2.isValid(y2))
            throw new Error("bad point: x or y not FE");
          const left = Fp2.sqr(y2);
          const right = weierstrassEquation(x2);
          if (!Fp2.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y: y2 } = this.toAffine();
          if (Fp2.isOdd)
            return !Fp2.isOdd(y2);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
          const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point(this.px, Fp2.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b } = CURVE;
          const b3 = Fp2.mul(b, _3n);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
          let t0 = Fp2.mul(X1, X1);
          let t1 = Fp2.mul(Y1, Y1);
          let t2 = Fp2.mul(Z1, Z1);
          let t3 = Fp2.mul(X1, Y1);
          t3 = Fp2.add(t3, t3);
          Z3 = Fp2.mul(X1, Z1);
          Z3 = Fp2.add(Z3, Z3);
          X3 = Fp2.mul(a, Z3);
          Y3 = Fp2.mul(b3, t2);
          Y3 = Fp2.add(X3, Y3);
          X3 = Fp2.sub(t1, Y3);
          Y3 = Fp2.add(t1, Y3);
          Y3 = Fp2.mul(X3, Y3);
          X3 = Fp2.mul(t3, X3);
          Z3 = Fp2.mul(b3, Z3);
          t2 = Fp2.mul(a, t2);
          t3 = Fp2.sub(t0, t2);
          t3 = Fp2.mul(a, t3);
          t3 = Fp2.add(t3, Z3);
          Z3 = Fp2.add(t0, t0);
          t0 = Fp2.add(Z3, t0);
          t0 = Fp2.add(t0, t2);
          t0 = Fp2.mul(t0, t3);
          Y3 = Fp2.add(Y3, t0);
          t2 = Fp2.mul(Y1, Z1);
          t2 = Fp2.add(t2, t2);
          t0 = Fp2.mul(t2, t3);
          X3 = Fp2.sub(X3, t0);
          Z3 = Fp2.mul(t2, t1);
          Z3 = Fp2.add(Z3, Z3);
          Z3 = Fp2.add(Z3, Z3);
          return new Point(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
          const a = CURVE.a;
          const b3 = Fp2.mul(CURVE.b, _3n);
          let t0 = Fp2.mul(X1, X2);
          let t1 = Fp2.mul(Y1, Y2);
          let t2 = Fp2.mul(Z1, Z2);
          let t3 = Fp2.add(X1, Y1);
          let t4 = Fp2.add(X2, Y2);
          t3 = Fp2.mul(t3, t4);
          t4 = Fp2.add(t0, t1);
          t3 = Fp2.sub(t3, t4);
          t4 = Fp2.add(X1, Z1);
          let t5 = Fp2.add(X2, Z2);
          t4 = Fp2.mul(t4, t5);
          t5 = Fp2.add(t0, t2);
          t4 = Fp2.sub(t4, t5);
          t5 = Fp2.add(Y1, Z1);
          X3 = Fp2.add(Y2, Z2);
          t5 = Fp2.mul(t5, X3);
          X3 = Fp2.add(t1, t2);
          t5 = Fp2.sub(t5, X3);
          Z3 = Fp2.mul(a, t4);
          X3 = Fp2.mul(b3, t2);
          Z3 = Fp2.add(X3, Z3);
          X3 = Fp2.sub(t1, Z3);
          Z3 = Fp2.add(t1, Z3);
          Y3 = Fp2.mul(X3, Z3);
          t1 = Fp2.add(t0, t0);
          t1 = Fp2.add(t1, t0);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.mul(b3, t4);
          t1 = Fp2.add(t1, t2);
          t2 = Fp2.sub(t0, t2);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.add(t4, t2);
          t0 = Fp2.mul(t1, t4);
          Y3 = Fp2.add(Y3, t0);
          t0 = Fp2.mul(t5, t4);
          X3 = Fp2.mul(t3, X3);
          X3 = Fp2.sub(X3, t0);
          t0 = Fp2.mul(t3, t1);
          Z3 = Fp2.mul(t5, Z3);
          Z3 = Fp2.add(Z3, t0);
          return new Point(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point.ZERO);
        }
        wNAF(n2) {
          return wnaf.wNAFCached(this, pointPrecomputes, n2, (comp) => {
            const toInv = Fp2.invertBatch(comp.map((p2) => p2.pz));
            return comp.map((p2, i) => p2.toAffine(toInv[i])).map(Point.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n2) {
          const I2 = Point.ZERO;
          if (n2 === _0n)
            return I2;
          assertGE(n2);
          if (n2 === _1n$1)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n2);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
          let k1p = I2;
          let k2p = I2;
          let d = this;
          while (k1 > _0n || k2 > _0n) {
            if (k1 & _1n$1)
              k1p = k1p.add(d);
            if (k2 & _1n$1)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n$1;
            k2 >>= _1n$1;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n2 = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p: p2, f: f2 } = this.wNAF(n2);
            point = p2;
            fake = f2;
          }
          return Point.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q2, a, b) {
          const G2 = Point.BASE;
          const mul = (P2, a2) => a2 === _0n || a2 === _1n$1 || !P2.equals(G2) ? P2.multiplyUnsafe(a2) : P2.multiply(a2);
          const sum = mul(this, a).add(mul(Q2, b));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x2, py: y2, pz: z2 } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp2.ONE : Fp2.inv(z2);
          const ax = Fp2.mul(x2, iz);
          const ay = Fp2.mul(y2, iz);
          const zz = Fp2.mul(z2, iz);
          if (is0)
            return { x: Fp2.ZERO, y: Fp2.ZERO };
          if (!Fp2.eql(zz, Fp2.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n$1)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n$1)
            return this;
          if (clearCofactor)
            return clearCofactor(Point, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes2(Point, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return bytesToHex$1(this.toRawBytes(isCompressed));
        }
      }
      Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp2.ONE);
      Point.ZERO = new Point(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    function validateOpts(curve) {
      const opts = validateBasic(curve);
      validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
      const CURVE = validateOpts(curveDef);
      const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp2.BYTES + 1;
      const uncompressedLen = 2 * Fp2.BYTES + 1;
      function isValidFieldElement(num) {
        return _0n < num && num < Fp2.ORDER;
      }
      function modN(a) {
        return mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x2 = Fp2.toBytes(a.x);
          const cat = concatBytes$1;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x2);
          } else {
            return cat(Uint8Array.from([4]), x2, Fp2.toBytes(a.y));
          }
        },
        fromBytes(bytes2) {
          const len = bytes2.length;
          const head = bytes2[0];
          const tail = bytes2.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x2 = bytesToNumberBE(tail);
            if (!isValidFieldElement(x2))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x2);
            let y3;
            try {
              y3 = Fp2.sqrt(y2);
            } catch (sqrtError) {
              const suffix = sqrtError instanceof Error ? ": " + sqrtError.message : "";
              throw new Error("Point is not on curve" + suffix);
            }
            const isYOdd = (y3 & _1n$1) === _1n$1;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y3 = Fp2.neg(y3);
            return { x: x2, y: y3 };
          } else if (len === uncompressedLen && head === 4) {
            const x2 = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
            const y2 = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
            return { x: x2, y: y2 };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num) => bytesToHex$1(numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number2) {
        const HALF = CURVE_ORDER >> _1n$1;
        return number2 > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN(-s) : s;
      }
      const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));
      class Signature {
        constructor(r2, s, recovery) {
          this.r = r2;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l2 = CURVE.nByteLength;
          hex = ensureBytes("compactSignature", hex, l2 * 2);
          return new Signature(slcNum(hex, 0, l2), slcNum(hex, l2, 2 * l2));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r: r2, s } = DER.toSig(ensureBytes("DER", hex));
          return new Signature(r2, s);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r: r2, s, recovery: rec } = this;
          const h = bits2int_modN(ensureBytes("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r2 + CURVE.n : r2;
          if (radj >= Fp2.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R2 = Point.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN(-h * ir);
          const u2 = modN(s * ir);
          const Q2 = Point.BASE.multiplyAndAddUnsafe(R2, u1, u2);
          if (!Q2)
            throw new Error("point at infinify");
          Q2.assertValidity();
          return Q2;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return hexToBytes$1(this.toDERHex());
        }
        toDERHex() {
          return DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return hexToBytes$1(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils2 = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = getMinHashLength(CURVE.n);
          return mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = isBytes(item);
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b = Point.fromHex(publicB);
        return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes2) {
        const num = bytesToNumberBE(bytes2);
        const delta = bytes2.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes2) {
        return modN(bits2int(bytes2));
      };
      const ORDER_MASK = bitMask(CURVE.nBitLength);
      function int2octets(num) {
        if (typeof num !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n <= num && num < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k2) => k2 in opts))
          throw new Error("sign() legacy options not supported");
        const { hash: hash2, randomBytes: randomBytes2 } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = ensureBytes("msgHash", msgHash);
        if (prehash)
          msgHash = ensureBytes("prehashed msgHash", hash2(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null && ent !== false) {
          const e = ent === true ? randomBytes2(Fp2.BYTES) : ent;
          seedArgs.push(ensureBytes("extraEntropy", e));
        }
        const seed = concatBytes$1(...seedArgs);
        const m2 = h1int;
        function k2sig(kBytes) {
          const k2 = bits2int(kBytes);
          if (!isWithinCurveOrder(k2))
            return;
          const ik2 = invN(k2);
          const q2 = Point.BASE.multiply(k2).toAffine();
          const r2 = modN(q2.x);
          if (r2 === _0n)
            return;
          const s = modN(ik2 * modN(m2 + r2 * d));
          if (s === _0n)
            return;
          let recovery = (q2.x === r2 ? 0 : 2) | Number(q2.y & _1n$1);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature(r2, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign2(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C2 = CURVE;
        const drbg = createHmacDrbg(C2.hash.outputLen, C2.nByteLength, C2.hmac);
        return drbg(seed, k2sig);
      }
      Point.BASE._setWindowSize(8);
      function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        var _a2;
        const sg2 = signature;
        msgHash = ensureBytes("msgHash", msgHash);
        publicKey = ensureBytes("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P2;
        try {
          if (typeof sg2 === "string" || isBytes(sg2)) {
            try {
              _sig = Signature.fromDER(sg2);
            } catch (derError) {
              if (!(derError instanceof DER.Err))
                throw derError;
              _sig = Signature.fromCompact(sg2);
            }
          } else if (typeof sg2 === "object" && typeof sg2.r === "bigint" && typeof sg2.s === "bigint") {
            const { r: r3, s: s2 } = sg2;
            _sig = new Signature(r3, s2);
          } else {
            throw new Error("PARSE");
          }
          P2 = Point.fromHex(publicKey);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r: r2, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN(h * is);
        const u2 = modN(r2 * is);
        const R2 = (_a2 = Point.BASE.multiplyAndAddUnsafe(P2, u1, u2)) == null ? void 0 : _a2.toAffine();
        if (!R2)
          return false;
        const v2 = modN(R2.x);
        return v2 === r2;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign: sign2,
        verify,
        ProjectivePoint: Point,
        Signature,
        utils: utils2
      };
    }
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    function getHash(hash2) {
      return {
        hash: hash2,
        hmac: (key, ...msgs) => hmac(hash2, key, concatBytes$2(...msgs)),
        randomBytes: randomBytes$1
      };
    }
    function createCurve(curveDef, defHash) {
      const create2 = (hash2) => weierstrass({ ...curveDef, ...getHash(hash2) });
      return Object.freeze({ ...create2(defHash), create: create2 });
    }
    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    const secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    const _1n = BigInt(1);
    const _2n = BigInt(2);
    const divNearest = (a, b) => (a + b / _2n) / b;
    function sqrtMod(y2) {
      const P2 = secp256k1P;
      const _3n2 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y2 * y2 * y2 % P2;
      const b3 = b2 * b2 * y2 % P2;
      const b6 = pow2(b3, _3n2, P2) * b3 % P2;
      const b9 = pow2(b6, _3n2, P2) * b3 % P2;
      const b11 = pow2(b9, _2n, P2) * b2 % P2;
      const b22 = pow2(b11, _11n, P2) * b11 % P2;
      const b44 = pow2(b22, _22n, P2) * b22 % P2;
      const b88 = pow2(b44, _44n, P2) * b44 % P2;
      const b176 = pow2(b88, _88n, P2) * b88 % P2;
      const b220 = pow2(b176, _44n, P2) * b44 % P2;
      const b223 = pow2(b220, _3n2, P2) * b3 % P2;
      const t1 = pow2(b223, _23n, P2) * b22 % P2;
      const t2 = pow2(t1, _6n, P2) * b2 % P2;
      const root = pow2(t2, _2n, P2);
      if (!Fp.eql(Fp.sqr(root), y2))
        throw new Error("Cannot find square root");
      return root;
    }
    const Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
    const secp256k1$1 = createCurve({
      a: BigInt(0),
      // equation params: a, b
      b: BigInt(7),
      // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975
      Fp,
      // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n
      n: secp256k1N,
      // Curve order, total count of valid points in the field
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      // Cofactor
      lowS: true,
      // Allow only low-S signatures by default in sign() and verify()
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k2) => {
          const n2 = secp256k1N;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest(b2 * k2, n2);
          const c2 = divNearest(-b1 * k2, n2);
          let k1 = mod(k2 - c1 * a1 - c2 * a2, n2);
          let k22 = mod(-c1 * b1 - c2 * b2, n2);
          const k1neg = k1 > POW_2_128;
          const k2neg = k22 > POW_2_128;
          if (k1neg)
            k1 = n2 - k1;
          if (k2neg)
            k22 = n2 - k22;
          if (k1 > POW_2_128 || k22 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k2);
          }
          return { k1neg, k1, k2neg, k2: k22 };
        }
      }
    }, sha256);
    BigInt(0);
    secp256k1$1.ProjectivePoint;
    const ethereumCryptography = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      secp256k1: secp256k1$1
    }, Symbol.toStringTag, { value: "Module" }));
    var _a$1;
    const secp256k1 = (_a$1 = secp256k1$1) !== null && _a$1 !== void 0 ? _a$1 : ethereumCryptography;
    const MAX_UINT64 = BigInt("0xffffffffffffffff");
    const MAX_INTEGER = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    const SECP256K1_ORDER = secp256k1.CURVE.n;
    const SECP256K1_ORDER_DIV_2 = SECP256K1_ORDER / BigInt(2);
    const keyStoreSchema = {
      type: "object",
      required: ["crypto", "id", "version", "address"],
      properties: {
        crypto: {
          type: "object",
          required: ["cipher", "ciphertext", "cipherparams", "kdf", "kdfparams", "mac"],
          properties: {
            cipher: { type: "string" },
            ciphertext: { type: "string" },
            cipherparams: { type: "object" },
            kdf: { type: "string" },
            kdfparams: { type: "object" },
            salt: { type: "string" },
            mac: { type: "string" }
          }
        },
        id: { type: "string" },
        version: { type: "number" },
        address: { type: "string" }
      }
    };
    var Chain;
    (function(Chain2) {
      Chain2[Chain2["Mainnet"] = 1] = "Mainnet";
      Chain2[Chain2["Goerli"] = 5] = "Goerli";
      Chain2[Chain2["Sepolia"] = 11155111] = "Sepolia";
    })(Chain || (Chain = {}));
    var Hardfork;
    (function(Hardfork2) {
      Hardfork2["Chainstart"] = "chainstart";
      Hardfork2["Homestead"] = "homestead";
      Hardfork2["Dao"] = "dao";
      Hardfork2["TangerineWhistle"] = "tangerineWhistle";
      Hardfork2["SpuriousDragon"] = "spuriousDragon";
      Hardfork2["Byzantium"] = "byzantium";
      Hardfork2["Constantinople"] = "constantinople";
      Hardfork2["Petersburg"] = "petersburg";
      Hardfork2["Istanbul"] = "istanbul";
      Hardfork2["MuirGlacier"] = "muirGlacier";
      Hardfork2["Berlin"] = "berlin";
      Hardfork2["London"] = "london";
      Hardfork2["ArrowGlacier"] = "arrowGlacier";
      Hardfork2["GrayGlacier"] = "grayGlacier";
      Hardfork2["MergeForkIdTransition"] = "mergeForkIdTransition";
      Hardfork2["Merge"] = "merge";
      Hardfork2["Shanghai"] = "shanghai";
      Hardfork2["ShardingForkDev"] = "shardingFork";
    })(Hardfork || (Hardfork = {}));
    var ConsensusType;
    (function(ConsensusType2) {
      ConsensusType2["ProofOfStake"] = "pos";
      ConsensusType2["ProofOfWork"] = "pow";
      ConsensusType2["ProofOfAuthority"] = "poa";
    })(ConsensusType || (ConsensusType = {}));
    var ConsensusAlgorithm;
    (function(ConsensusAlgorithm2) {
      ConsensusAlgorithm2["Ethash"] = "ethash";
      ConsensusAlgorithm2["Clique"] = "clique";
      ConsensusAlgorithm2["Casper"] = "casper";
    })(ConsensusAlgorithm || (ConsensusAlgorithm = {}));
    var CustomChain;
    (function(CustomChain2) {
      CustomChain2["PolygonMainnet"] = "polygon-mainnet";
      CustomChain2["PolygonMumbai"] = "polygon-mumbai";
      CustomChain2["ArbitrumRinkebyTestnet"] = "arbitrum-rinkeby-testnet";
      CustomChain2["ArbitrumOne"] = "arbitrum-one";
      CustomChain2["xDaiChain"] = "x-dai-chain";
      CustomChain2["OptimisticKovan"] = "optimistic-kovan";
      CustomChain2["OptimisticEthereum"] = "optimistic-ethereum";
    })(CustomChain || (CustomChain = {}));
    var TypeOutput;
    (function(TypeOutput2) {
      TypeOutput2[TypeOutput2["Number"] = 0] = "Number";
      TypeOutput2[TypeOutput2["BigInt"] = 1] = "BigInt";
      TypeOutput2[TypeOutput2["Uint8Array"] = 2] = "Uint8Array";
      TypeOutput2[TypeOutput2["PrefixedHexString"] = 3] = "PrefixedHexString";
    })(TypeOutput || (TypeOutput = {}));
    const stripHexPrefix$1 = (str) => {
      if (typeof str !== "string")
        throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);
      return isHexPrefixed$1(str) ? str.slice(2) : str;
    };
    function formatNonce(nonce) {
      if (!nonce || nonce === "0x0") {
        return "0x0000000000000000";
      }
      if (isHexPrefixed$1(nonce)) {
        return `0x${stripHexPrefix$1(nonce).padStart(16, "0")}`;
      }
      return `0x${nonce.padStart(16, "0")}`;
    }
    const intToHex = function(i) {
      if (!Number.isSafeInteger(i) || i < 0) {
        throw new Error(`Received an invalid integer type: ${i}`);
      }
      return `0x${i.toString(16)}`;
    };
    function parseGethParams(json, mergeForkIdPostMerge = true) {
      var _a2, _b;
      const { name: name2, config, difficulty, mixHash, gasLimit, coinbase, baseFeePerGas } = json;
      let { extraData, timestamp, nonce } = json;
      const genesisTimestamp = Number(timestamp);
      const { chainId } = config;
      if (extraData === "") {
        extraData = "0x";
      }
      if (!isHexPrefixed$1(timestamp)) {
        timestamp = intToHex(parseInt(timestamp));
      }
      if (nonce.length !== 18) {
        nonce = formatNonce(nonce);
      }
      if (config.eip155Block !== config.eip158Block) {
        throw new Error("EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork");
      }
      const params = {
        name: name2,
        chainId,
        networkId: chainId,
        genesis: {
          timestamp,
          // eslint-disable-next-line radix
          gasLimit: parseInt(gasLimit),
          // eslint-disable-next-line radix
          difficulty: parseInt(difficulty),
          nonce,
          extraData,
          mixHash,
          coinbase,
          baseFeePerGas
        },
        hardfork: void 0,
        hardforks: [],
        bootstrapNodes: [],
        consensus: (
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          config.clique !== void 0 ? {
            type: "poa",
            algorithm: "clique",
            clique: {
              // The recent geth genesis seems to be using blockperiodseconds
              // and epochlength for clique specification
              // see: https://hackmd.io/PqZgMpnkSWCWv5joJoFymQ
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
              period: (_a2 = config.clique.period) !== null && _a2 !== void 0 ? _a2 : config.clique.blockperiodseconds,
              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access,  @typescript-eslint/no-unsafe-assignment
              epoch: (_b = config.clique.epoch) !== null && _b !== void 0 ? _b : config.clique.epochlength
            }
          } : {
            type: "pow",
            algorithm: "ethash",
            ethash: {}
          }
        )
      };
      const forkMap = {
        [Hardfork.Homestead]: { name: "homesteadBlock" },
        [Hardfork.Dao]: { name: "daoForkBlock" },
        [Hardfork.TangerineWhistle]: { name: "eip150Block" },
        [Hardfork.SpuriousDragon]: { name: "eip155Block" },
        [Hardfork.Byzantium]: { name: "byzantiumBlock" },
        [Hardfork.Constantinople]: { name: "constantinopleBlock" },
        [Hardfork.Petersburg]: { name: "petersburgBlock" },
        [Hardfork.Istanbul]: { name: "istanbulBlock" },
        [Hardfork.MuirGlacier]: { name: "muirGlacierBlock" },
        [Hardfork.Berlin]: { name: "berlinBlock" },
        [Hardfork.London]: { name: "londonBlock" },
        [Hardfork.MergeForkIdTransition]: {
          name: "mergeForkBlock",
          postMerge: mergeForkIdPostMerge
        },
        [Hardfork.Shanghai]: { name: "shanghaiTime", postMerge: true, isTimestamp: true },
        [Hardfork.ShardingForkDev]: {
          name: "shardingForkTime",
          postMerge: true,
          isTimestamp: true
        }
      };
      const forkMapRev = Object.keys(forkMap).reduce((acc, elem) => {
        acc[forkMap[elem].name] = elem;
        return acc;
      }, {});
      const configHardforkNames = Object.keys(config).filter(
        // eslint-disable-next-line no-null/no-null, @typescript-eslint/no-unsafe-member-access
        (key) => forkMapRev[key] !== void 0 && config[key] !== void 0 && config[key] !== null
      );
      params.hardforks = configHardforkNames.map((nameBlock) => ({
        name: forkMapRev[nameBlock],
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        block: (
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          forkMap[forkMapRev[nameBlock]].isTimestamp === true || // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          typeof config[nameBlock] !== "number" ? (
            // eslint-disable-next-line no-null/no-null
            null
          ) : (
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            config[nameBlock]
          )
        ),
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        timestamp: (
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          forkMap[forkMapRev[nameBlock]].isTimestamp === true && // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          typeof config[nameBlock] === "number" ? (
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
            config[nameBlock]
          ) : void 0
        )
      })).filter((fork) => fork.block !== null || fork.timestamp !== void 0);
      params.hardforks.sort((a, b) => {
        var _a3, _b2;
        return ((_a3 = a.block) !== null && _a3 !== void 0 ? _a3 : Infinity) - ((_b2 = b.block) !== null && _b2 !== void 0 ? _b2 : Infinity);
      });
      params.hardforks.sort((a, b) => {
        var _a3, _b2;
        return ((_a3 = a.timestamp) !== null && _a3 !== void 0 ? _a3 : genesisTimestamp) - ((_b2 = b.timestamp) !== null && _b2 !== void 0 ? _b2 : genesisTimestamp);
      });
      if (config.terminalTotalDifficulty !== void 0) {
        const mergeConfig = {
          name: Hardfork.Merge,
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment
          ttd: config.terminalTotalDifficulty,
          // eslint-disable-next-line no-null/no-null
          block: null
        };
        const postMergeIndex = params.hardforks.findIndex(
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          (hf2) => {
            var _a3;
            return ((_a3 = forkMap[hf2.name]) === null || _a3 === void 0 ? void 0 : _a3.postMerge) === true;
          }
        );
        if (postMergeIndex !== -1) {
          params.hardforks.splice(postMergeIndex, 0, mergeConfig);
        } else {
          params.hardforks.push(mergeConfig);
        }
      }
      const latestHardfork = params.hardforks.length > 0 ? params.hardforks.slice(-1)[0] : void 0;
      params.hardfork = latestHardfork === null || latestHardfork === void 0 ? void 0 : latestHardfork.name;
      params.hardforks.unshift({ name: Hardfork.Chainstart, block: 0 });
      return params;
    }
    function parseGethGenesis(json, name2, mergeForkIdPostMerge) {
      try {
        if (["config", "difficulty", "gasLimit", "alloc"].some((field) => !(field in json))) {
          throw new Error("Invalid format, expected geth genesis fields missing");
        }
        if (name2 !== void 0) {
          json.name = name2;
        }
        return parseGethParams(json, mergeForkIdPostMerge);
      } catch (e) {
        throw new Error(`Error parsing parameters file: ${e.message}`);
      }
    }
    function padToEven$1(value) {
      let a = value;
      if (typeof a !== "string") {
        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);
      }
      if (a.length % 2)
        a = `0${a}`;
      return a;
    }
    const intToUint8Array = function(i) {
      const hex = intToHex(i);
      return hexToBytes$2(`0x${padToEven$1(hex.slice(2))}`);
    };
    const toUint8Array = function(v2) {
      var _a2;
      if (v2 === null || v2 === void 0) {
        return new Uint8Array();
      }
      if (v2 instanceof Uint8Array) {
        return v2;
      }
      if (((_a2 = v2 === null || v2 === void 0 ? void 0 : v2.constructor) === null || _a2 === void 0 ? void 0 : _a2.name) === "Uint8Array") {
        return Uint8Array.from(v2);
      }
      if (Array.isArray(v2)) {
        return Uint8Array.from(v2);
      }
      if (typeof v2 === "string") {
        if (!isHexString(v2)) {
          throw new Error(`Cannot convert string to Uint8Array. only supports 0x-prefixed hex strings and this string was given: ${v2}`);
        }
        return hexToBytes$2(padToEven$1(stripHexPrefix$1(v2)));
      }
      if (typeof v2 === "number") {
        return toUint8Array(numberToHex$1(v2));
      }
      if (typeof v2 === "bigint") {
        if (v2 < BigInt(0)) {
          throw new Error(`Cannot convert negative bigint to Uint8Array. Given: ${v2}`);
        }
        let n2 = v2.toString(16);
        if (n2.length % 2)
          n2 = `0${n2}`;
        return toUint8Array(`0x${n2}`);
      }
      if (v2.toArray) {
        return Uint8Array.from(v2.toArray());
      }
      throw new Error("invalid type");
    };
    function uint8ArrayToBigInt$1(buf) {
      const hex = bytesToHex$2(buf);
      if (hex === "0x") {
        return BigInt(0);
      }
      return BigInt(hex);
    }
    function bigIntToUint8Array$1(num) {
      return toUint8Array(`0x${num.toString(16)}`);
    }
    const zeros = function(bytes2) {
      return new Uint8Array(bytes2).fill(0);
    };
    const setLength = function(msg, length, right) {
      const buf = zeros(length);
      if (msg.length < length) {
        buf.set(msg, length - msg.length);
        return buf;
      }
      return msg.subarray(-length);
    };
    function assertIsUint8Array(input) {
      if (!isUint8Array(input)) {
        const msg = `This method only supports Uint8Array but input was: ${input}`;
        throw new Error(msg);
      }
    }
    const setLengthLeft = function(msg, length) {
      assertIsUint8Array(msg);
      return setLength(msg, length);
    };
    function stripZeros(a) {
      let first = a[0];
      while (a.length > 0 && first.toString() === "0") {
        a = a.slice(1);
        first = a[0];
      }
      return a;
    }
    const unpadUint8Array = function(a) {
      assertIsUint8Array(a);
      return stripZeros(a);
    };
    const bigIntToHex = (num) => `0x${num.toString(16)}`;
    function bigIntToUnpaddedUint8Array(value) {
      return unpadUint8Array(bigIntToUint8Array$1(value));
    }
    function calculateSigRecovery(v2, chainId) {
      if (v2 === BigInt(0) || v2 === BigInt(1))
        return v2;
      if (chainId === void 0) {
        return v2 - BigInt(27);
      }
      return v2 - (chainId * BigInt(2) + BigInt(35));
    }
    function isValidSigRecovery(recovery) {
      return recovery === BigInt(0) || recovery === BigInt(1);
    }
    const ecrecover = function(msgHash, v2, r2, s, chainId) {
      const recovery = calculateSigRecovery(v2, chainId);
      if (!isValidSigRecovery(recovery)) {
        throw new Error("Invalid signature v value");
      }
      const senderPubKey = new secp256k1.Signature(uint8ArrayToBigInt$1(r2), uint8ArrayToBigInt$1(s)).addRecoveryBit(Number(recovery)).recoverPublicKey(msgHash).toRawBytes(false);
      return senderPubKey.slice(1);
    };
    function toType(input, outputType) {
      if (input === null) {
        return null;
      }
      if (input === void 0) {
        return void 0;
      }
      if (typeof input === "string" && !isHexString(input)) {
        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);
      } else if (typeof input === "number" && !Number.isSafeInteger(input)) {
        throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");
      }
      const output2 = toUint8Array(input);
      switch (outputType) {
        case TypeOutput.Uint8Array:
          return output2;
        case TypeOutput.BigInt:
          return uint8ArrayToBigInt$1(output2);
        case TypeOutput.Number: {
          const bigInt = uint8ArrayToBigInt$1(output2);
          if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {
            throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");
          }
          return Number(bigInt);
        }
        case TypeOutput.PrefixedHexString:
          return bytesToHex$2(output2);
        default:
          throw new Error("unknown outputType");
      }
    }
    var dist = {};
    Object.defineProperty(dist, "__esModule", { value: true });
    var RLP = dist.RLP = dist.utils = dist.decode = dist.encode = void 0;
    function encode(input) {
      if (Array.isArray(input)) {
        const output2 = [];
        let outputLength = 0;
        for (let i = 0; i < input.length; i++) {
          const encoded = encode(input[i]);
          output2.push(encoded);
          outputLength += encoded.length;
        }
        return concatBytes(encodeLength(outputLength, 192), ...output2);
      }
      const inputBuf = toBytes(input);
      if (inputBuf.length === 1 && inputBuf[0] < 128) {
        return inputBuf;
      }
      return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);
    }
    dist.encode = encode;
    function safeSlice(input, start, end) {
      if (end > input.length) {
        throw new Error("invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds");
      }
      return input.slice(start, end);
    }
    function decodeLength(v2) {
      if (v2[0] === 0) {
        throw new Error("invalid RLP: extra zeros");
      }
      return parseHexByte(bytesToHex(v2));
    }
    function encodeLength(len, offset) {
      if (len < 56) {
        return Uint8Array.from([len + offset]);
      }
      const hexLength = numberToHex(len);
      const lLength = hexLength.length / 2;
      const firstByte = numberToHex(offset + 55 + lLength);
      return Uint8Array.from(hexToBytes(firstByte + hexLength));
    }
    function decode(input, stream = false) {
      if (typeof input === "undefined" || input === null || input.length === 0) {
        return Uint8Array.from([]);
      }
      const inputBytes = toBytes(input);
      const decoded = _decode(inputBytes);
      if (stream) {
        return decoded;
      }
      if (decoded.remainder.length !== 0) {
        throw new Error("invalid RLP: remainder must be zero");
      }
      return decoded.data;
    }
    dist.decode = decode;
    function _decode(input) {
      let length, llength, data, innerRemainder, d;
      const decoded = [];
      const firstByte = input[0];
      if (firstByte <= 127) {
        return {
          data: input.slice(0, 1),
          remainder: input.slice(1)
        };
      } else if (firstByte <= 183) {
        length = firstByte - 127;
        if (firstByte === 128) {
          data = Uint8Array.from([]);
        } else {
          data = safeSlice(input, 1, length);
        }
        if (length === 2 && data[0] < 128) {
          throw new Error("invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed");
        }
        return {
          data,
          remainder: input.slice(length)
        };
      } else if (firstByte <= 191) {
        llength = firstByte - 182;
        if (input.length - 1 < llength) {
          throw new Error("invalid RLP: not enough bytes for string length");
        }
        length = decodeLength(safeSlice(input, 1, llength));
        if (length <= 55) {
          throw new Error("invalid RLP: expected string length to be greater than 55");
        }
        data = safeSlice(input, llength, length + llength);
        return {
          data,
          remainder: input.slice(length + llength)
        };
      } else if (firstByte <= 247) {
        length = firstByte - 191;
        innerRemainder = safeSlice(input, 1, length);
        while (innerRemainder.length) {
          d = _decode(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(length)
        };
      } else {
        llength = firstByte - 246;
        length = decodeLength(safeSlice(input, 1, llength));
        if (length < 56) {
          throw new Error("invalid RLP: encoded list too short");
        }
        const totalLength = llength + length;
        if (totalLength > input.length) {
          throw new Error("invalid RLP: total length is larger than the data");
        }
        innerRemainder = safeSlice(input, llength, totalLength);
        while (innerRemainder.length) {
          d = _decode(innerRemainder);
          decoded.push(d.data);
          innerRemainder = d.remainder;
        }
        return {
          data: decoded,
          remainder: input.slice(totalLength)
        };
      }
    }
    const cachedHexes = Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex(uint8a) {
      let hex = "";
      for (let i = 0; i < uint8a.length; i++) {
        hex += cachedHexes[uint8a[i]];
      }
      return hex;
    }
    function parseHexByte(hexByte) {
      const byte = Number.parseInt(hexByte, 16);
      if (Number.isNaN(byte))
        throw new Error("Invalid byte sequence");
      return byte;
    }
    function hexToBytes(hex) {
      if (typeof hex !== "string") {
        throw new TypeError("hexToBytes: expected string, got " + typeof hex);
      }
      if (hex.length % 2)
        throw new Error("hexToBytes: received invalid unpadded hex");
      const array = new Uint8Array(hex.length / 2);
      for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        array[i] = parseHexByte(hex.slice(j, j + 2));
      }
      return array;
    }
    function concatBytes(...arrays) {
      if (arrays.length === 1)
        return arrays[0];
      const length = arrays.reduce((a, arr) => a + arr.length, 0);
      const result = new Uint8Array(length);
      for (let i = 0, pad = 0; i < arrays.length; i++) {
        const arr = arrays[i];
        result.set(arr, pad);
        pad += arr.length;
      }
      return result;
    }
    function utf8ToBytes(utf) {
      return new TextEncoder().encode(utf);
    }
    function numberToHex(integer) {
      if (integer < 0) {
        throw new Error("Invalid integer as argument, must be unsigned!");
      }
      const hex = integer.toString(16);
      return hex.length % 2 ? `0${hex}` : hex;
    }
    function padToEven(a) {
      return a.length % 2 ? `0${a}` : a;
    }
    function isHexPrefixed(str) {
      return str.length >= 2 && str[0] === "0" && str[1] === "x";
    }
    function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    }
    function toBytes(v2) {
      if (v2 instanceof Uint8Array) {
        return v2;
      }
      if (typeof v2 === "string") {
        if (isHexPrefixed(v2)) {
          return hexToBytes(padToEven(stripHexPrefix(v2)));
        }
        return utf8ToBytes(v2);
      }
      if (typeof v2 === "number" || typeof v2 === "bigint") {
        if (!v2) {
          return Uint8Array.from([]);
        }
        return hexToBytes(numberToHex(v2));
      }
      if (v2 === null || v2 === void 0) {
        return Uint8Array.from([]);
      }
      throw new Error("toBytes: received unsupported type " + typeof v2);
    }
    dist.utils = {
      bytesToHex,
      concatBytes,
      hexToBytes,
      utf8ToBytes
    };
    RLP = dist.RLP = { encode, decode };
    var crc32 = {};
    /*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */
    (function(exports2) {
      (function(factory) {
        if (typeof DO_NOT_EXPORT_CRC === "undefined") {
          {
            factory(exports2);
          }
        } else {
          factory({});
        }
      })(function(CRC32) {
        CRC32.version = "1.2.2";
        function signed_crc_table() {
          var c = 0, table = new Array(256);
          for (var n2 = 0; n2 != 256; ++n2) {
            c = n2;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            c = c & 1 ? -306674912 ^ c >>> 1 : c >>> 1;
            table[n2] = c;
          }
          return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
        }
        var T02 = signed_crc_table();
        function slice_by_16_tables(T10) {
          var c = 0, v2 = 0, n2 = 0, table = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
          for (n2 = 0; n2 != 256; ++n2) table[n2] = T10[n2];
          for (n2 = 0; n2 != 256; ++n2) {
            v2 = T10[n2];
            for (c = 256 + n2; c < 4096; c += 256) v2 = table[c] = v2 >>> 8 ^ T10[v2 & 255];
          }
          var out = [];
          for (n2 = 1; n2 != 16; ++n2) out[n2 - 1] = typeof Int32Array !== "undefined" ? table.subarray(n2 * 256, n2 * 256 + 256) : table.slice(n2 * 256, n2 * 256 + 256);
          return out;
        }
        var TT = slice_by_16_tables(T02);
        var T12 = TT[0], T2 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
        var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta2 = TT[9];
        var Tb2 = TT[10], Tc2 = TT[11], Td2 = TT[12], Te2 = TT[13], Tf2 = TT[14];
        function crc32_bstr(bstr, seed) {
          var C2 = seed ^ -1;
          for (var i = 0, L2 = bstr.length; i < L2; ) C2 = C2 >>> 8 ^ T02[(C2 ^ bstr.charCodeAt(i++)) & 255];
          return ~C2;
        }
        function crc32_buf(B2, seed) {
          var C2 = seed ^ -1, L2 = B2.length - 15, i = 0;
          for (; i < L2; ) C2 = Tf2[B2[i++] ^ C2 & 255] ^ Te2[B2[i++] ^ C2 >> 8 & 255] ^ Td2[B2[i++] ^ C2 >> 16 & 255] ^ Tc2[B2[i++] ^ C2 >>> 24] ^ Tb2[B2[i++]] ^ Ta2[B2[i++]] ^ T9[B2[i++]] ^ T8[B2[i++]] ^ T7[B2[i++]] ^ T6[B2[i++]] ^ T5[B2[i++]] ^ T4[B2[i++]] ^ T3[B2[i++]] ^ T2[B2[i++]] ^ T12[B2[i++]] ^ T02[B2[i++]];
          L2 += 15;
          while (i < L2) C2 = C2 >>> 8 ^ T02[(C2 ^ B2[i++]) & 255];
          return ~C2;
        }
        function crc32_str(str, seed) {
          var C2 = seed ^ -1;
          for (var i = 0, L2 = str.length, c = 0, d = 0; i < L2; ) {
            c = str.charCodeAt(i++);
            if (c < 128) {
              C2 = C2 >>> 8 ^ T02[(C2 ^ c) & 255];
            } else if (c < 2048) {
              C2 = C2 >>> 8 ^ T02[(C2 ^ (192 | c >> 6 & 31)) & 255];
              C2 = C2 >>> 8 ^ T02[(C2 ^ (128 | c & 63)) & 255];
            } else if (c >= 55296 && c < 57344) {
              c = (c & 1023) + 64;
              d = str.charCodeAt(i++) & 1023;
              C2 = C2 >>> 8 ^ T02[(C2 ^ (240 | c >> 8 & 7)) & 255];
              C2 = C2 >>> 8 ^ T02[(C2 ^ (128 | c >> 2 & 63)) & 255];
              C2 = C2 >>> 8 ^ T02[(C2 ^ (128 | d >> 6 & 15 | (c & 3) << 4)) & 255];
              C2 = C2 >>> 8 ^ T02[(C2 ^ (128 | d & 63)) & 255];
            } else {
              C2 = C2 >>> 8 ^ T02[(C2 ^ (224 | c >> 12 & 15)) & 255];
              C2 = C2 >>> 8 ^ T02[(C2 ^ (128 | c >> 6 & 63)) & 255];
              C2 = C2 >>> 8 ^ T02[(C2 ^ (128 | c & 63)) & 255];
            }
          }
          return ~C2;
        }
        CRC32.table = T02;
        CRC32.bstr = crc32_bstr;
        CRC32.buf = crc32_buf;
        CRC32.str = crc32_str;
      });
    })(crc32);
    const pkg = /* @__PURE__ */ getDefaultExportFromCjs(crc32);
    const goerli = {
      "name": "goerli",
      "chainId": 5,
      "networkId": 5,
      "defaultHardfork": "merge",
      "consensus": {
        "type": "poa",
        "algorithm": "clique",
        "clique": {
          "period": 15,
          "epoch": 3e4
        }
      },
      "comment": "Cross-client PoA test network",
      "url": "https://github.com/goerli/testnet",
      "genesis": {
        "timestamp": "0x5c51a607",
        "gasLimit": 10485760,
        "difficulty": 1,
        "nonce": "0x0000000000000000",
        "extraData": "0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
      },
      "hardforks": [
        {
          "name": "chainstart",
          "block": 0,
          "forkHash": "0xa3f5ab08"
        },
        {
          "name": "homestead",
          "block": 0,
          "forkHash": "0xa3f5ab08"
        },
        {
          "name": "tangerineWhistle",
          "block": 0,
          "forkHash": "0xa3f5ab08"
        },
        {
          "name": "spuriousDragon",
          "block": 0,
          "forkHash": "0xa3f5ab08"
        },
        {
          "name": "byzantium",
          "block": 0,
          "forkHash": "0xa3f5ab08"
        },
        {
          "name": "constantinople",
          "block": 0,
          "forkHash": "0xa3f5ab08"
        },
        {
          "name": "petersburg",
          "block": 0,
          "forkHash": "0xa3f5ab08"
        },
        {
          "name": "istanbul",
          "block": 1561651,
          "forkHash": "0xc25efa5c"
        },
        {
          "name": "berlin",
          "block": 4460644,
          "forkHash": "0x757a1c47"
        },
        {
          "name": "london",
          "block": 5062605,
          "forkHash": "0xb8c6299d"
        },
        {
          "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818",
          "name": "merge",
          "ttd": "10790000",
          "block": 7382819,
          "forkHash": "0xb8c6299d"
        },
        {
          "name": "mergeForkIdTransition",
          "block": null,
          "forkHash": null
        },
        {
          "name": "shanghai",
          "block": null,
          "forkHash": null
        }
      ],
      "bootstrapNodes": [],
      "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"
      ]
    };
    const mainnet$1 = {
      "name": "mainnet",
      "chainId": 1,
      "networkId": 1,
      "defaultHardfork": "merge",
      "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
      },
      "comment": "The Ethereum main chain",
      "url": "https://ethstats.net/",
      "genesis": {
        "gasLimit": 5e3,
        "difficulty": 17179869184,
        "nonce": "0x0000000000000042",
        "extraData": "0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"
      },
      "hardforks": [
        {
          "name": "chainstart",
          "block": 0,
          "forkHash": "0xfc64ec04"
        },
        {
          "name": "homestead",
          "block": 115e4,
          "forkHash": "0x97c2c34c"
        },
        {
          "name": "dao",
          "block": 192e4,
          "forkHash": "0x91d1f948"
        },
        {
          "name": "tangerineWhistle",
          "block": 2463e3,
          "forkHash": "0x7a64da13"
        },
        {
          "name": "spuriousDragon",
          "block": 2675e3,
          "forkHash": "0x3edd5b10"
        },
        {
          "name": "byzantium",
          "block": 437e4,
          "forkHash": "0xa00bc324"
        },
        {
          "name": "constantinople",
          "block": 728e4,
          "forkHash": "0x668db0af"
        },
        {
          "name": "petersburg",
          "block": 728e4,
          "forkHash": "0x668db0af"
        },
        {
          "name": "istanbul",
          "block": 9069e3,
          "forkHash": "0x879d6e30"
        },
        {
          "name": "muirGlacier",
          "block": 92e5,
          "forkHash": "0xe029e991"
        },
        {
          "name": "berlin",
          "block": 12244e3,
          "forkHash": "0x0eb440f6"
        },
        {
          "name": "london",
          "block": 12965e3,
          "forkHash": "0xb715077d"
        },
        {
          "name": "arrowGlacier",
          "block": 13773e3,
          "forkHash": "0x20c327fc"
        },
        {
          "name": "grayGlacier",
          "block": 1505e4,
          "forkHash": "0xf0afd0e3"
        },
        {
          "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393",
          "name": "merge",
          "ttd": "58750000000000000000000",
          "block": 15537394,
          "forkHash": "0xf0afd0e3"
        },
        {
          "name": "mergeForkIdTransition",
          "block": null,
          "forkHash": null
        },
        {
          "name": "shanghai",
          "block": null,
          "forkHash": null
        }
      ],
      "bootstrapNodes": [],
      "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"
      ]
    };
    const sepolia = {
      "name": "sepolia",
      "chainId": 11155111,
      "networkId": 11155111,
      "defaultHardfork": "merge",
      "consensus": {
        "type": "pow",
        "algorithm": "ethash",
        "ethash": {}
      },
      "comment": "PoW test network to replace Ropsten",
      "url": "https://github.com/ethereum/go-ethereum/pull/23730",
      "genesis": {
        "timestamp": "0x6159af19",
        "gasLimit": 3e7,
        "difficulty": 131072,
        "nonce": "0x0000000000000000",
        "extraData": "0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"
      },
      "hardforks": [
        {
          "name": "chainstart",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "homestead",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "tangerineWhistle",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "spuriousDragon",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "byzantium",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "constantinople",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "petersburg",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "istanbul",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "muirGlacier",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "berlin",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "london",
          "block": 0,
          "forkHash": "0xfe3366e7"
        },
        {
          "//_comment": "The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408",
          "name": "merge",
          "ttd": "17000000000000000",
          "block": 1450409,
          "forkHash": "0xfe3366e7"
        },
        {
          "name": "mergeForkIdTransition",
          "block": 1735371,
          "forkHash": "0xb96cbd13"
        },
        {
          "name": "shanghai",
          "block": null,
          "timestamp": "1677557088",
          "forkHash": "0xf7f9bc08"
        }
      ],
      "bootstrapNodes": [],
      "dnsNetworks": [
        "enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"
      ]
    };
    const e1153 = {
      "name": "EIP-1153",
      "number": 1153,
      "comment": "Transient Storage",
      "url": "https://eips.ethereum.org/EIPS/eip-1153",
      "status": "Review",
      "minimumHardfork": "chainstart",
      "requiredEIPs": [],
      "gasConfig": {},
      "gasPrices": {
        "tstore": {
          "v": 100,
          "d": "Base fee of the TSTORE opcode"
        },
        "tload": {
          "v": 100,
          "d": "Base fee of the TLOAD opcode"
        }
      },
      "vm": {},
      "pow": {}
    };
    const e1559 = {
      "name": "EIP-1559",
      "number": 1559,
      "comment": "Fee market change for ETH 1.0 chain",
      "url": "https://eips.ethereum.org/EIPS/eip-1559",
      "status": "Final",
      "minimumHardfork": "berlin",
      "requiredEIPs": [2930],
      "gasConfig": {
        "baseFeeMaxChangeDenominator": {
          "v": 8,
          "d": "Maximum base fee change denominator"
        },
        "elasticityMultiplier": {
          "v": 2,
          "d": "Maximum block gas target elasticity"
        },
        "initialBaseFee": {
          "v": 1e9,
          "d": "Initial base fee on first EIP1559 block"
        }
      },
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const e2315 = {
      "name": "EIP-2315",
      "number": 2315,
      "comment": "Simple subroutines for the EVM",
      "url": "https://eips.ethereum.org/EIPS/eip-2315",
      "status": "Draft",
      "minimumHardfork": "istanbul",
      "gasConfig": {},
      "gasPrices": {
        "beginsub": {
          "v": 2,
          "d": "Base fee of the BEGINSUB opcode"
        },
        "returnsub": {
          "v": 5,
          "d": "Base fee of the RETURNSUB opcode"
        },
        "jumpsub": {
          "v": 10,
          "d": "Base fee of the JUMPSUB opcode"
        }
      },
      "vm": {},
      "pow": {}
    };
    const e2537 = {
      "name": "EIP-2537",
      "number": 2537,
      "comment": "BLS12-381 precompiles",
      "url": "https://eips.ethereum.org/EIPS/eip-2537",
      "status": "Draft",
      "minimumHardfork": "chainstart",
      "gasConfig": {},
      "gasPrices": {
        "Bls12381G1AddGas": {
          "v": 600,
          "d": "Gas cost of a single BLS12-381 G1 addition precompile-call"
        },
        "Bls12381G1MulGas": {
          "v": 12e3,
          "d": "Gas cost of a single BLS12-381 G1 multiplication precompile-call"
        },
        "Bls12381G2AddGas": {
          "v": 4500,
          "d": "Gas cost of a single BLS12-381 G2 addition precompile-call"
        },
        "Bls12381G2MulGas": {
          "v": 55e3,
          "d": "Gas cost of a single BLS12-381 G2 multiplication precompile-call"
        },
        "Bls12381PairingBaseGas": {
          "v": 115e3,
          "d": "Base gas cost of BLS12-381 pairing check"
        },
        "Bls12381PairingPerPairGas": {
          "v": 23e3,
          "d": "Per-pair gas cost of BLS12-381 pairing check"
        },
        "Bls12381MapG1Gas": {
          "v": 5500,
          "d": "Gas cost of BLS12-381 map field element to G1"
        },
        "Bls12381MapG2Gas": {
          "v": 11e4,
          "d": "Gas cost of BLS12-381 map field element to G2"
        },
        "Bls12381MultiExpGasDiscount": {
          "v": [
            [1, 1200],
            [2, 888],
            [3, 764],
            [4, 641],
            [5, 594],
            [6, 547],
            [7, 500],
            [8, 453],
            [9, 438],
            [10, 423],
            [11, 408],
            [12, 394],
            [13, 379],
            [14, 364],
            [15, 349],
            [16, 334],
            [17, 330],
            [18, 326],
            [19, 322],
            [20, 318],
            [21, 314],
            [22, 310],
            [23, 306],
            [24, 302],
            [25, 298],
            [26, 294],
            [27, 289],
            [28, 285],
            [29, 281],
            [30, 277],
            [31, 273],
            [32, 269],
            [33, 268],
            [34, 266],
            [35, 265],
            [36, 263],
            [37, 262],
            [38, 260],
            [39, 259],
            [40, 257],
            [41, 256],
            [42, 254],
            [43, 253],
            [44, 251],
            [45, 250],
            [46, 248],
            [47, 247],
            [48, 245],
            [49, 244],
            [50, 242],
            [51, 241],
            [52, 239],
            [53, 238],
            [54, 236],
            [55, 235],
            [56, 233],
            [57, 232],
            [58, 231],
            [59, 229],
            [60, 228],
            [61, 226],
            [62, 225],
            [63, 223],
            [64, 222],
            [65, 221],
            [66, 220],
            [67, 219],
            [68, 219],
            [69, 218],
            [70, 217],
            [71, 216],
            [72, 216],
            [73, 215],
            [74, 214],
            [75, 213],
            [76, 213],
            [77, 212],
            [78, 211],
            [79, 211],
            [80, 210],
            [81, 209],
            [82, 208],
            [83, 208],
            [84, 207],
            [85, 206],
            [86, 205],
            [87, 205],
            [88, 204],
            [89, 203],
            [90, 202],
            [91, 202],
            [92, 201],
            [93, 200],
            [94, 199],
            [95, 199],
            [96, 198],
            [97, 197],
            [98, 196],
            [99, 196],
            [100, 195],
            [101, 194],
            [102, 193],
            [103, 193],
            [104, 192],
            [105, 191],
            [106, 191],
            [107, 190],
            [108, 189],
            [109, 188],
            [110, 188],
            [111, 187],
            [112, 186],
            [113, 185],
            [114, 185],
            [115, 184],
            [116, 183],
            [117, 182],
            [118, 182],
            [119, 181],
            [120, 180],
            [121, 179],
            [122, 179],
            [123, 178],
            [124, 177],
            [125, 176],
            [126, 176],
            [127, 175],
            [128, 174]
          ],
          "d": "Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"
        }
      },
      "vm": {},
      "pow": {}
    };
    const e2565 = {
      "name": "EIP-2565",
      "number": 2565,
      "comment": "ModExp gas cost",
      "url": "https://eips.ethereum.org/EIPS/eip-2565",
      "status": "Final",
      "minimumHardfork": "byzantium",
      "gasConfig": {},
      "gasPrices": {
        "modexpGquaddivisor": {
          "v": 3,
          "d": "Gquaddivisor from modexp precompile for gas calculation"
        }
      },
      "vm": {},
      "pow": {}
    };
    const e2718 = {
      "name": "EIP-2718",
      "comment": "Typed Transaction Envelope",
      "url": "https://eips.ethereum.org/EIPS/eip-2718",
      "status": "Final",
      "minimumHardfork": "chainstart",
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const e2929 = {
      "name": "EIP-2929",
      "comment": "Gas cost increases for state access opcodes",
      "url": "https://eips.ethereum.org/EIPS/eip-2929",
      "status": "Final",
      "minimumHardfork": "chainstart",
      "gasConfig": {},
      "gasPrices": {
        "coldsload": {
          "v": 2100,
          "d": "Gas cost of the first read of storage from a given location (per transaction)"
        },
        "coldaccountaccess": {
          "v": 2600,
          "d": "Gas cost of the first read of a given address (per transaction)"
        },
        "warmstorageread": {
          "v": 100,
          "d": "Gas cost of reading storage locations which have already loaded 'cold'"
        },
        "sstoreCleanGasEIP2200": {
          "v": 2900,
          "d": "Once per SSTORE operation from clean non-zero to something else"
        },
        "sstoreNoopGasEIP2200": {
          "v": 100,
          "d": "Once per SSTORE operation if the value doesn't change"
        },
        "sstoreDirtyGasEIP2200": {
          "v": 100,
          "d": "Once per SSTORE operation if a dirty value is changed"
        },
        "sstoreInitRefundEIP2200": {
          "v": 19900,
          "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "sstoreCleanRefundEIP2200": {
          "v": 4900,
          "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "call": {
          "v": 0,
          "d": "Base fee of the CALL opcode"
        },
        "callcode": {
          "v": 0,
          "d": "Base fee of the CALLCODE opcode"
        },
        "delegatecall": {
          "v": 0,
          "d": "Base fee of the DELEGATECALL opcode"
        },
        "staticcall": {
          "v": 0,
          "d": "Base fee of the STATICCALL opcode"
        },
        "balance": {
          "v": 0,
          "d": "Base fee of the BALANCE opcode"
        },
        "extcodesize": {
          "v": 0,
          "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
          "v": 0,
          "d": "Base fee of the EXTCODECOPY opcode"
        },
        "extcodehash": {
          "v": 0,
          "d": "Base fee of the EXTCODEHASH opcode"
        },
        "sload": {
          "v": 0,
          "d": "Base fee of the SLOAD opcode"
        },
        "sstore": {
          "v": 0,
          "d": "Base fee of the SSTORE opcode"
        }
      },
      "vm": {},
      "pow": {}
    };
    const e2930 = {
      "name": "EIP-2930",
      "comment": "Optional access lists",
      "url": "https://eips.ethereum.org/EIPS/eip-2930",
      "status": "Final",
      "minimumHardfork": "istanbul",
      "requiredEIPs": [2718, 2929],
      "gasConfig": {},
      "gasPrices": {
        "accessListStorageKeyCost": {
          "v": 1900,
          "d": "Gas cost per storage key in an Access List transaction"
        },
        "accessListAddressCost": {
          "v": 2400,
          "d": "Gas cost per storage key in an Access List transaction"
        }
      },
      "vm": {},
      "pow": {}
    };
    const e3198 = {
      "name": "EIP-3198",
      "number": 3198,
      "comment": "BASEFEE opcode",
      "url": "https://eips.ethereum.org/EIPS/eip-3198",
      "status": "Final",
      "minimumHardfork": "london",
      "gasConfig": {},
      "gasPrices": {
        "basefee": {
          "v": 2,
          "d": "Gas cost of the BASEFEE opcode"
        }
      },
      "vm": {},
      "pow": {}
    };
    const e3529 = {
      "name": "EIP-3529",
      "comment": "Reduction in refunds",
      "url": "https://eips.ethereum.org/EIPS/eip-3529",
      "status": "Final",
      "minimumHardfork": "berlin",
      "requiredEIPs": [2929],
      "gasConfig": {
        "maxRefundQuotient": {
          "v": 5,
          "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
        }
      },
      "gasPrices": {
        "selfdestructRefund": {
          "v": 0,
          "d": "Refunded following a selfdestruct operation"
        },
        "sstoreClearRefundEIP2200": {
          "v": 4800,
          "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        }
      },
      "vm": {},
      "pow": {}
    };
    const e3540 = {
      "name": "EIP-3540",
      "number": 3540,
      "comment": "EVM Object Format (EOF) v1",
      "url": "https://eips.ethereum.org/EIPS/eip-3540",
      "status": "Review",
      "minimumHardfork": "london",
      "requiredEIPs": [3541],
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const e3541 = {
      "name": "EIP-3541",
      "comment": "Reject new contracts starting with the 0xEF byte",
      "url": "https://eips.ethereum.org/EIPS/eip-3541",
      "status": "Final",
      "minimumHardfork": "berlin",
      "requiredEIPs": [],
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const e3554 = {
      "name": "EIP-3554",
      "comment": "Reduction in refunds",
      "url": "Difficulty Bomb Delay to December 1st 2021",
      "status": "Final",
      "minimumHardfork": "muirGlacier",
      "requiredEIPs": [],
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {
        "difficultyBombDelay": {
          "v": 95e5,
          "d": "the amount of blocks to delay the difficulty bomb with"
        }
      }
    };
    const e3607 = {
      "name": "EIP-3607",
      "number": 3607,
      "comment": "Reject transactions from senders with deployed code",
      "url": "https://eips.ethereum.org/EIPS/eip-3607",
      "status": "Final",
      "minimumHardfork": "chainstart",
      "requiredEIPs": [],
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const e3651 = {
      "name": "EIP-3651",
      "number": 3198,
      "comment": "Warm COINBASE",
      "url": "https://eips.ethereum.org/EIPS/eip-3651",
      "status": "Review",
      "minimumHardfork": "london",
      "requiredEIPs": [2929],
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const e3670 = {
      "name": "EIP-3670",
      "number": 3670,
      "comment": "EOF - Code Validation",
      "url": "https://eips.ethereum.org/EIPS/eip-3670",
      "status": "Review",
      "minimumHardfork": "london",
      "requiredEIPs": [3540],
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const e3675 = {
      "name": "EIP-3675",
      "number": 3675,
      "comment": "Upgrade consensus to Proof-of-Stake",
      "url": "https://eips.ethereum.org/EIPS/eip-3675",
      "status": "Final",
      "minimumHardfork": "london",
      "requiredEIPs": [],
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const e3855 = {
      "name": "EIP-3855",
      "number": 3855,
      "comment": "PUSH0 instruction",
      "url": "https://eips.ethereum.org/EIPS/eip-3855",
      "status": "Review",
      "minimumHardfork": "chainstart",
      "requiredEIPs": [],
      "gasConfig": {},
      "gasPrices": {
        "push0": {
          "v": 2,
          "d": "Base fee of the PUSH0 opcode"
        }
      },
      "vm": {},
      "pow": {}
    };
    const e3860 = {
      "name": "EIP-3860",
      "number": 3860,
      "comment": "Limit and meter initcode",
      "url": "https://eips.ethereum.org/EIPS/eip-3860",
      "status": "Review",
      "minimumHardfork": "spuriousDragon",
      "requiredEIPs": [],
      "gasConfig": {},
      "gasPrices": {
        "initCodeWordCost": {
          "v": 2,
          "d": "Gas to pay for each word (32 bytes) of initcode when creating a contract"
        }
      },
      "vm": {
        "maxInitCodeSize": {
          "v": 49152,
          "d": "Maximum length of initialization code when creating a contract"
        }
      },
      "pow": {}
    };
    const e4345 = {
      "name": "EIP-4345",
      "number": 4345,
      "comment": "Difficulty Bomb Delay to June 2022",
      "url": "https://eips.ethereum.org/EIPS/eip-4345",
      "status": "Final",
      "minimumHardfork": "london",
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {
        "difficultyBombDelay": {
          "v": 107e5,
          "d": "the amount of blocks to delay the difficulty bomb with"
        }
      }
    };
    const e4399 = {
      "name": "EIP-4399",
      "number": 4399,
      "comment": "Supplant DIFFICULTY opcode with PREVRANDAO",
      "url": "https://eips.ethereum.org/EIPS/eip-4399",
      "status": "Review",
      "minimumHardfork": "london",
      "requiredEIPs": [],
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const e5133 = {
      "name": "EIP-5133",
      "number": 5133,
      "comment": "Delaying Difficulty Bomb to mid-September 2022",
      "url": "https://eips.ethereum.org/EIPS/eip-5133",
      "status": "Draft",
      "minimumHardfork": "grayGlacier",
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {
        "difficultyBombDelay": {
          "v": 114e5,
          "d": "the amount of blocks to delay the difficulty bomb with"
        }
      }
    };
    const EIPs = {
      1153: e1153,
      1559: e1559,
      2315: e2315,
      2537: e2537,
      2565: e2565,
      2718: e2718,
      2929: e2929,
      2930: e2930,
      3198: e3198,
      3529: e3529,
      3540: e3540,
      3541: e3541,
      3554: e3554,
      3607: e3607,
      3651: e3651,
      3670: e3670,
      3675: e3675,
      3855: e3855,
      3860: e3860,
      4345: e4345,
      4399: e4399,
      5133: e5133
    };
    const chainstart = {
      "name": "chainstart",
      "comment": "Start of the Ethereum main chain",
      "url": "",
      "status": "",
      "gasConfig": {
        "minGasLimit": {
          "v": 5e3,
          "d": "Minimum the gas limit may ever be"
        },
        "gasLimitBoundDivisor": {
          "v": 1024,
          "d": "The bound divisor of the gas limit, used in update calculations"
        },
        "maxRefundQuotient": {
          "v": 2,
          "d": "Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"
        }
      },
      "gasPrices": {
        "base": {
          "v": 2,
          "d": "Gas base cost, used e.g. for ChainID opcode (Istanbul)"
        },
        "tierStep": {
          "v": [0, 2, 3, 5, 8, 10, 20],
          "d": "Once per operation, for a selection of them"
        },
        "exp": {
          "v": 10,
          "d": "Base fee of the EXP opcode"
        },
        "expByte": {
          "v": 10,
          "d": "Times ceil(log256(exponent)) for the EXP instruction"
        },
        "sha3": {
          "v": 30,
          "d": "Base fee of the SHA3 opcode"
        },
        "sha3Word": {
          "v": 6,
          "d": "Once per word of the SHA3 operation's data"
        },
        "sload": {
          "v": 50,
          "d": "Base fee of the SLOAD opcode"
        },
        "sstoreSet": {
          "v": 2e4,
          "d": "Once per SSTORE operation if the zeroness changes from zero"
        },
        "sstoreReset": {
          "v": 5e3,
          "d": "Once per SSTORE operation if the zeroness does not change from zero"
        },
        "sstoreRefund": {
          "v": 15e3,
          "d": "Once per SSTORE operation if the zeroness changes to zero"
        },
        "jumpdest": {
          "v": 1,
          "d": "Base fee of the JUMPDEST opcode"
        },
        "log": {
          "v": 375,
          "d": "Base fee of the LOG opcode"
        },
        "logData": {
          "v": 8,
          "d": "Per byte in a LOG* operation's data"
        },
        "logTopic": {
          "v": 375,
          "d": "Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"
        },
        "create": {
          "v": 32e3,
          "d": "Base fee of the CREATE opcode"
        },
        "call": {
          "v": 40,
          "d": "Base fee of the CALL opcode"
        },
        "callStipend": {
          "v": 2300,
          "d": "Free gas given at beginning of call"
        },
        "callValueTransfer": {
          "v": 9e3,
          "d": "Paid for CALL when the value transfor is non-zero"
        },
        "callNewAccount": {
          "v": 25e3,
          "d": "Paid for CALL when the destination address didn't exist prior"
        },
        "selfdestructRefund": {
          "v": 24e3,
          "d": "Refunded following a selfdestruct operation"
        },
        "memory": {
          "v": 3,
          "d": "Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"
        },
        "quadCoeffDiv": {
          "v": 512,
          "d": "Divisor for the quadratic particle of the memory cost equation"
        },
        "createData": {
          "v": 200,
          "d": ""
        },
        "tx": {
          "v": 21e3,
          "d": "Per transaction. NOTE: Not payable on data of calls between transactions"
        },
        "txCreation": {
          "v": 32e3,
          "d": "The cost of creating a contract via tx"
        },
        "txDataZero": {
          "v": 4,
          "d": "Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"
        },
        "txDataNonZero": {
          "v": 68,
          "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
        },
        "copy": {
          "v": 3,
          "d": "Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"
        },
        "ecRecover": {
          "v": 3e3,
          "d": ""
        },
        "sha256": {
          "v": 60,
          "d": ""
        },
        "sha256Word": {
          "v": 12,
          "d": ""
        },
        "ripemd160": {
          "v": 600,
          "d": ""
        },
        "ripemd160Word": {
          "v": 120,
          "d": ""
        },
        "identity": {
          "v": 15,
          "d": ""
        },
        "identityWord": {
          "v": 3,
          "d": ""
        },
        "stop": {
          "v": 0,
          "d": "Base fee of the STOP opcode"
        },
        "add": {
          "v": 3,
          "d": "Base fee of the ADD opcode"
        },
        "mul": {
          "v": 5,
          "d": "Base fee of the MUL opcode"
        },
        "sub": {
          "v": 3,
          "d": "Base fee of the SUB opcode"
        },
        "div": {
          "v": 5,
          "d": "Base fee of the DIV opcode"
        },
        "sdiv": {
          "v": 5,
          "d": "Base fee of the SDIV opcode"
        },
        "mod": {
          "v": 5,
          "d": "Base fee of the MOD opcode"
        },
        "smod": {
          "v": 5,
          "d": "Base fee of the SMOD opcode"
        },
        "addmod": {
          "v": 8,
          "d": "Base fee of the ADDMOD opcode"
        },
        "mulmod": {
          "v": 8,
          "d": "Base fee of the MULMOD opcode"
        },
        "signextend": {
          "v": 5,
          "d": "Base fee of the SIGNEXTEND opcode"
        },
        "lt": {
          "v": 3,
          "d": "Base fee of the LT opcode"
        },
        "gt": {
          "v": 3,
          "d": "Base fee of the GT opcode"
        },
        "slt": {
          "v": 3,
          "d": "Base fee of the SLT opcode"
        },
        "sgt": {
          "v": 3,
          "d": "Base fee of the SGT opcode"
        },
        "eq": {
          "v": 3,
          "d": "Base fee of the EQ opcode"
        },
        "iszero": {
          "v": 3,
          "d": "Base fee of the ISZERO opcode"
        },
        "and": {
          "v": 3,
          "d": "Base fee of the AND opcode"
        },
        "or": {
          "v": 3,
          "d": "Base fee of the OR opcode"
        },
        "xor": {
          "v": 3,
          "d": "Base fee of the XOR opcode"
        },
        "not": {
          "v": 3,
          "d": "Base fee of the NOT opcode"
        },
        "byte": {
          "v": 3,
          "d": "Base fee of the BYTE opcode"
        },
        "address": {
          "v": 2,
          "d": "Base fee of the ADDRESS opcode"
        },
        "balance": {
          "v": 20,
          "d": "Base fee of the BALANCE opcode"
        },
        "origin": {
          "v": 2,
          "d": "Base fee of the ORIGIN opcode"
        },
        "caller": {
          "v": 2,
          "d": "Base fee of the CALLER opcode"
        },
        "callvalue": {
          "v": 2,
          "d": "Base fee of the CALLVALUE opcode"
        },
        "calldataload": {
          "v": 3,
          "d": "Base fee of the CALLDATALOAD opcode"
        },
        "calldatasize": {
          "v": 2,
          "d": "Base fee of the CALLDATASIZE opcode"
        },
        "calldatacopy": {
          "v": 3,
          "d": "Base fee of the CALLDATACOPY opcode"
        },
        "codesize": {
          "v": 2,
          "d": "Base fee of the CODESIZE opcode"
        },
        "codecopy": {
          "v": 3,
          "d": "Base fee of the CODECOPY opcode"
        },
        "gasprice": {
          "v": 2,
          "d": "Base fee of the GASPRICE opcode"
        },
        "extcodesize": {
          "v": 20,
          "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
          "v": 20,
          "d": "Base fee of the EXTCODECOPY opcode"
        },
        "blockhash": {
          "v": 20,
          "d": "Base fee of the BLOCKHASH opcode"
        },
        "coinbase": {
          "v": 2,
          "d": "Base fee of the COINBASE opcode"
        },
        "timestamp": {
          "v": 2,
          "d": "Base fee of the TIMESTAMP opcode"
        },
        "number": {
          "v": 2,
          "d": "Base fee of the NUMBER opcode"
        },
        "difficulty": {
          "v": 2,
          "d": "Base fee of the DIFFICULTY opcode"
        },
        "gaslimit": {
          "v": 2,
          "d": "Base fee of the GASLIMIT opcode"
        },
        "pop": {
          "v": 2,
          "d": "Base fee of the POP opcode"
        },
        "mload": {
          "v": 3,
          "d": "Base fee of the MLOAD opcode"
        },
        "mstore": {
          "v": 3,
          "d": "Base fee of the MSTORE opcode"
        },
        "mstore8": {
          "v": 3,
          "d": "Base fee of the MSTORE8 opcode"
        },
        "sstore": {
          "v": 0,
          "d": "Base fee of the SSTORE opcode"
        },
        "jump": {
          "v": 8,
          "d": "Base fee of the JUMP opcode"
        },
        "jumpi": {
          "v": 10,
          "d": "Base fee of the JUMPI opcode"
        },
        "pc": {
          "v": 2,
          "d": "Base fee of the PC opcode"
        },
        "msize": {
          "v": 2,
          "d": "Base fee of the MSIZE opcode"
        },
        "gas": {
          "v": 2,
          "d": "Base fee of the GAS opcode"
        },
        "push": {
          "v": 3,
          "d": "Base fee of the PUSH opcode"
        },
        "dup": {
          "v": 3,
          "d": "Base fee of the DUP opcode"
        },
        "swap": {
          "v": 3,
          "d": "Base fee of the SWAP opcode"
        },
        "callcode": {
          "v": 40,
          "d": "Base fee of the CALLCODE opcode"
        },
        "return": {
          "v": 0,
          "d": "Base fee of the RETURN opcode"
        },
        "invalid": {
          "v": 0,
          "d": "Base fee of the INVALID opcode"
        },
        "selfdestruct": {
          "v": 0,
          "d": "Base fee of the SELFDESTRUCT opcode"
        }
      },
      "vm": {
        "stackLimit": {
          "v": 1024,
          "d": "Maximum size of VM stack allowed"
        },
        "callCreateDepth": {
          "v": 1024,
          "d": "Maximum depth of call/create stack"
        },
        "maxExtraDataSize": {
          "v": 32,
          "d": "Maximum size extra data may be after Genesis"
        }
      },
      "pow": {
        "minimumDifficulty": {
          "v": 131072,
          "d": "The minimum that the difficulty may ever be"
        },
        "difficultyBoundDivisor": {
          "v": 2048,
          "d": "The bound divisor of the difficulty, used in the update calculations"
        },
        "durationLimit": {
          "v": 13,
          "d": "The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"
        },
        "epochDuration": {
          "v": 3e4,
          "d": "Duration between proof-of-work epochs"
        },
        "timebombPeriod": {
          "v": 1e5,
          "d": "Exponential difficulty timebomb period"
        },
        "minerReward": {
          "v": "5000000000000000000",
          "d": "the amount a miner get rewarded for mining a block"
        },
        "difficultyBombDelay": {
          "v": 0,
          "d": "the amount of blocks to delay the difficulty bomb with"
        }
      }
    };
    const dao = {
      "name": "dao",
      "comment": "DAO rescue hardfork",
      "url": "https://eips.ethereum.org/EIPS/eip-779",
      "status": "Final",
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const homestead = {
      "name": "homestead",
      "comment": "Homestead hardfork with protocol and network changes",
      "url": "https://eips.ethereum.org/EIPS/eip-606",
      "status": "Final",
      "gasConfig": {},
      "gasPrices": {
        "delegatecall": {
          "v": 40,
          "d": "Base fee of the DELEGATECALL opcode"
        }
      },
      "vm": {},
      "pow": {}
    };
    const tangerineWhistle = {
      "name": "tangerineWhistle",
      "comment": "Hardfork with gas cost changes for IO-heavy operations",
      "url": "https://eips.ethereum.org/EIPS/eip-608",
      "status": "Final",
      "gasConfig": {},
      "gasPrices": {
        "sload": {
          "v": 200,
          "d": "Once per SLOAD operation"
        },
        "call": {
          "v": 700,
          "d": "Once per CALL operation & message call transaction"
        },
        "extcodesize": {
          "v": 700,
          "d": "Base fee of the EXTCODESIZE opcode"
        },
        "extcodecopy": {
          "v": 700,
          "d": "Base fee of the EXTCODECOPY opcode"
        },
        "balance": {
          "v": 400,
          "d": "Base fee of the BALANCE opcode"
        },
        "delegatecall": {
          "v": 700,
          "d": "Base fee of the DELEGATECALL opcode"
        },
        "callcode": {
          "v": 700,
          "d": "Base fee of the CALLCODE opcode"
        },
        "selfdestruct": {
          "v": 5e3,
          "d": "Base fee of the SELFDESTRUCT opcode"
        }
      },
      "vm": {},
      "pow": {}
    };
    const spuriousDragon = {
      "name": "spuriousDragon",
      "comment": "HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit",
      "url": "https://eips.ethereum.org/EIPS/eip-607",
      "status": "Final",
      "gasConfig": {},
      "gasPrices": {
        "expByte": {
          "v": 50,
          "d": "Times ceil(log256(exponent)) for the EXP instruction"
        }
      },
      "vm": {
        "maxCodeSize": {
          "v": 24576,
          "d": "Maximum length of contract code"
        }
      },
      "pow": {}
    };
    const byzantium = {
      "name": "byzantium",
      "comment": "Hardfork with new precompiles, instructions and other protocol changes",
      "url": "https://eips.ethereum.org/EIPS/eip-609",
      "status": "Final",
      "gasConfig": {},
      "gasPrices": {
        "modexpGquaddivisor": {
          "v": 20,
          "d": "Gquaddivisor from modexp precompile for gas calculation"
        },
        "ecAdd": {
          "v": 500,
          "d": "Gas costs for curve addition precompile"
        },
        "ecMul": {
          "v": 4e4,
          "d": "Gas costs for curve multiplication precompile"
        },
        "ecPairing": {
          "v": 1e5,
          "d": "Base gas costs for curve pairing precompile"
        },
        "ecPairingWord": {
          "v": 8e4,
          "d": "Gas costs regarding curve pairing precompile input length"
        },
        "revert": {
          "v": 0,
          "d": "Base fee of the REVERT opcode"
        },
        "staticcall": {
          "v": 700,
          "d": "Base fee of the STATICCALL opcode"
        },
        "returndatasize": {
          "v": 2,
          "d": "Base fee of the RETURNDATASIZE opcode"
        },
        "returndatacopy": {
          "v": 3,
          "d": "Base fee of the RETURNDATACOPY opcode"
        }
      },
      "vm": {},
      "pow": {
        "minerReward": {
          "v": "3000000000000000000",
          "d": "the amount a miner get rewarded for mining a block"
        },
        "difficultyBombDelay": {
          "v": 3e6,
          "d": "the amount of blocks to delay the difficulty bomb with"
        }
      }
    };
    const constantinople = {
      "name": "constantinople",
      "comment": "Postponed hardfork including EIP-1283 (SSTORE gas metering changes)",
      "url": "https://eips.ethereum.org/EIPS/eip-1013",
      "status": "Final",
      "gasConfig": {},
      "gasPrices": {
        "netSstoreNoopGas": {
          "v": 200,
          "d": "Once per SSTORE operation if the value doesn't change"
        },
        "netSstoreInitGas": {
          "v": 2e4,
          "d": "Once per SSTORE operation from clean zero"
        },
        "netSstoreCleanGas": {
          "v": 5e3,
          "d": "Once per SSTORE operation from clean non-zero"
        },
        "netSstoreDirtyGas": {
          "v": 200,
          "d": "Once per SSTORE operation from dirty"
        },
        "netSstoreClearRefund": {
          "v": 15e3,
          "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        },
        "netSstoreResetRefund": {
          "v": 4800,
          "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "netSstoreResetClearRefund": {
          "v": 19800,
          "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "shl": {
          "v": 3,
          "d": "Base fee of the SHL opcode"
        },
        "shr": {
          "v": 3,
          "d": "Base fee of the SHR opcode"
        },
        "sar": {
          "v": 3,
          "d": "Base fee of the SAR opcode"
        },
        "extcodehash": {
          "v": 400,
          "d": "Base fee of the EXTCODEHASH opcode"
        },
        "create2": {
          "v": 32e3,
          "d": "Base fee of the CREATE2 opcode"
        }
      },
      "vm": {},
      "pow": {
        "minerReward": {
          "v": "2000000000000000000",
          "d": "The amount a miner gets rewarded for mining a block"
        },
        "difficultyBombDelay": {
          "v": 5e6,
          "d": "the amount of blocks to delay the difficulty bomb with"
        }
      }
    };
    const petersburg = {
      "name": "petersburg",
      "comment": "Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople",
      "url": "https://eips.ethereum.org/EIPS/eip-1716",
      "status": "Final",
      "gasConfig": {},
      "gasPrices": {
        "netSstoreNoopGas": {
          "v": null,
          "d": "Removed along EIP-1283"
        },
        "netSstoreInitGas": {
          "v": null,
          "d": "Removed along EIP-1283"
        },
        "netSstoreCleanGas": {
          "v": null,
          "d": "Removed along EIP-1283"
        },
        "netSstoreDirtyGas": {
          "v": null,
          "d": "Removed along EIP-1283"
        },
        "netSstoreClearRefund": {
          "v": null,
          "d": "Removed along EIP-1283"
        },
        "netSstoreResetRefund": {
          "v": null,
          "d": "Removed along EIP-1283"
        },
        "netSstoreResetClearRefund": {
          "v": null,
          "d": "Removed along EIP-1283"
        }
      },
      "vm": {},
      "pow": {}
    };
    const istanbul = {
      "name": "istanbul",
      "comment": "HF targeted for December 2019 following the Constantinople/Petersburg HF",
      "url": "https://eips.ethereum.org/EIPS/eip-1679",
      "status": "Final",
      "gasConfig": {},
      "gasPrices": {
        "blake2Round": {
          "v": 1,
          "d": "Gas cost per round for the Blake2 F precompile"
        },
        "ecAdd": {
          "v": 150,
          "d": "Gas costs for curve addition precompile"
        },
        "ecMul": {
          "v": 6e3,
          "d": "Gas costs for curve multiplication precompile"
        },
        "ecPairing": {
          "v": 45e3,
          "d": "Base gas costs for curve pairing precompile"
        },
        "ecPairingWord": {
          "v": 34e3,
          "d": "Gas costs regarding curve pairing precompile input length"
        },
        "txDataNonZero": {
          "v": 16,
          "d": "Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"
        },
        "sstoreSentryGasEIP2200": {
          "v": 2300,
          "d": "Minimum gas required to be present for an SSTORE call, not consumed"
        },
        "sstoreNoopGasEIP2200": {
          "v": 800,
          "d": "Once per SSTORE operation if the value doesn't change"
        },
        "sstoreDirtyGasEIP2200": {
          "v": 800,
          "d": "Once per SSTORE operation if a dirty value is changed"
        },
        "sstoreInitGasEIP2200": {
          "v": 2e4,
          "d": "Once per SSTORE operation from clean zero to non-zero"
        },
        "sstoreInitRefundEIP2200": {
          "v": 19200,
          "d": "Once per SSTORE operation for resetting to the original zero value"
        },
        "sstoreCleanGasEIP2200": {
          "v": 5e3,
          "d": "Once per SSTORE operation from clean non-zero to something else"
        },
        "sstoreCleanRefundEIP2200": {
          "v": 4200,
          "d": "Once per SSTORE operation for resetting to the original non-zero value"
        },
        "sstoreClearRefundEIP2200": {
          "v": 15e3,
          "d": "Once per SSTORE operation for clearing an originally existing storage slot"
        },
        "balance": {
          "v": 700,
          "d": "Base fee of the BALANCE opcode"
        },
        "extcodehash": {
          "v": 700,
          "d": "Base fee of the EXTCODEHASH opcode"
        },
        "chainid": {
          "v": 2,
          "d": "Base fee of the CHAINID opcode"
        },
        "selfbalance": {
          "v": 5,
          "d": "Base fee of the SELFBALANCE opcode"
        },
        "sload": {
          "v": 800,
          "d": "Base fee of the SLOAD opcode"
        }
      },
      "vm": {},
      "pow": {}
    };
    const muirGlacier = {
      "name": "muirGlacier",
      "comment": "HF to delay the difficulty bomb",
      "url": "https://eips.ethereum.org/EIPS/eip-2384",
      "status": "Final",
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {
        "difficultyBombDelay": {
          "v": 9e6,
          "d": "the amount of blocks to delay the difficulty bomb with"
        }
      }
    };
    const berlin = {
      "name": "berlin",
      "comment": "HF targeted for July 2020 following the Muir Glacier HF",
      "url": "https://eips.ethereum.org/EIPS/eip-2070",
      "status": "Final",
      "eips": [2565, 2929, 2718, 2930]
    };
    const london = {
      "name": "london",
      "comment": "HF targeted for July 2021 following the Berlin fork",
      "url": "https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md",
      "status": "Final",
      "eips": [1559, 3198, 3529, 3541]
    };
    const shanghai = {
      "name": "shanghai",
      "comment": "Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode",
      "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md",
      "status": "Final",
      "eips": [3651, 3855, 3860, 4895]
    };
    const arrowGlacier = {
      "name": "arrowGlacier",
      "comment": "HF to delay the difficulty bomb",
      "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md",
      "status": "Final",
      "eips": [4345],
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const grayGlacier = {
      "name": "grayGlacier",
      "comment": "Delaying the difficulty bomb to Mid September 2022",
      "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md",
      "status": "Draft",
      "eips": [5133],
      "gasConfig": {},
      "gasPrices": {},
      "vm": {},
      "pow": {}
    };
    const mergeForkIdTransition = {
      "name": "mergeForkIdTransition",
      "comment": "Pre-merge hardfork to fork off non-upgraded clients",
      "url": "https://eips.ethereum.org/EIPS/eip-3675",
      "status": "Draft",
      "eips": []
    };
    const merge = {
      "name": "merge",
      "comment": "Hardfork to upgrade the consensus mechanism to Proof-of-Stake",
      "url": "https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md",
      "status": "Final",
      "consensus": {
        "type": "pos",
        "algorithm": "casper",
        "casper": {}
      },
      "eips": [3675, 4399]
    };
    const hardforks = {
      chainstart,
      homestead,
      dao,
      tangerineWhistle,
      spuriousDragon,
      byzantium,
      constantinople,
      petersburg,
      istanbul,
      muirGlacier,
      berlin,
      london,
      shanghai,
      arrowGlacier,
      grayGlacier,
      mergeForkIdTransition,
      merge
    };
    const { buf: crc32Uint8Array } = pkg;
    class Common extends EventEmitter {
      constructor(opts) {
        var _a2, _b;
        super();
        this._eips = [];
        this._customChains = (_a2 = opts.customChains) !== null && _a2 !== void 0 ? _a2 : [];
        this._chainParams = this.setChain(opts.chain);
        this.DEFAULT_HARDFORK = (_b = this._chainParams.defaultHardfork) !== null && _b !== void 0 ? _b : Hardfork.Merge;
        this.HARDFORK_CHANGES = this.hardforks().map((hf2) => [
          hf2.name,
          hardforks[hf2.name]
        ]);
        this._hardfork = this.DEFAULT_HARDFORK;
        if (opts.hardfork !== void 0) {
          this.setHardfork(opts.hardfork);
        }
        if (opts.eips) {
          this.setEIPs(opts.eips);
        }
      }
      /**
       * Creates a {@link Common} object for a custom chain, based on a standard one.
       *
       * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden
       * in a provided {@link chainParamsOrName} dictionary. Some usage example:
       *
       * ```javascript
       * Common.custom({chainId: 123})
       * ```
       *
       * There are also selected supported custom chains which can be initialized by using one of the
       * {@link CustomChains} for {@link chainParamsOrName}, e.g.:
       *
       * ```javascript
       * Common.custom(CustomChains.MaticMumbai)
       * ```
       *
       * Note that these supported custom chains only provide some base parameters (usually the chain and
       * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with
       * the `web3-utils/tx` library to a Layer-2 chain).
       *
       * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain
       * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others
       */
      static custom(chainParamsOrName, opts = {}) {
        var _a2;
        const baseChain = (_a2 = opts.baseChain) !== null && _a2 !== void 0 ? _a2 : "mainnet";
        const standardChainParams = Object.assign({}, Common._getChainParams(baseChain));
        standardChainParams.name = "custom-chain";
        if (typeof chainParamsOrName !== "string") {
          return new Common(Object.assign({ chain: Object.assign(Object.assign({}, standardChainParams), chainParamsOrName) }, opts));
        }
        if (chainParamsOrName === CustomChain.PolygonMainnet) {
          return Common.custom({
            name: CustomChain.PolygonMainnet,
            chainId: 137,
            networkId: 137
          }, opts);
        }
        if (chainParamsOrName === CustomChain.PolygonMumbai) {
          return Common.custom({
            name: CustomChain.PolygonMumbai,
            chainId: 80001,
            networkId: 80001
          }, opts);
        }
        if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {
          return Common.custom({
            name: CustomChain.ArbitrumRinkebyTestnet,
            chainId: 421611,
            networkId: 421611
          }, opts);
        }
        if (chainParamsOrName === CustomChain.ArbitrumOne) {
          return Common.custom({
            name: CustomChain.ArbitrumOne,
            chainId: 42161,
            networkId: 42161
          }, opts);
        }
        if (chainParamsOrName === CustomChain.xDaiChain) {
          return Common.custom({
            name: CustomChain.xDaiChain,
            chainId: 100,
            networkId: 100
          }, opts);
        }
        if (chainParamsOrName === CustomChain.OptimisticKovan) {
          return Common.custom({
            name: CustomChain.OptimisticKovan,
            chainId: 69,
            networkId: 69
          }, Object.assign({ hardfork: Hardfork.Berlin }, opts));
        }
        if (chainParamsOrName === CustomChain.OptimisticEthereum) {
          return Common.custom({
            name: CustomChain.OptimisticEthereum,
            chainId: 10,
            networkId: 10
          }, Object.assign({ hardfork: Hardfork.Berlin }, opts));
        }
        throw new Error(`Custom chain ${chainParamsOrName} not supported`);
      }
      /**
       * Static method to load and set common from a geth genesis json
       * @param genesisJson json of geth configuration
       * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance
       * @returns Common
       */
      static fromGethGenesis(genesisJson, { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }) {
        var _a2;
        const genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);
        const common = new Common({
          chain: (_a2 = genesisParams.name) !== null && _a2 !== void 0 ? _a2 : "custom",
          customChains: [genesisParams],
          eips,
          hardfork: hardfork !== null && hardfork !== void 0 ? hardfork : genesisParams.hardfork
        });
        if (genesisHash !== void 0) {
          common.setForkHashes(genesisHash);
        }
        return common;
      }
      /**
       * Static method to determine if a {@link chainId} is supported as a standard chain
       * @param chainId bigint id (`1`) of a standard chain
       * @returns boolean
       */
      static isSupportedChainId(chainId) {
        const initializedChains = this._getInitializedChains();
        return Boolean(initializedChains.names[chainId.toString()]);
      }
      static _getChainParams(_chain, customChains) {
        let chain = _chain;
        const initializedChains = this._getInitializedChains(customChains);
        if (typeof chain === "number" || typeof chain === "bigint") {
          chain = chain.toString();
          if (initializedChains.names[chain]) {
            const name2 = initializedChains.names[chain];
            return initializedChains[name2];
          }
          throw new Error(`Chain with ID ${chain} not supported`);
        }
        if (initializedChains[chain] !== void 0) {
          return initializedChains[chain];
        }
        throw new Error(`Chain with name ${chain} not supported`);
      }
      /**
       * Sets the chain
       * @param chain String ('mainnet') or Number (1) chain representation.
       *              Or, a Dictionary of chain parameters for a private network.
       * @returns The dictionary with parameters set as chain
       */
      setChain(chain) {
        if (typeof chain === "number" || typeof chain === "bigint" || typeof chain === "string") {
          this._chainParams = Common._getChainParams(chain, this._customChains);
        } else if (typeof chain === "object") {
          if (this._customChains.length > 0) {
            throw new Error("Chain must be a string, number, or bigint when initialized with customChains passed in");
          }
          const required = ["networkId", "genesis", "hardforks", "bootstrapNodes"];
          for (const param of required) {
            if (!(param in chain)) {
              throw new Error(`Missing required chain parameter: ${param}`);
            }
          }
          this._chainParams = chain;
        } else {
          throw new Error("Wrong input format");
        }
        for (const hf2 of this.hardforks()) {
          if (hf2.block === void 0) {
            throw new Error(`Hardfork cannot have undefined block number`);
          }
        }
        return this._chainParams;
      }
      /**
       * Sets the hardfork to get params for
       * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum
       */
      setHardfork(hardfork) {
        let existing = false;
        for (const hfChanges of this.HARDFORK_CHANGES) {
          if (hfChanges[0] === hardfork) {
            if (this._hardfork !== hardfork) {
              this._hardfork = hardfork;
              this.emit("hardforkChanged", hardfork);
            }
            existing = true;
          }
        }
        if (!existing) {
          throw new Error(`Hardfork with name ${hardfork} not supported`);
        }
      }
      /**
       * Returns the hardfork based on the block number or an optional
       * total difficulty (Merge HF) provided.
       *
       * An optional TD takes precedence in case the corresponding HF block
       * is set to `null` or otherwise needs to match (if not an error
       * will be thrown).
       *
       * @param blockNumber
       * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)
       * @param timestamp: timestamp in seconds at which block was/is to be minted
       * @returns The name of the HF
       */
      getHardforkByBlockNumber(_blockNumber, _td, _timestamp) {
        const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
        const td2 = toType(_td, TypeOutput.BigInt);
        const timestamp = toType(_timestamp, TypeOutput.Number);
        const hfs = this.hardforks().filter((hf2) => (
          // eslint-disable-next-line no-null/no-null
          hf2.block !== null || // eslint-disable-next-line no-null/no-null
          hf2.ttd !== null && hf2.ttd !== void 0 || hf2.timestamp !== void 0
        ));
        const mergeIndex = hfs.findIndex((hf2) => hf2.ttd !== null && hf2.ttd !== void 0);
        const doubleTTDHF = hfs.slice(mergeIndex + 1).findIndex((hf2) => hf2.ttd !== null && hf2.ttd !== void 0);
        if (doubleTTDHF >= 0) {
          throw Error(`More than one merge hardforks found with ttd specified`);
        }
        let hfIndex = hfs.findIndex((hf2) => (
          // eslint-disable-next-line no-null/no-null
          hf2.block !== null && hf2.block > blockNumber || timestamp !== void 0 && Number(hf2.timestamp) > timestamp
        ));
        if (hfIndex === -1) {
          hfIndex = hfs.length;
        } else if (hfIndex === 0) {
          throw Error("Must have at least one hardfork at block 0");
        }
        if (timestamp === void 0) {
          const stepBack = hfs.slice(0, hfIndex).reverse().findIndex((hf2) => hf2.block !== null || hf2.ttd !== void 0);
          hfIndex -= stepBack;
        }
        hfIndex -= 1;
        if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === void 0) {
          if (td2 === void 0 || td2 === null || BigInt(hfs[hfIndex].ttd) > td2) {
            hfIndex -= 1;
          }
        } else if (mergeIndex >= 0 && td2 !== void 0 && td2 !== null) {
          if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td2) {
            throw Error("Maximum HF determined by total difficulty is lower than the block number HF");
          } else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td2) {
            throw Error("HF determined by block number is lower than the minimum total difficulty HF");
          }
        }
        const hfStartIndex = hfIndex;
        for (; hfIndex < hfs.length - 1; hfIndex += 1) {
          if (hfs[hfIndex].block !== hfs[hfIndex + 1].block || hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {
            break;
          }
        }
        if (timestamp) {
          const minTimeStamp = hfs.slice(0, hfStartIndex).reduce((acc, hf2) => {
            var _a2;
            return Math.max(Number((_a2 = hf2.timestamp) !== null && _a2 !== void 0 ? _a2 : "0"), acc);
          }, 0);
          if (minTimeStamp > timestamp) {
            throw Error(`Maximum HF determined by timestamp is lower than the block number/ttd HF`);
          }
          const maxTimeStamp = hfs.slice(hfIndex + 1).reduce((acc, hf2) => {
            var _a2;
            return Math.min(Number((_a2 = hf2.timestamp) !== null && _a2 !== void 0 ? _a2 : timestamp), acc);
          }, timestamp);
          if (maxTimeStamp < timestamp) {
            throw Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);
          }
        }
        const hardfork = hfs[hfIndex];
        return hardfork.name;
      }
      /**
       * Sets a new hardfork based on the block number or an optional
       * total difficulty (Merge HF) provided.
       *
       * An optional TD takes precedence in case the corresponding HF block
       * is set to `null` or otherwise needs to match (if not an error
       * will be thrown).
       *
       * @param blockNumber
       * @param td
       * @param timestamp
       * @returns The name of the HF set
       */
      setHardforkByBlockNumber(blockNumber, td2, timestamp) {
        const hardfork = this.getHardforkByBlockNumber(blockNumber, td2, timestamp);
        this.setHardfork(hardfork);
        return hardfork;
      }
      /**
       * Internal helper function, returns the params for the given hardfork for the chain set
       * @param hardfork Hardfork name
       * @returns Dictionary with hardfork params or null if hardfork not on chain
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      _getHardfork(hardfork) {
        const hfs = this.hardforks();
        for (const hf2 of hfs) {
          if (hf2.name === hardfork)
            return hf2;
        }
        return null;
      }
      /**
       * Sets the active EIPs
       * @param eips
       */
      setEIPs(eips = []) {
        for (const eip of eips) {
          if (!(eip in EIPs)) {
            throw new Error(`${eip} not supported`);
          }
          const minHF = this.gteHardfork(EIPs[eip].minimumHardfork);
          if (!minHF) {
            throw new Error(
              // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
              `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`
            );
          }
          if (EIPs[eip].requiredEIPs !== void 0) {
            for (const elem of EIPs[eip].requiredEIPs) {
              if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {
                throw new Error(
                  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                  `${eip} requires EIP ${elem}, but is not included in the EIP list`
                );
              }
            }
          }
        }
        this._eips = eips;
      }
      /**
       * Returns a parameter for the current chain setup
       *
       * If the parameter is present in an EIP, the EIP always takes precedence.
       * Otherwise the parameter if taken from the latest applied HF with
       * a change on the respective parameter.
       *
       * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
       * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
       * @returns The value requested or `BigInt(0)` if not found
       */
      param(topic, name2) {
        let value;
        for (const eip of this._eips) {
          value = this.paramByEIP(topic, name2, eip);
          if (value !== void 0)
            return value;
        }
        return this.paramByHardfork(topic, name2, this._hardfork);
      }
      /**
       * Returns the parameter corresponding to a hardfork
       * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
       * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
       * @param hardfork Hardfork name
       * @returns The value requested or `BigInt(0)` if not found
       */
      paramByHardfork(topic, name2, hardfork) {
        let value = null;
        for (const hfChanges of this.HARDFORK_CHANGES) {
          if ("eips" in hfChanges[1]) {
            const hfEIPs = hfChanges[1].eips;
            for (const eip of hfEIPs) {
              const valueEIP = this.paramByEIP(topic, name2, eip);
              value = typeof valueEIP === "bigint" ? valueEIP : value;
            }
          } else {
            if (hfChanges[1][topic] === void 0) {
              throw new Error(`Topic ${topic} not defined`);
            }
            if (hfChanges[1][topic][name2] !== void 0) {
              value = hfChanges[1][topic][name2].v;
            }
          }
          if (hfChanges[0] === hardfork)
            break;
        }
        return BigInt(value !== null && value !== void 0 ? value : 0);
      }
      /**
       * Returns a parameter corresponding to an EIP
       * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')
       * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)
       * @param eip Number of the EIP
       * @returns The value requested or `undefined` if not found
       */
      // eslint-disable-next-line class-methods-use-this
      paramByEIP(topic, name2, eip) {
        if (!(eip in EIPs)) {
          throw new Error(`${eip} not supported`);
        }
        const eipParams = EIPs[eip];
        if (!(topic in eipParams)) {
          throw new Error(`Topic ${topic} not defined`);
        }
        if (eipParams[topic][name2] === void 0) {
          return void 0;
        }
        const value = eipParams[topic][name2].v;
        return BigInt(value);
      }
      /**
       * Returns a parameter for the hardfork active on block number or
       * optional provided total difficulty (Merge HF)
       * @param topic Parameter topic
       * @param name Parameter name
       * @param blockNumber Block number
       * @param td Total difficulty
       *    * @returns The value requested or `BigInt(0)` if not found
       */
      paramByBlock(topic, name2, blockNumber, td2, timestamp) {
        const hardfork = this.getHardforkByBlockNumber(blockNumber, td2, timestamp);
        return this.paramByHardfork(topic, name2, hardfork);
      }
      /**
       * Checks if an EIP is activated by either being included in the EIPs
       * manually passed in with the {@link CommonOpts.eips} or in a
       * hardfork currently being active
       *
       * Note: this method only works for EIPs being supported
       * by the {@link CommonOpts.eips} constructor option
       * @param eip
       */
      isActivatedEIP(eip) {
        if (this.eips().includes(eip)) {
          return true;
        }
        for (const hfChanges of this.HARDFORK_CHANGES) {
          const hf2 = hfChanges[1];
          if (this.gteHardfork(hf2.name) && "eips" in hf2) {
            if (hf2.eips.includes(eip)) {
              return true;
            }
          }
        }
        return false;
      }
      /**
       * Checks if set or provided hardfork is active on block number
       * @param hardfork Hardfork name or null (for HF set)
       * @param blockNumber
       * @returns True if HF is active on block number
       */
      hardforkIsActiveOnBlock(_hardfork, _blockNumber) {
        const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const hfBlock = this.hardforkBlock(hardfork);
        if (typeof hfBlock === "bigint" && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {
          return true;
        }
        return false;
      }
      /**
       * Alias to hardforkIsActiveOnBlock when hardfork is set
       * @param blockNumber
       * @returns True if HF is active on block number
       */
      activeOnBlock(blockNumber) {
        return this.hardforkIsActiveOnBlock(null, blockNumber);
      }
      /**
       * Sequence based check if given or set HF1 is greater than or equal HF2
       * @param hardfork1 Hardfork name or null (if set)
       * @param hardfork2 Hardfork name
       * @param opts Hardfork options
       * @returns True if HF1 gte HF2
       */
      hardforkGteHardfork(_hardfork1, hardfork2) {
        const hardfork1 = _hardfork1 !== null && _hardfork1 !== void 0 ? _hardfork1 : this._hardfork;
        const hardforks2 = this.hardforks();
        let posHf1 = -1;
        let posHf2 = -1;
        let index = 0;
        for (const hf2 of hardforks2) {
          if (hf2.name === hardfork1)
            posHf1 = index;
          if (hf2.name === hardfork2)
            posHf2 = index;
          index += 1;
        }
        return posHf1 >= posHf2 && posHf2 !== -1;
      }
      /**
       * Alias to hardforkGteHardfork when hardfork is set
       * @param hardfork Hardfork name
       * @returns True if hardfork set is greater than hardfork provided
       */
      gteHardfork(hardfork) {
        return this.hardforkGteHardfork(null, hardfork);
      }
      /**
       * Returns the hardfork change block for hardfork provided or set
       * @param hardfork Hardfork name, optional if HF set
       * @returns Block number or null if unscheduled
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      hardforkBlock(_hardfork) {
        var _a2;
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const block = (_a2 = this._getHardfork(hardfork)) === null || _a2 === void 0 ? void 0 : _a2.block;
        if (block === void 0 || block === null) {
          return null;
        }
        return BigInt(block);
      }
      // eslint-disable-next-line @typescript-eslint/ban-types
      hardforkTimestamp(_hardfork) {
        var _a2;
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const timestamp = (_a2 = this._getHardfork(hardfork)) === null || _a2 === void 0 ? void 0 : _a2.timestamp;
        if (timestamp === void 0 || timestamp === null) {
          return null;
        }
        return BigInt(timestamp);
      }
      /**
       * Returns the hardfork change block for eip
       * @param eip EIP number
       * @returns Block number or null if unscheduled
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      eipBlock(eip) {
        for (const hfChanges of this.HARDFORK_CHANGES) {
          const hf2 = hfChanges[1];
          if ("eips" in hf2) {
            if (hf2.eips.includes(eip)) {
              return this.hardforkBlock(typeof hfChanges[0] === "number" ? String(hfChanges[0]) : hfChanges[0]);
            }
          }
        }
        return null;
      }
      /**
       * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set
       * @param hardfork Hardfork name, optional if HF set
       * @returns Total difficulty or null if no set
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      hardforkTTD(_hardfork) {
        var _a2;
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const ttd = (_a2 = this._getHardfork(hardfork)) === null || _a2 === void 0 ? void 0 : _a2.ttd;
        if (ttd === void 0 || ttd === null) {
          return null;
        }
        return BigInt(ttd);
      }
      /**
       * True if block number provided is the hardfork (given or set) change block
       * @param blockNumber Number of the block to check
       * @param hardfork Hardfork name, optional if HF set
       * @returns True if blockNumber is HF block
       * @deprecated
       */
      isHardforkBlock(_blockNumber, _hardfork) {
        const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const block = this.hardforkBlock(hardfork);
        return typeof block === "bigint" && block !== BigInt(0) ? block === blockNumber : false;
      }
      /**
       * Returns the change block for the next hardfork after the hardfork provided or set
       * @param hardfork Hardfork name, optional if HF set
       * @returns Block timestamp, number or null if not available
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      nextHardforkBlockOrTimestamp(_hardfork) {
        var _a2, _b;
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const hfs = this.hardforks();
        let hfIndex = hfs.findIndex((hf2) => hf2.name === hardfork);
        if (hardfork === Hardfork.Merge) {
          hfIndex -= 1;
        }
        if (hfIndex < 0) {
          return null;
        }
        let currHfTimeOrBlock = (_a2 = hfs[hfIndex].timestamp) !== null && _a2 !== void 0 ? _a2 : hfs[hfIndex].block;
        currHfTimeOrBlock = // eslint-disable-next-line no-null/no-null
        currHfTimeOrBlock !== null && currHfTimeOrBlock !== void 0 ? Number(currHfTimeOrBlock) : (
          // eslint-disable-next-line no-null/no-null
          null
        );
        const nextHf = hfs.slice(hfIndex + 1).find((hf2) => {
          var _a3;
          let hfTimeOrBlock = (_a3 = hf2.timestamp) !== null && _a3 !== void 0 ? _a3 : hf2.block;
          hfTimeOrBlock = // eslint-disable-next-line no-null/no-null
          hfTimeOrBlock !== null && hfTimeOrBlock !== void 0 ? Number(hfTimeOrBlock) : (
            // eslint-disable-next-line no-null/no-null
            null
          );
          return hf2.name !== Hardfork.Merge && // eslint-disable-next-line no-null/no-null
          hfTimeOrBlock !== null && hfTimeOrBlock !== void 0 && hfTimeOrBlock !== currHfTimeOrBlock;
        });
        if (nextHf === void 0) {
          return null;
        }
        const nextHfBlock = (_b = nextHf.timestamp) !== null && _b !== void 0 ? _b : nextHf.block;
        if (nextHfBlock === null || nextHfBlock === void 0) {
          return null;
        }
        return BigInt(nextHfBlock);
      }
      /**
       * Returns the change block for the next hardfork after the hardfork provided or set
       * @param hardfork Hardfork name, optional if HF set
       * @returns Block number or null if not available
       * @deprecated
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      nextHardforkBlock(_hardfork) {
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        let hfBlock = this.hardforkBlock(hardfork);
        if (hfBlock === null && hardfork === Hardfork.Merge) {
          const hfs = this.hardforks();
          const mergeIndex = hfs.findIndex((hf2) => hf2.ttd !== null && hf2.ttd !== void 0);
          if (mergeIndex < 0) {
            throw Error(`Merge hardfork should have been found`);
          }
          hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);
        }
        if (hfBlock === null) {
          return null;
        }
        const nextHfBlock = this.hardforks().reduce((acc, hf2) => {
          const block = BigInt(
            // eslint-disable-next-line no-null/no-null
            hf2.block === null || hf2.ttd !== void 0 && hf2.ttd !== null ? 0 : hf2.block
          );
          return block > hfBlock && acc === null ? block : acc;
        }, null);
        return nextHfBlock;
      }
      /**
       * True if block number provided is the hardfork change block following the hardfork given or set
       * @param blockNumber Number of the block to check
       * @param hardfork Hardfork name, optional if HF set
       * @returns True if blockNumber is HF block
       * @deprecated
       */
      isNextHardforkBlock(_blockNumber, _hardfork) {
        const blockNumber = toType(_blockNumber, TypeOutput.BigInt);
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const nextHardforkBlock = this.nextHardforkBlock(hardfork);
        return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;
      }
      /**
       * Internal helper function to calculate a fork hash
       * @param hardfork Hardfork name
       * @param genesisHash Genesis block hash of the chain
       * @returns Fork hash as hex string
       */
      _calcForkHash(hardfork, genesisHash) {
        let hfUint8Array = new Uint8Array();
        let prevBlockOrTime = 0;
        for (const hf2 of this.hardforks()) {
          const { block, timestamp, name: name2 } = hf2;
          let blockOrTime = timestamp !== null && timestamp !== void 0 ? timestamp : block;
          blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;
          if (typeof blockOrTime === "number" && blockOrTime !== 0 && blockOrTime !== prevBlockOrTime && name2 !== Hardfork.Merge) {
            const hfBlockUint8Array = hexToBytes$2(blockOrTime.toString(16).padStart(16, "0"));
            hfUint8Array = uint8ArrayConcat(hfUint8Array, hfBlockUint8Array);
            prevBlockOrTime = blockOrTime;
          }
          if (hf2.name === hardfork)
            break;
        }
        const inputUint8Array = uint8ArrayConcat(genesisHash, hfUint8Array);
        const forkhash = bytesToHex$2(intToUint8Array(crc32Uint8Array(inputUint8Array) >>> 0));
        return forkhash;
      }
      /**
       * Returns an eth/64 compliant fork hash (EIP-2124)
       * @param hardfork Hardfork name, optional if HF set
       * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated
       */
      forkHash(_hardfork, genesisHash) {
        const hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;
        const data = this._getHardfork(hardfork);
        if (
          // eslint-disable-next-line no-null/no-null
          data === null || // eslint-disable-next-line no-null/no-null
          (data === null || data === void 0 ? void 0 : data.block) === null && (data === null || data === void 0 ? void 0 : data.timestamp) === void 0 && (data === null || data === void 0 ? void 0 : data.ttd) === void 0
        ) {
          const msg = "No fork hash calculation possible for future hardfork";
          throw new Error(msg);
        }
        if ((data === null || data === void 0 ? void 0 : data.forkHash) !== null && (data === null || data === void 0 ? void 0 : data.forkHash) !== void 0) {
          return data.forkHash;
        }
        if (!genesisHash)
          throw new Error("genesisHash required for forkHash calculation");
        return this._calcForkHash(hardfork, genesisHash);
      }
      /**
       *
       * @param forkHash Fork hash as a hex string
       * @returns Array with hardfork data (name, block, forkHash)
       */
      // eslint-disable-next-line @typescript-eslint/ban-types
      hardforkForForkHash(forkHash) {
        const resArray = this.hardforks().filter((hf2) => hf2.forkHash === forkHash);
        return resArray.length >= 1 ? resArray[resArray.length - 1] : null;
      }
      /**
       * Sets any missing forkHashes on the passed-in {@link Common} instance
       * @param common The {@link Common} to set the forkHashes for
       * @param genesisHash The genesis block hash
       */
      setForkHashes(genesisHash) {
        var _a2;
        for (const hf2 of this.hardforks()) {
          const blockOrTime = (_a2 = hf2.timestamp) !== null && _a2 !== void 0 ? _a2 : hf2.block;
          if (
            // eslint-disable-next-line no-null/no-null
            (hf2.forkHash === null || hf2.forkHash === void 0) && // eslint-disable-next-line no-null/no-null
            (blockOrTime !== null && blockOrTime !== void 0 || typeof hf2.ttd !== "undefined")
          ) {
            hf2.forkHash = this.forkHash(hf2.name, genesisHash);
          }
        }
      }
      /**
       * Returns the Genesis parameters of the current chain
       * @returns Genesis dictionary
       */
      genesis() {
        return this._chainParams.genesis;
      }
      /**
       * Returns the hardforks for current chain
       * @returns {Array} Array with arrays of hardforks
       */
      hardforks() {
        return this._chainParams.hardforks;
      }
      /**
       * Returns bootstrap nodes for the current chain
       * @returns {Dictionary} Dict with bootstrap nodes
       */
      bootstrapNodes() {
        return this._chainParams.bootstrapNodes;
      }
      /**
       * Returns DNS networks for the current chain
       * @returns {String[]} Array of DNS ENR urls
       */
      dnsNetworks() {
        return this._chainParams.dnsNetworks;
      }
      /**
       * Returns the hardfork set
       * @returns Hardfork name
       */
      hardfork() {
        return this._hardfork;
      }
      /**
       * Returns the Id of current chain
       * @returns chain Id
       */
      chainId() {
        return BigInt(this._chainParams.chainId);
      }
      /**
       * Returns the name of current chain
       * @returns chain name (lower case)
       */
      chainName() {
        return this._chainParams.name;
      }
      /**
       * Returns the Id of current network
       * @returns network Id
       */
      networkId() {
        return BigInt(this._chainParams.networkId);
      }
      /**
       * Returns the active EIPs
       * @returns List of EIPs
       */
      eips() {
        return this._eips;
      }
      /**
       * Returns the consensus type of the network
       * Possible values: "pow"|"poa"|"pos"
       *
       * Note: This value can update along a Hardfork.
       */
      consensusType() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
          if ("consensus" in hfChanges[1]) {
            value = hfChanges[1].consensus.type;
          }
          if (hfChanges[0] === hardfork)
            break;
        }
        return value !== null && value !== void 0 ? value : this._chainParams.consensus.type;
      }
      /**
       * Returns the concrete consensus implementation
       * algorithm or protocol for the network
       * e.g. "ethash" for "pow" consensus type,
       * "clique" for "poa" consensus type or
       * "casper" for "pos" consensus type.
       *
       * Note: This value can update along a Hardfork.
       */
      consensusAlgorithm() {
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
          if ("consensus" in hfChanges[1]) {
            value = hfChanges[1].consensus.algorithm;
          }
          if (hfChanges[0] === hardfork)
            break;
        }
        return value !== null && value !== void 0 ? value : this._chainParams.consensus.algorithm;
      }
      /**
       * Returns a dictionary with consensus configuration
       * parameters based on the consensus algorithm
       *
       * Expected returns (parameters must be present in
       * the respective chain json files):
       *
       * ethash: empty object
       * clique: period, epoch
       * casper: empty object
       *
       * Note: This value can update along a Hardfork.
       */
      consensusConfig() {
        var _a2;
        const hardfork = this.hardfork();
        let value;
        for (const hfChanges of this.HARDFORK_CHANGES) {
          if ("consensus" in hfChanges[1]) {
            value = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];
          }
          if (hfChanges[0] === hardfork)
            break;
        }
        return (_a2 = value !== null && value !== void 0 ? value : this._chainParams.consensus[this.consensusAlgorithm()]) !== null && _a2 !== void 0 ? _a2 : {};
      }
      /**
       * Returns a deep copy of this {@link Common} instance.
       */
      copy() {
        const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);
        copy.removeAllListeners();
        return copy;
      }
      static _getInitializedChains(customChains) {
        const names = {};
        for (const [name2, id2] of Object.entries(Chain)) {
          names[id2] = name2.toLowerCase();
        }
        const chains = { mainnet: mainnet$1, goerli, sepolia };
        if (customChains) {
          for (const chain of customChains) {
            const { name: name2 } = chain;
            names[chain.chainId.toString()] = name2;
            chains[name2] = chain;
          }
        }
        chains.names = names;
        return chains;
      }
    }
    var Capability;
    (function(Capability2) {
      Capability2[Capability2["EIP155ReplayProtection"] = 155] = "EIP155ReplayProtection";
      Capability2[Capability2["EIP1559FeeMarket"] = 1559] = "EIP1559FeeMarket";
      Capability2[Capability2["EIP2718TypedTransaction"] = 2718] = "EIP2718TypedTransaction";
      Capability2[Capability2["EIP2930AccessLists"] = 2930] = "EIP2930AccessLists";
    })(Capability || (Capability = {}));
    function isAccessListUint8Array(input) {
      if (input.length === 0) {
        return true;
      }
      const firstItem = input[0];
      if (Array.isArray(firstItem)) {
        return true;
      }
      return false;
    }
    function isAccessList(input) {
      return !isAccessListUint8Array(input);
    }
    class Address {
      constructor(buf) {
        if (buf.length !== 20) {
          throw new Error("Invalid address length");
        }
        this.buf = buf;
      }
      /**
       * Returns the zero address.
       */
      static zero() {
        return new Address(zeros(20));
      }
      /**
       * Is address equal to another.
       */
      equals(address) {
        return uint8ArrayEquals(this.buf, address.buf);
      }
      /**
       * Is address zero.
       */
      isZero() {
        return this.equals(Address.zero());
      }
      /**
       * Returns hex encoding of address.
       */
      toString() {
        return bytesToHex$2(this.buf);
      }
      /**
       * Returns Uint8Array representation of address.
       */
      toArray() {
        return this.buf;
      }
      /**
       * Returns the ethereum address of a given public key.
       * Accepts "Ethereum public keys" and SEC1 encoded keys.
       * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
       * @param sanitize Accept public keys in other formats
       */
      static publicToAddress(_pubKey, sanitize = false) {
        let pubKey = _pubKey;
        assertIsUint8Array(pubKey);
        if (sanitize && pubKey.length !== 64) {
          pubKey = secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);
        }
        if (pubKey.length !== 64) {
          throw new Error("Expected pubKey to be of length 64");
        }
        return keccak256(pubKey).slice(-20);
      }
    }
    const checkMaxInitCodeSize = (common, length) => {
      const maxInitCodeSize = common.param("vm", "maxInitCodeSize");
      if (maxInitCodeSize && BigInt(length) > maxInitCodeSize) {
        throw new Error(`the initcode size of this transaction is too large: it is ${length} while the max is ${common.param("vm", "maxInitCodeSize")}`);
      }
    };
    const getAccessListData = (accessList) => {
      let AccessListJSON;
      let uint8arrayAccessList;
      if (isAccessList(accessList)) {
        AccessListJSON = accessList;
        const newAccessList = [];
        for (let i = 0; i < accessList.length; i += 1) {
          const item = accessList[i];
          const addressBytes = toUint8Array(item.address);
          const storageItems = [];
          for (let index = 0; index < item.storageKeys.length; index += 1) {
            storageItems.push(toUint8Array(item.storageKeys[index]));
          }
          newAccessList.push([addressBytes, storageItems]);
        }
        uint8arrayAccessList = newAccessList;
      } else {
        uint8arrayAccessList = accessList !== null && accessList !== void 0 ? accessList : [];
        const json = [];
        for (let i = 0; i < uint8arrayAccessList.length; i += 1) {
          const data = uint8arrayAccessList[i];
          const address = bytesToHex$2(data[0]);
          const storageKeys = [];
          for (let item = 0; item < data[1].length; item += 1) {
            storageKeys.push(bytesToHex$2(data[1][item]));
          }
          const jsonItem = {
            address,
            storageKeys
          };
          json.push(jsonItem);
        }
        AccessListJSON = json;
      }
      return {
        AccessListJSON,
        accessList: uint8arrayAccessList
      };
    };
    const verifyAccessList = (accessList) => {
      for (let key = 0; key < accessList.length; key += 1) {
        const accessListItem = accessList[key];
        const address = accessListItem[0];
        const storageSlots = accessListItem[1];
        if (accessListItem[2] !== void 0) {
          throw new Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");
        }
        if (address.length !== 20) {
          throw new Error("Invalid EIP-2930 transaction: address length should be 20 bytes");
        }
        for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot += 1) {
          if (storageSlots[storageSlot].length !== 32) {
            throw new Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes");
          }
        }
      }
    };
    const getAccessListJSON = (accessList) => {
      const accessListJSON = [];
      for (let index = 0; index < accessList.length; index += 1) {
        const item = accessList[index];
        const JSONItem = {
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/consistent-type-assertions
          address: bytesToHex$2(setLengthLeft(item[0], 20)),
          storageKeys: []
        };
        const storageSlots = item && item[1];
        for (let slot = 0; slot < storageSlots.length; slot += 1) {
          const storageSlot = storageSlots[slot];
          JSONItem.storageKeys.push(bytesToHex$2(setLengthLeft(storageSlot, 32)));
        }
        accessListJSON.push(JSONItem);
      }
      return accessListJSON;
    };
    const getDataFeeEIP2930 = (accessList, common) => {
      const accessListStorageKeyCost = common.param("gasPrices", "accessListStorageKeyCost");
      const accessListAddressCost = common.param("gasPrices", "accessListAddressCost");
      let slots = 0;
      for (let index = 0; index < accessList.length; index += 1) {
        const item = accessList[index];
        const storageSlots = item[1];
        slots += storageSlots.length;
      }
      const addresses = accessList.length;
      return addresses * Number(accessListAddressCost) + slots * Number(accessListStorageKeyCost);
    };
    class BaseTransaction {
      constructor(txData, opts) {
        var _a2, _b;
        this.cache = {
          hash: void 0,
          dataFee: void 0
        };
        this.activeCapabilities = [];
        this.DEFAULT_CHAIN = Chain.Mainnet;
        this.DEFAULT_HARDFORK = Hardfork.Merge;
        const { nonce, gasLimit, to, value, data, v: v2, r: r2, s, type } = txData;
        this._type = Number(uint8ArrayToBigInt$1(toUint8Array(type)));
        this.txOptions = opts;
        const toB = toUint8Array(to === "" ? "0x" : to);
        const vB = toUint8Array(v2 === "" ? "0x" : v2);
        const rB = toUint8Array(r2 === "" ? "0x" : r2);
        const sB = toUint8Array(s === "" ? "0x" : s);
        this.nonce = uint8ArrayToBigInt$1(toUint8Array(nonce === "" ? "0x" : nonce));
        this.gasLimit = uint8ArrayToBigInt$1(toUint8Array(gasLimit === "" ? "0x" : gasLimit));
        this.to = toB.length > 0 ? new Address(toB) : void 0;
        this.value = uint8ArrayToBigInt$1(toUint8Array(value === "" ? "0x" : value));
        this.data = toUint8Array(data === "" ? "0x" : data);
        this.v = vB.length > 0 ? uint8ArrayToBigInt$1(vB) : void 0;
        this.r = rB.length > 0 ? uint8ArrayToBigInt$1(rB) : void 0;
        this.s = sB.length > 0 ? uint8ArrayToBigInt$1(sB) : void 0;
        this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });
        this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);
        this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);
        const createContract = this.to === void 0 || this.to === null;
        const allowUnlimitedInitCodeSize = (_a2 = opts.allowUnlimitedInitCodeSize) !== null && _a2 !== void 0 ? _a2 : false;
        const common = (_b = opts.common) !== null && _b !== void 0 ? _b : this._getCommon();
        if (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {
          checkMaxInitCodeSize(common, this.data.length);
        }
      }
      /**
       * Returns the transaction type.
       *
       * Note: legacy txs will return tx type `0`.
       */
      get type() {
        return this._type;
      }
      /**
       * Checks if a tx type defining capability is active
       * on a tx, for example the EIP-1559 fee market mechanism
       * or the EIP-2930 access list feature.
       *
       * Note that this is different from the tx type itself,
       * so EIP-2930 access lists can very well be active
       * on an EIP-1559 tx for example.
       *
       * This method can be useful for feature checks if the
       * tx type is unknown (e.g. when instantiated with
       * the tx factory).
       *
       * See `Capabilites` in the `types` module for a reference
       * on all supported capabilities.
       */
      supports(capability) {
        return this.activeCapabilities.includes(capability);
      }
      validate(stringError = false) {
        const errors = [];
        if (this.getBaseFee() > this.gasLimit) {
          errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`);
        }
        if (this.isSigned() && !this.verifySignature()) {
          errors.push("Invalid Signature");
        }
        return stringError ? errors : errors.length === 0;
      }
      _validateYParity() {
        const { v: v2 } = this;
        if (v2 !== void 0 && v2 !== BigInt(0) && v2 !== BigInt(1)) {
          const msg = this._errorMsg("The y-parity of the transaction should either be 0 or 1");
          throw new Error(msg);
        }
      }
      /**
       * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.
       * Reasoning: https://ethereum.stackexchange.com/a/55728
       */
      _validateHighS() {
        const { s } = this;
        if (this.common.gteHardfork("homestead") && s !== void 0 && s > SECP256K1_ORDER_DIV_2) {
          const msg = this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid");
          throw new Error(msg);
        }
      }
      /**
       * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
       */
      getBaseFee() {
        const txFee = this.common.param("gasPrices", "tx");
        let fee = this.getDataFee();
        if (txFee)
          fee += txFee;
        if (this.common.gteHardfork("homestead") && this.toCreationAddress()) {
          const txCreationFee = this.common.param("gasPrices", "txCreation");
          if (txCreationFee)
            fee += txCreationFee;
        }
        return fee;
      }
      /**
       * The amount of gas paid for the data in this tx
       */
      getDataFee() {
        const txDataZero = this.common.param("gasPrices", "txDataZero");
        const txDataNonZero = this.common.param("gasPrices", "txDataNonZero");
        let cost = BigInt(0);
        for (let i = 0; i < this.data.length; i += 1) {
          this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;
        }
        if ((this.to === void 0 || this.to === null) && this.common.isActivatedEIP(3860)) {
          const dataLength = BigInt(Math.ceil(this.data.length / 32));
          const initCodeCost = this.common.param("gasPrices", "initCodeWordCost") * dataLength;
          cost += initCodeCost;
        }
        return cost;
      }
      /**
       * If the tx's `to` is to the creation address
       */
      toCreationAddress() {
        return this.to === void 0 || this.to.buf.length === 0;
      }
      isSigned() {
        const { v: v2, r: r2, s } = this;
        if (v2 === void 0 || r2 === void 0 || s === void 0) {
          return false;
        }
        return true;
      }
      /**
       * Determines if the signature is valid
       */
      verifySignature() {
        try {
          const publicKey = this.getSenderPublicKey();
          return unpadUint8Array(publicKey).length !== 0;
        } catch (e) {
          return false;
        }
      }
      /**
       * Returns the sender's address
       */
      getSenderAddress() {
        return new Address(Address.publicToAddress(this.getSenderPublicKey()));
      }
      /**
       * Signs a transaction.
       *
       * Note that the signed tx is returned as a new object,
       * use as follows:
       * ```javascript
       * const signedTx = tx.sign(privateKey)
       * ```
       */
      sign(privateKey) {
        if (privateKey.length !== 32) {
          const msg = this._errorMsg("Private key must be 32 bytes in length.");
          throw new Error(msg);
        }
        let hackApplied = false;
        if (this.type === 0 && this.common.gteHardfork("spuriousDragon") && !this.supports(Capability.EIP155ReplayProtection)) {
          this.activeCapabilities.push(Capability.EIP155ReplayProtection);
          hackApplied = true;
        }
        const msgHash = this.getMessageToSign(true);
        const { v: v2, r: r2, s } = this._ecsign(msgHash, privateKey);
        const tx = this._processSignature(v2, r2, s);
        if (hackApplied) {
          const index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection);
          if (index > -1) {
            this.activeCapabilities.splice(index, 1);
          }
        }
        return tx;
      }
      /**
       * Does chain ID checks on common and returns a common
       * to be used on instantiation
       * @hidden
       *
       * @param common - {@link Common} instance from tx options
       * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)
       */
      _getCommon(common, chainId) {
        var _a2, _b, _c, _d;
        if (chainId !== void 0) {
          const chainIdBigInt = uint8ArrayToBigInt$1(toUint8Array(chainId));
          if (common) {
            if (common.chainId() !== chainIdBigInt) {
              const msg = this._errorMsg("The chain ID does not match the chain ID of Common");
              throw new Error(msg);
            }
            return common.copy();
          }
          if (Common.isSupportedChainId(chainIdBigInt)) {
            return new Common({ chain: chainIdBigInt, hardfork: this.DEFAULT_HARDFORK });
          }
          return Common.custom({
            name: "custom-chain",
            networkId: chainIdBigInt,
            chainId: chainIdBigInt
          }, { baseChain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });
        }
        if ((common === null || common === void 0 ? void 0 : common.copy) && typeof (common === null || common === void 0 ? void 0 : common.copy) === "function") {
          return common.copy();
        }
        if (common) {
          const hardfork = typeof common.hardfork === "function" ? common.hardfork() : (
            // eslint-disable-next-line @typescript-eslint/unbound-method
            common.hardfork
          );
          return Common.custom({
            name: "custom-chain",
            networkId: common.networkId ? common.networkId() : (_b = BigInt((_a2 = common.customChain) === null || _a2 === void 0 ? void 0 : _a2.networkId)) !== null && _b !== void 0 ? _b : void 0,
            chainId: common.chainId ? common.chainId() : (_d = BigInt((_c = common.customChain) === null || _c === void 0 ? void 0 : _c.chainId)) !== null && _d !== void 0 ? _d : void 0
          }, {
            baseChain: this.DEFAULT_CHAIN,
            hardfork: hardfork || this.DEFAULT_HARDFORK
          });
        }
        return new Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK });
      }
      /**
       * Validates that an object with BigInt values cannot exceed the specified bit limit.
       * @param values Object containing string keys and BigInt values
       * @param bits Number of bits to check (64 or 256)
       * @param cannotEqual Pass true if the number also cannot equal one less the maximum value
       */
      _validateCannotExceedMaxInteger(values, bits = 256, cannotEqual = false) {
        for (const [key, value] of Object.entries(values)) {
          switch (bits) {
            case 64:
              if (cannotEqual) {
                if (value !== void 0 && value >= MAX_UINT64) {
                  const msg = this._errorMsg(`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`);
                  throw new Error(msg);
                }
              } else if (value !== void 0 && value > MAX_UINT64) {
                const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`);
                throw new Error(msg);
              }
              break;
            case 256:
              if (cannotEqual) {
                if (value !== void 0 && value >= MAX_INTEGER) {
                  const msg = this._errorMsg(`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`);
                  throw new Error(msg);
                }
              } else if (value !== void 0 && value > MAX_INTEGER) {
                const msg = this._errorMsg(`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`);
                throw new Error(msg);
              }
              break;
            default: {
              const msg = this._errorMsg("unimplemented bits value");
              throw new Error(msg);
            }
          }
        }
      }
      static _validateNotArray(values) {
        const txDataKeys = [
          "nonce",
          "gasPrice",
          "gasLimit",
          "to",
          "value",
          "data",
          "v",
          "r",
          "s",
          "type",
          "baseFee",
          "maxFeePerGas",
          "chainId"
        ];
        for (const [key, value] of Object.entries(values)) {
          if (txDataKeys.includes(key)) {
            if (Array.isArray(value)) {
              throw new Error(`${key} cannot be an array`);
            }
          }
        }
      }
      /**
       * Returns the shared error postfix part for _error() method
       * tx type implementations.
       */
      _getSharedErrorPostfix() {
        let hash2 = "";
        try {
          hash2 = this.isSigned() ? bytesToHex$2(this.hash()) : "not available (unsigned)";
        } catch (e) {
          hash2 = "error";
        }
        let isSigned = "";
        try {
          isSigned = this.isSigned().toString();
        } catch (e) {
          hash2 = "error";
        }
        let hf2 = "";
        try {
          hf2 = this.common.hardfork();
        } catch (e) {
          hf2 = "error";
        }
        let postfix = `tx type=${this.type} hash=${hash2} nonce=${this.nonce} value=${this.value} `;
        postfix += `signed=${isSigned} hf=${hf2}`;
        return postfix;
      }
      // eslint-disable-next-line class-methods-use-this
      _ecsign(msgHash, privateKey, chainId) {
        const signature = secp256k1.sign(msgHash, privateKey);
        const signatureBytes = signature.toCompactRawBytes();
        const r2 = signatureBytes.subarray(0, 32);
        const s = signatureBytes.subarray(32, 64);
        const v2 = chainId === void 0 ? BigInt(signature.recovery + 27) : BigInt(signature.recovery + 35) + BigInt(chainId) * BigInt(2);
        return { r: r2, s, v: v2 };
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static fromSerializedTx(serialized, opts = {}) {
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static fromTxData(txData, opts = {}) {
      }
    }
    const TRANSACTION_TYPE$2 = 2;
    const TRANSACTION_TYPE_UINT8ARRAY$1 = hexToBytes$2(TRANSACTION_TYPE$2.toString(16).padStart(2, "0"));
    class FeeMarketEIP1559Transaction extends BaseTransaction {
      /**
       * This constructor takes the values, validates them, assigns them and freezes the object.
       *
       * It is not recommended to use this constructor directly. Instead use
       * the static factory methods to assist in creating a Transaction object from
       * varying data types.
       */
      constructor(txData, opts = {}) {
        var _a2;
        super(Object.assign(Object.assign({}, txData), { type: TRANSACTION_TYPE$2 }), opts);
        this.DEFAULT_HARDFORK = "london";
        const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;
        this.common = this._getCommon(opts.common, chainId);
        this.chainId = this.common.chainId();
        if (!this.common.isActivatedEIP(1559)) {
          throw new Error("EIP-1559 not enabled on Common");
        }
        this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);
        const accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
        this.accessList = accessListData.accessList;
        this.AccessListJSON = accessListData.AccessListJSON;
        verifyAccessList(this.accessList);
        this.maxFeePerGas = uint8ArrayToBigInt$1(toUint8Array(maxFeePerGas === "" ? "0x" : maxFeePerGas));
        this.maxPriorityFeePerGas = uint8ArrayToBigInt$1(toUint8Array(maxPriorityFeePerGas === "" ? "0x" : maxPriorityFeePerGas));
        this._validateCannotExceedMaxInteger({
          maxFeePerGas: this.maxFeePerGas,
          maxPriorityFeePerGas: this.maxPriorityFeePerGas
        });
        BaseTransaction._validateNotArray(txData);
        if (this.gasLimit * this.maxFeePerGas > MAX_INTEGER) {
          const msg = this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)");
          throw new Error(msg);
        }
        if (this.maxFeePerGas < this.maxPriorityFeePerGas) {
          const msg = this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)");
          throw new Error(msg);
        }
        this._validateYParity();
        this._validateHighS();
        const freeze = (_a2 = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a2 !== void 0 ? _a2 : true;
        if (freeze) {
          Object.freeze(this);
        }
      }
      /**
       * Instantiate a transaction from a data dictionary.
       *
       * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
       * accessList, v, r, s }
       *
       * Notes:
       * - `chainId` will be set automatically if not provided
       * - All parameters are optional and have some basic default values
       */
      static fromTxData(txData, opts = {}) {
        return new FeeMarketEIP1559Transaction(txData, opts);
      }
      /**
       * Instantiate a transaction from the serialized tx.
       *
       * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
       * accessList, signatureYParity, signatureR, signatureS])`
       */
      static fromSerializedTx(serialized, opts = {}) {
        if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY$1)) {
          throw new Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE$2}, received: ${bytesToHex$2(serialized.subarray(0, 1))}`);
        }
        const values = RLP.decode(serialized.subarray(1));
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized tx input: must be array");
        }
        return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);
      }
      /**
       * Create a transaction from a values array.
       *
       * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
       * accessList, signatureYParity, signatureR, signatureS]`
       */
      static fromValuesArray(values, opts = {}) {
        if (values.length !== 9 && values.length !== 12) {
          throw new Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");
        }
        const [chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data, accessList, v2, r2, s] = values;
        this._validateNotArray({ chainId, v: v2 });
        validateNoLeadingZeroes({
          nonce,
          maxPriorityFeePerGas,
          maxFeePerGas,
          gasLimit,
          value,
          v: v2,
          r: r2,
          s
        });
        return new FeeMarketEIP1559Transaction({
          chainId: uint8ArrayToBigInt$1(chainId),
          nonce,
          maxPriorityFeePerGas,
          maxFeePerGas,
          gasLimit,
          to,
          value,
          data,
          accessList: accessList !== null && accessList !== void 0 ? accessList : [],
          v: v2 !== void 0 ? uint8ArrayToBigInt$1(v2) : void 0,
          r: r2,
          s
        }, opts);
      }
      /**
       * The amount of gas paid for the data in this tx
       */
      getDataFee() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
          return this.cache.dataFee.value;
        }
        let cost = super.getDataFee();
        cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));
        if (Object.isFrozen(this)) {
          this.cache.dataFee = {
            value: cost,
            hardfork: this.common.hardfork()
          };
        }
        return cost;
      }
      /**
       * The up front amount that an account must have for this transaction to be valid
       * @param baseFee The base fee of the block (will be set to 0 if not provided)
       */
      getUpfrontCost(baseFee = BigInt(0)) {
        const prio = this.maxPriorityFeePerGas;
        const maxBase = this.maxFeePerGas - baseFee;
        const inclusionFeePerGas = prio < maxBase ? prio : maxBase;
        const gasPrice = inclusionFeePerGas + baseFee;
        return this.gasLimit * gasPrice + this.value;
      }
      /**
       * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.
       *
       * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
       * accessList, signatureYParity, signatureR, signatureS]`
       *
       * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block
       * with {@link Block.fromValuesArray}.
       *
       * For an unsigned tx this method uses the empty Uint8Array values for the
       * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
       * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.
       */
      raw() {
        return [
          bigIntToUnpaddedUint8Array(this.chainId),
          bigIntToUnpaddedUint8Array(this.nonce),
          bigIntToUnpaddedUint8Array(this.maxPriorityFeePerGas),
          bigIntToUnpaddedUint8Array(this.maxFeePerGas),
          bigIntToUnpaddedUint8Array(this.gasLimit),
          this.to !== void 0 ? this.to.buf : Uint8Array.from([]),
          bigIntToUnpaddedUint8Array(this.value),
          this.data,
          this.accessList,
          this.v !== void 0 ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),
          this.r !== void 0 ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),
          this.s !== void 0 ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])
        ];
      }
      /**
       * Returns the serialized encoding of the EIP-1559 transaction.
       *
       * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,
       * accessList, signatureYParity, signatureR, signatureS])`
       *
       * Note that in contrast to the legacy tx serialization format this is not
       * valid RLP any more due to the raw tx type preceding and concatenated to
       * the RLP encoding of the values.
       */
      serialize() {
        const base2 = this.raw();
        return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY$1, RLP.encode(base2));
      }
      /**
       * Returns the serialized unsigned tx (hashed or raw), which can be used
       * to sign the transaction (e.g. for sending to a hardware wallet).
       *
       * Note: in contrast to the legacy tx the raw message format is already
       * serialized and doesn't need to be RLP encoded any more.
       *
       * ```javascript
       * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
       * ```
       *
       * @param hashMessage - Return hashed message if set to true (default: true)
       */
      getMessageToSign(hashMessage2 = true) {
        const base2 = this.raw().slice(0, 9);
        const message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY$1, RLP.encode(base2));
        if (hashMessage2) {
          return keccak256(message);
        }
        return message;
      }
      /**
       * Computes a sha3-256 hash of the serialized tx.
       *
       * This method can only be used for signed txs (it throws otherwise).
       * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
       */
      hash() {
        if (!this.isSigned()) {
          const msg = this._errorMsg("Cannot call hash method if transaction is not signed");
          throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
          if (!this.cache.hash) {
            this.cache.hash = keccak256(this.serialize());
          }
          return this.cache.hash;
        }
        return keccak256(this.serialize());
      }
      /**
       * Computes a sha3-256 hash which can be used to verify the signature
       */
      getMessageToVerifySignature() {
        return this.getMessageToSign();
      }
      /**
       * Returns the public key of the sender
       */
      getSenderPublicKey() {
        if (!this.isSigned()) {
          const msg = this._errorMsg("Cannot call this method if transaction is not signed");
          throw new Error(msg);
        }
        const msgHash = this.getMessageToVerifySignature();
        const { v: v2, r: r2, s } = this;
        this._validateHighS();
        try {
          return ecrecover(
            msgHash,
            v2 + BigInt(27),
            // Recover the 27 which was stripped from ecsign
            bigIntToUnpaddedUint8Array(r2),
            bigIntToUnpaddedUint8Array(s)
          );
        } catch (e) {
          const msg = this._errorMsg("Invalid Signature");
          throw new Error(msg);
        }
      }
      _processSignature(v2, r2, s) {
        const opts = Object.assign(Object.assign({}, this.txOptions), { common: this.common });
        return FeeMarketEIP1559Transaction.fromTxData({
          chainId: this.chainId,
          nonce: this.nonce,
          maxPriorityFeePerGas: this.maxPriorityFeePerGas,
          maxFeePerGas: this.maxFeePerGas,
          gasLimit: this.gasLimit,
          to: this.to,
          value: this.value,
          data: this.data,
          accessList: this.accessList,
          v: v2 - BigInt(27),
          r: uint8ArrayToBigInt$1(r2),
          s: uint8ArrayToBigInt$1(s)
        }, opts);
      }
      /**
       * Returns an object with the JSON representation of the transaction
       */
      toJSON() {
        const accessListJSON = getAccessListJSON(this.accessList);
        return {
          chainId: bigIntToHex(this.chainId),
          nonce: bigIntToHex(this.nonce),
          maxPriorityFeePerGas: bigIntToHex(this.maxPriorityFeePerGas),
          maxFeePerGas: bigIntToHex(this.maxFeePerGas),
          gasLimit: bigIntToHex(this.gasLimit),
          to: this.to !== void 0 ? this.to.toString() : void 0,
          value: bigIntToHex(this.value),
          data: bytesToHex$2(this.data),
          accessList: accessListJSON,
          v: this.v !== void 0 ? bigIntToHex(this.v) : void 0,
          r: this.r !== void 0 ? bigIntToHex(this.r) : void 0,
          s: this.s !== void 0 ? bigIntToHex(this.s) : void 0
        };
      }
      /**
       * Return a compact error string representation of the object
       */
      errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;
        return errorStr;
      }
      /**
       * Internal helper function to create an annotated error message
       *
       * @param msg Base error message
       * @hidden
       */
      _errorMsg(msg) {
        return `${msg} (${this.errorStr()})`;
      }
    }
    const TRANSACTION_TYPE$1 = 1;
    const TRANSACTION_TYPE_UINT8ARRAY = hexToBytes$2(TRANSACTION_TYPE$1.toString(16).padStart(2, "0"));
    class AccessListEIP2930Transaction extends BaseTransaction {
      /**
       * This constructor takes the values, validates them, assigns them and freezes the object.
       *
       * It is not recommended to use this constructor directly. Instead use
       * the static factory methods to assist in creating a Transaction object from
       * varying data types.
       */
      constructor(txData, opts = {}) {
        var _a2;
        super(Object.assign(Object.assign({}, txData), { type: TRANSACTION_TYPE$1 }), opts);
        this.DEFAULT_HARDFORK = "berlin";
        const { chainId, accessList, gasPrice } = txData;
        this.common = this._getCommon(opts.common, chainId);
        this.chainId = this.common.chainId();
        if (!this.common.isActivatedEIP(2930)) {
          throw new Error("EIP-2930 not enabled on Common");
        }
        this.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);
        const accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);
        this.accessList = accessListData.accessList;
        this.AccessListJSON = accessListData.AccessListJSON;
        verifyAccessList(this.accessList);
        this.gasPrice = uint8ArrayToBigInt$1(toUint8Array(gasPrice === "" ? "0x" : gasPrice));
        this._validateCannotExceedMaxInteger({
          gasPrice: this.gasPrice
        });
        BaseTransaction._validateNotArray(txData);
        if (this.gasPrice * this.gasLimit > MAX_INTEGER) {
          const msg = this._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER");
          throw new Error(msg);
        }
        this._validateYParity();
        this._validateHighS();
        const freeze = (_a2 = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a2 !== void 0 ? _a2 : true;
        if (freeze) {
          Object.freeze(this);
        }
      }
      /**
       * Instantiate a transaction from a data dictionary.
       *
       * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
       * v, r, s }
       *
       * Notes:
       * - `chainId` will be set automatically if not provided
       * - All parameters are optional and have some basic default values
       */
      static fromTxData(txData, opts = {}) {
        return new AccessListEIP2930Transaction(txData, opts);
      }
      /**
       * Instantiate a transaction from the serialized tx.
       *
       * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
       * signatureYParity (v), signatureR (r), signatureS (s)])`
       */
      static fromSerializedTx(serialized, opts = {}) {
        if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {
          throw new Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE$1}, received: ${bytesToHex$2(serialized.subarray(0, 1))}`);
        }
        const values = RLP.decode(Uint8Array.from(serialized.subarray(1)));
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized tx input: must be array");
        }
        return AccessListEIP2930Transaction.fromValuesArray(values, opts);
      }
      /**
       * Create a transaction from a values array.
       *
       * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
       * signatureYParity (v), signatureR (r), signatureS (s)]`
       */
      static fromValuesArray(values, opts = {}) {
        if (values.length !== 8 && values.length !== 11) {
          throw new Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");
        }
        const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v2, r2, s] = values;
        this._validateNotArray({ chainId, v: v2 });
        validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v: v2, r: r2, s });
        const emptyAccessList = [];
        return new AccessListEIP2930Transaction({
          chainId: uint8ArrayToBigInt$1(chainId),
          nonce,
          gasPrice,
          gasLimit,
          to,
          value,
          data,
          accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,
          v: v2 !== void 0 ? uint8ArrayToBigInt$1(v2) : void 0,
          r: r2,
          s
        }, opts);
      }
      /**
       * The amount of gas paid for the data in this tx
       */
      getDataFee() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
          return this.cache.dataFee.value;
        }
        let cost = super.getDataFee();
        cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));
        if (Object.isFrozen(this)) {
          this.cache.dataFee = {
            value: cost,
            hardfork: this.common.hardfork()
          };
        }
        return cost;
      }
      /**
       * The up front amount that an account must have for this transaction to be valid
       */
      getUpfrontCost() {
        return this.gasLimit * this.gasPrice + this.value;
      }
      /**
       * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.
       *
       * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
       * signatureYParity (v), signatureR (r), signatureS (s)]`
       *
       * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block
       * with {@link Block.fromValuesArray}.
       *
       * For an unsigned tx this method uses the empty UINT8ARRAY values for the
       * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
       * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.
       */
      raw() {
        return [
          bigIntToUnpaddedUint8Array(this.chainId),
          bigIntToUnpaddedUint8Array(this.nonce),
          bigIntToUnpaddedUint8Array(this.gasPrice),
          bigIntToUnpaddedUint8Array(this.gasLimit),
          this.to !== void 0 ? this.to.buf : Uint8Array.from([]),
          bigIntToUnpaddedUint8Array(this.value),
          this.data,
          this.accessList,
          this.v !== void 0 ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),
          this.r !== void 0 ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),
          this.s !== void 0 ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])
        ];
      }
      /**
       * Returns the serialized encoding of the EIP-2930 transaction.
       *
       * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,
       * signatureYParity (v), signatureR (r), signatureS (s)])`
       *
       * Note that in contrast to the legacy tx serialization format this is not
       * valid RLP any more due to the raw tx type preceding and concatenated to
       * the RLP encoding of the values.
       */
      serialize() {
        const base2 = this.raw();
        return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base2));
      }
      /**
       * Returns the serialized unsigned tx (hashed or raw), which can be used
       * to sign the transaction (e.g. for sending to a hardware wallet).
       *
       * Note: in contrast to the legacy tx the raw message format is already
       * serialized and doesn't need to be RLP encoded any more.
       *
       * ```javascript
       * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input
       * ```
       *
       * @param hashMessage - Return hashed message if set to true (default: true)
       */
      getMessageToSign(hashMessage2 = true) {
        const base2 = this.raw().slice(0, 8);
        const message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base2));
        if (hashMessage2) {
          return keccak256(message);
        }
        return message;
      }
      /**
       * Computes a sha3-256 hash of the serialized tx.
       *
       * This method can only be used for signed txs (it throws otherwise).
       * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
       */
      hash() {
        if (!this.isSigned()) {
          const msg = this._errorMsg("Cannot call hash method if transaction is not signed");
          throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
          if (!this.cache.hash) {
            this.cache.hash = keccak256(this.serialize());
          }
          return this.cache.hash;
        }
        return keccak256(this.serialize());
      }
      /**
       * Computes a sha3-256 hash which can be used to verify the signature
       */
      getMessageToVerifySignature() {
        return this.getMessageToSign();
      }
      /**
       * Returns the public key of the sender
       */
      getSenderPublicKey() {
        if (!this.isSigned()) {
          const msg = this._errorMsg("Cannot call this method if transaction is not signed");
          throw new Error(msg);
        }
        const msgHash = this.getMessageToVerifySignature();
        const { v: v2, r: r2, s } = this;
        this._validateHighS();
        try {
          return ecrecover(
            msgHash,
            v2 + BigInt(27),
            // Recover the 27 which was stripped from ecsign
            bigIntToUnpaddedUint8Array(r2),
            bigIntToUnpaddedUint8Array(s)
          );
        } catch (e) {
          const msg = this._errorMsg("Invalid Signature");
          throw new Error(msg);
        }
      }
      _processSignature(v2, r2, s) {
        const opts = Object.assign(Object.assign({}, this.txOptions), { common: this.common });
        return AccessListEIP2930Transaction.fromTxData({
          chainId: this.chainId,
          nonce: this.nonce,
          gasPrice: this.gasPrice,
          gasLimit: this.gasLimit,
          to: this.to,
          value: this.value,
          data: this.data,
          accessList: this.accessList,
          v: v2 - BigInt(27),
          r: uint8ArrayToBigInt$1(r2),
          s: uint8ArrayToBigInt$1(s)
        }, opts);
      }
      /**
       * Returns an object with the JSON representation of the transaction
       */
      toJSON() {
        const accessListJSON = getAccessListJSON(this.accessList);
        return {
          chainId: bigIntToHex(this.chainId),
          nonce: bigIntToHex(this.nonce),
          gasPrice: bigIntToHex(this.gasPrice),
          gasLimit: bigIntToHex(this.gasLimit),
          to: this.to !== void 0 ? this.to.toString() : void 0,
          value: bigIntToHex(this.value),
          data: bytesToHex$2(this.data),
          accessList: accessListJSON,
          v: this.v !== void 0 ? bigIntToHex(this.v) : void 0,
          r: this.r !== void 0 ? bigIntToHex(this.r) : void 0,
          s: this.s !== void 0 ? bigIntToHex(this.s) : void 0
        };
      }
      /**
       * Return a compact error string representation of the object
       */
      errorStr() {
        var _a2, _b;
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` gasPrice=${this.gasPrice} accessListCount=${(_b = (_a2 = this.accessList) === null || _a2 === void 0 ? void 0 : _a2.length) !== null && _b !== void 0 ? _b : 0}`;
        return errorStr;
      }
      /**
       * Internal helper function to create an annotated error message
       *
       * @param msg Base error message
       * @hidden
       */
      _errorMsg(msg) {
        return `${msg} (${this.errorStr()})`;
      }
    }
    const TRANSACTION_TYPE = 0;
    function meetsEIP155(_v, chainId) {
      const v2 = Number(_v);
      const chainIdDoubled = Number(chainId) * 2;
      return v2 === chainIdDoubled + 35 || v2 === chainIdDoubled + 36;
    }
    class Transaction extends BaseTransaction {
      /**
       * This constructor takes the values, validates them, assigns them and freezes the object.
       *
       * It is not recommended to use this constructor directly. Instead use
       * the static factory methods to assist in creating a Transaction object from
       * varying data types.
       */
      constructor(txData, opts = {}) {
        var _a2;
        super(Object.assign(Object.assign({}, txData), { type: TRANSACTION_TYPE }), opts);
        this.common = this._validateTxV(this.v, opts.common);
        this.gasPrice = uint8ArrayToBigInt$1(toUint8Array(txData.gasPrice === "" ? "0x" : txData.gasPrice));
        if (this.gasPrice * this.gasLimit > MAX_INTEGER) {
          const msg = this._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)");
          throw new Error(msg);
        }
        this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });
        BaseTransaction._validateNotArray(txData);
        if (this.common.gteHardfork("spuriousDragon")) {
          if (!this.isSigned()) {
            this.activeCapabilities.push(Capability.EIP155ReplayProtection);
          } else {
            if (meetsEIP155(this.v, this.common.chainId())) {
              this.activeCapabilities.push(Capability.EIP155ReplayProtection);
            }
          }
        }
        const freeze = (_a2 = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a2 !== void 0 ? _a2 : true;
        if (freeze) {
          Object.freeze(this);
        }
      }
      /**
       * Instantiate a transaction from a data dictionary.
       *
       * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }
       *
       * Notes:
       * - All parameters are optional and have some basic default values
       */
      static fromTxData(txData, opts = {}) {
        return new Transaction(txData, opts);
      }
      /**
       * Instantiate a transaction from the serialized tx.
       *
       * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
       */
      static fromSerializedTx(serialized, opts = {}) {
        const values = RLP.decode(serialized);
        if (!Array.isArray(values)) {
          throw new Error("Invalid serialized tx input. Must be array");
        }
        return this.fromValuesArray(values, opts);
      }
      /**
       * Create a transaction from a values array.
       *
       * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
       */
      static fromValuesArray(values, opts = {}) {
        if (values.length !== 6 && values.length !== 9) {
          throw new Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");
        }
        const [nonce, gasPrice, gasLimit, to, value, data, v2, r2, s] = values;
        validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v: v2, r: r2, s });
        return new Transaction({
          nonce,
          gasPrice,
          gasLimit,
          to,
          value,
          data,
          v: v2,
          r: r2,
          s
        }, opts);
      }
      /**
       * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.
       *
       * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`
       *
       * For legacy txs this is also the correct format to add transactions
       * to a block with {@link Block.fromValuesArray} (use the `serialize()` method
       * for typed txs).
       *
       * For an unsigned tx this method returns the empty Uint8Array values
       * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant
       * representation have a look at {@link Transaction.getMessageToSign}.
       */
      raw() {
        return [
          bigIntToUnpaddedUint8Array(this.nonce),
          bigIntToUnpaddedUint8Array(this.gasPrice),
          bigIntToUnpaddedUint8Array(this.gasLimit),
          this.to !== void 0 ? this.to.buf : Uint8Array.from([]),
          bigIntToUnpaddedUint8Array(this.value),
          this.data,
          this.v !== void 0 ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),
          this.r !== void 0 ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),
          this.s !== void 0 ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])
        ];
      }
      /**
       * Returns the serialized encoding of the legacy transaction.
       *
       * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`
       *
       * For an unsigned tx this method uses the empty Uint8Array values for the
       * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant
       * representation for external signing use {@link Transaction.getMessageToSign}.
       */
      serialize() {
        return RLP.encode(this.raw());
      }
      _getMessageToSign() {
        const values = [
          bigIntToUnpaddedUint8Array(this.nonce),
          bigIntToUnpaddedUint8Array(this.gasPrice),
          bigIntToUnpaddedUint8Array(this.gasLimit),
          this.to !== void 0 ? this.to.buf : Uint8Array.from([]),
          bigIntToUnpaddedUint8Array(this.value),
          this.data
        ];
        if (this.supports(Capability.EIP155ReplayProtection)) {
          values.push(toUint8Array(this.common.chainId()));
          values.push(unpadUint8Array(toUint8Array(0)));
          values.push(unpadUint8Array(toUint8Array(0)));
        }
        return values;
      }
      getMessageToSign(hashMessage2 = true) {
        const message = this._getMessageToSign();
        if (hashMessage2) {
          return keccak256(RLP.encode(message));
        }
        return message;
      }
      /**
       * The amount of gas paid for the data in this tx
       */
      getDataFee() {
        if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {
          return this.cache.dataFee.value;
        }
        if (Object.isFrozen(this)) {
          this.cache.dataFee = {
            value: super.getDataFee(),
            hardfork: this.common.hardfork()
          };
        }
        return super.getDataFee();
      }
      /**
       * The up front amount that an account must have for this transaction to be valid
       */
      getUpfrontCost() {
        return this.gasLimit * this.gasPrice + this.value;
      }
      /**
       * Computes a sha3-256 hash of the serialized tx.
       *
       * This method can only be used for signed txs (it throws otherwise).
       * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.
       */
      hash() {
        if (!this.isSigned()) {
          const msg = this._errorMsg("Cannot call hash method if transaction is not signed");
          throw new Error(msg);
        }
        if (Object.isFrozen(this)) {
          if (!this.cache.hash) {
            this.cache.hash = keccak256(RLP.encode(this.raw()));
          }
          return this.cache.hash;
        }
        return keccak256(RLP.encode(this.raw()));
      }
      /**
       * Computes a sha3-256 hash which can be used to verify the signature
       */
      getMessageToVerifySignature() {
        if (!this.isSigned()) {
          const msg = this._errorMsg("This transaction is not signed");
          throw new Error(msg);
        }
        const message = this._getMessageToSign();
        return keccak256(RLP.encode(message));
      }
      /**
       * Returns the public key of the sender
       */
      getSenderPublicKey() {
        const msgHash = this.getMessageToVerifySignature();
        const { v: v2, r: r2, s } = this;
        this._validateHighS();
        try {
          return ecrecover(msgHash, v2, bigIntToUnpaddedUint8Array(r2), bigIntToUnpaddedUint8Array(s), this.supports(Capability.EIP155ReplayProtection) ? this.common.chainId() : void 0);
        } catch (e) {
          const msg = this._errorMsg("Invalid Signature");
          throw new Error(msg);
        }
      }
      /**
       * Process the v, r, s values from the `sign` method of the base transaction.
       */
      _processSignature(_v, r2, s) {
        let v2 = _v;
        if (this.supports(Capability.EIP155ReplayProtection)) {
          v2 += this.common.chainId() * BigInt(2) + BigInt(8);
        }
        const opts = Object.assign(Object.assign({}, this.txOptions), { common: this.common });
        return Transaction.fromTxData({
          nonce: this.nonce,
          gasPrice: this.gasPrice,
          gasLimit: this.gasLimit,
          to: this.to,
          value: this.value,
          data: this.data,
          v: v2,
          r: uint8ArrayToBigInt$1(r2),
          s: uint8ArrayToBigInt$1(s)
        }, opts);
      }
      /**
       * Returns an object with the JSON representation of the transaction.
       */
      toJSON() {
        return {
          nonce: bigIntToHex(this.nonce),
          gasPrice: bigIntToHex(this.gasPrice),
          gasLimit: bigIntToHex(this.gasLimit),
          to: this.to !== void 0 ? this.to.toString() : void 0,
          value: bigIntToHex(this.value),
          data: bytesToHex$2(this.data),
          v: this.v !== void 0 ? bigIntToHex(this.v) : void 0,
          r: this.r !== void 0 ? bigIntToHex(this.r) : void 0,
          s: this.s !== void 0 ? bigIntToHex(this.s) : void 0
        };
      }
      /**
       * Validates tx's `v` value
       */
      _validateTxV(_v, common) {
        let chainIdBigInt;
        const v2 = _v !== void 0 ? Number(_v) : void 0;
        if (v2 !== void 0) {
          if (v2 < 37 && v2 !== 27 && v2 !== 28) {
            throw new Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v2}`);
          }
        }
        if (v2 !== void 0 && v2 !== 0 && (!common || common.gteHardfork("spuriousDragon")) && v2 !== 27 && v2 !== 28) {
          if (common) {
            if (!meetsEIP155(BigInt(v2), common.chainId())) {
              throw new Error(`Incompatible EIP155-based V ${v2} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`);
            }
          } else {
            let numSub;
            if ((v2 - 35) % 2 === 0) {
              numSub = 35;
            } else {
              numSub = 36;
            }
            chainIdBigInt = BigInt(v2 - numSub) / BigInt(2);
          }
        }
        return this._getCommon(common, chainIdBigInt);
      }
      /**
       * Return a compact error string representation of the object
       */
      errorStr() {
        let errorStr = this._getSharedErrorPostfix();
        errorStr += ` gasPrice=${this.gasPrice}`;
        return errorStr;
      }
      /**
       * Internal helper function to create an annotated error message
       *
       * @param msg Base error message
       * @hidden
       */
      _errorMsg(msg) {
        return `${msg} (${this.errorStr()})`;
      }
    }
    const extraTxTypes = /* @__PURE__ */ new Map();
    class TransactionFactory {
      // It is not possible to instantiate a TransactionFactory object.
      // eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor
      constructor() {
      }
      static typeToInt(txType) {
        return Number(uint8ArrayToBigInt$1(toUint8Array(txType)));
      }
      static registerTransactionType(type, txClass) {
        const txType = TransactionFactory.typeToInt(type);
        extraTxTypes.set(txType, txClass);
      }
      /**
       * Create a transaction from a `txData` object
       *
       * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)
       * @param txOptions - Options to pass on to the constructor of the transaction
       */
      static fromTxData(txData, txOptions = {}) {
        if (!("type" in txData) || txData.type === void 0) {
          return Transaction.fromTxData(txData, txOptions);
        }
        const txType = TransactionFactory.typeToInt(txData.type);
        if (txType === 0) {
          return Transaction.fromTxData(txData, txOptions);
        }
        if (txType === 1) {
          return AccessListEIP2930Transaction.fromTxData(
            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
            txData,
            txOptions
          );
        }
        if (txType === 2) {
          return FeeMarketEIP1559Transaction.fromTxData(
            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
            txData,
            txOptions
          );
        }
        const ExtraTransaction = extraTxTypes.get(txType);
        if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromTxData) {
          return ExtraTransaction.fromTxData(txData, txOptions);
        }
        throw new Error(`Tx instantiation with type ${txType} not supported`);
      }
      /**
       * This method tries to decode serialized data.
       *
       * @param data - The data Uint8Array
       * @param txOptions - The transaction options
       */
      static fromSerializedData(data, txOptions = {}) {
        if (data[0] <= 127) {
          switch (data[0]) {
            case 1:
              return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);
            case 2:
              return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);
            default: {
              const ExtraTransaction = extraTxTypes.get(Number(data[0]));
              if (ExtraTransaction === null || ExtraTransaction === void 0 ? void 0 : ExtraTransaction.fromSerializedTx) {
                return ExtraTransaction.fromSerializedTx(data, txOptions);
              }
              throw new Error(`TypedTransaction with ID ${data[0]} unknown`);
            }
          }
        } else {
          return Transaction.fromSerializedTx(data, txOptions);
        }
      }
      /**
       * When decoding a BlockBody, in the transactions field, a field is either:
       * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))
       * A Uint8Array[] (Legacy Transaction)
       * This method returns the right transaction.
       *
       * @param data - A Uint8Array or Uint8Array[]
       * @param txOptions - The transaction options
       */
      static fromBlockBodyData(data, txOptions = {}) {
        if (isUint8Array(data)) {
          return this.fromSerializedData(data, txOptions);
        }
        if (Array.isArray(data)) {
          return Transaction.fromValuesArray(data, txOptions);
        }
        throw new Error("Cannot decode transaction: unknown type input");
      }
    }
    var __awaiter$w = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const parseAndValidatePrivateKey = (data, ignoreLength) => {
      let privateKeyUint8Array;
      if (!ignoreLength && typeof data === "string" && isHexStrict$1(data) && data.length !== 66) {
        throw new PrivateKeyLengthError();
      }
      try {
        privateKeyUint8Array = isUint8Array(data) ? data : bytesToUint8Array(data);
      } catch (_a2) {
        throw new InvalidPrivateKeyError();
      }
      if (!ignoreLength && privateKeyUint8Array.byteLength !== 32) {
        throw new PrivateKeyLengthError();
      }
      return privateKeyUint8Array;
    };
    const hashMessage = (message) => {
      const messageHex = isHexStrict$1(message) ? message : utf8ToHex(message);
      const messageBytes = hexToBytes$2(messageHex);
      const preamble = hexToBytes$2(fromUtf8(`Ethereum Signed Message:
${messageBytes.byteLength}`));
      const ethMessage = uint8ArrayConcat(preamble, messageBytes);
      return sha3Raw(ethMessage);
    };
    const signMessageWithPrivateKey = (hash2, privateKey) => {
      const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
      const signature = secp256k1.sign(hash2.substring(2), privateKeyUint8Array);
      const signatureBytes = signature.toCompactRawBytes();
      const r2 = signature.r.toString(16).padStart(64, "0");
      const s = signature.s.toString(16).padStart(64, "0");
      const v2 = signature.recovery + 27;
      return {
        messageHash: hash2,
        v: numberToHex$1(v2),
        r: `0x${r2}`,
        s: `0x${s}`,
        signature: `${bytesToHex$2(signatureBytes)}${v2.toString(16)}`
      };
    };
    const sign$4 = (data, privateKey) => {
      const hash2 = hashMessage(data);
      const { messageHash, v: v2, r: r2, s, signature } = signMessageWithPrivateKey(hash2, privateKey);
      return {
        message: data,
        messageHash,
        v: v2,
        r: r2,
        s,
        signature
      };
    };
    const signTransaction$4 = (transaction, privateKey) => __awaiter$w(void 0, void 0, void 0, function* () {
      const signedTx = transaction.sign(hexToBytes$2(privateKey));
      if (isNullish$1(signedTx.v) || isNullish$1(signedTx.r) || isNullish$1(signedTx.s))
        throw new TransactionSigningError("Signer Error");
      const validationErrors = signedTx.validate(true);
      if (validationErrors.length > 0) {
        let errorString = "Signer Error ";
        for (const validationError of validationErrors) {
          errorString += `${errorString} ${validationError}.`;
        }
        throw new TransactionSigningError(errorString);
      }
      const rawTx = bytesToHex$2(signedTx.serialize());
      const txHash = sha3Raw(rawTx);
      return {
        messageHash: bytesToHex$2(signedTx.getMessageToSign(true)),
        v: `0x${signedTx.v.toString(16)}`,
        r: `0x${signedTx.r.toString(16).padStart(64, "0")}`,
        s: `0x${signedTx.s.toString(16).padStart(64, "0")}`,
        rawTransaction: rawTx,
        transactionHash: bytesToHex$2(txHash)
      };
    });
    const recoverTransaction = (rawTransaction) => {
      if (isNullish$1(rawTransaction))
        throw new UndefinedRawTransactionError();
      const tx = TransactionFactory.fromSerializedData(hexToBytes$2(rawTransaction));
      return toChecksumAddress(tx.getSenderAddress().toString());
    };
    const recover = (data, signatureOrV, prefixedOrR, s, prefixed) => {
      if (typeof data === "object") {
        const signatureStr = `${data.r}${data.s.slice(2)}${data.v.slice(2)}`;
        return recover(data.messageHash, signatureStr, prefixedOrR);
      }
      if (typeof signatureOrV === "string" && typeof prefixedOrR === "string" && !isNullish$1(s)) {
        const signatureStr = `${prefixedOrR}${s.slice(2)}${signatureOrV.slice(2)}`;
        return recover(data, signatureStr, prefixed);
      }
      if (isNullish$1(signatureOrV))
        throw new InvalidSignatureError("signature string undefined");
      const V_INDEX = 130;
      const hashedMessage = prefixedOrR ? data : hashMessage(data);
      let v2 = parseInt(signatureOrV.substring(V_INDEX), 16);
      if (v2 > 26) {
        v2 -= 27;
      }
      const ecPublicKey = secp256k1.Signature.fromCompact(signatureOrV.slice(2, V_INDEX)).addRecoveryBit(v2).recoverPublicKey(hashedMessage.replace("0x", "")).toRawBytes(false);
      const publicHash = sha3Raw(ecPublicKey.subarray(1));
      const address = toChecksumAddress(`0x${publicHash.slice(-40)}`);
      return address;
    };
    const privateKeyToAddress = (privateKey) => {
      const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
      const publicKey = secp256k1.getPublicKey(privateKeyUint8Array, false);
      const publicKeyHash = sha3Raw(publicKey.slice(1));
      const address = publicKeyHash.slice(-40);
      return toChecksumAddress(`0x${address}`);
    };
    const privateKeyToPublicKey = (privateKey, isCompressed) => {
      const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
      return `0x${bytesToHex$2(secp256k1.getPublicKey(privateKeyUint8Array, isCompressed)).slice(4)}`;
    };
    const encrypt = (privateKey, password, options) => __awaiter$w(void 0, void 0, void 0, function* () {
      var _a2, _b, _c, _d, _e, _f, _g;
      const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey);
      let salt;
      if (options === null || options === void 0 ? void 0 : options.salt) {
        salt = typeof options.salt === "string" ? hexToBytes$2(options.salt) : options.salt;
      } else {
        salt = randomBytes(32);
      }
      if (!(isString(password) || isUint8Array(password))) {
        throw new InvalidPasswordError();
      }
      const uint8ArrayPassword = typeof password === "string" ? hexToBytes$2(utf8ToHex(password)) : password;
      let initializationVector;
      if (options === null || options === void 0 ? void 0 : options.iv) {
        initializationVector = typeof options.iv === "string" ? hexToBytes$2(options.iv) : options.iv;
        if (initializationVector.length !== 16) {
          throw new IVLengthError();
        }
      } else {
        initializationVector = randomBytes(16);
      }
      const kdf = (_a2 = options === null || options === void 0 ? void 0 : options.kdf) !== null && _a2 !== void 0 ? _a2 : "scrypt";
      let derivedKey;
      let kdfparams;
      if (kdf === "pbkdf2") {
        kdfparams = {
          dklen: (_b = options === null || options === void 0 ? void 0 : options.dklen) !== null && _b !== void 0 ? _b : 32,
          salt: bytesToHex$2(salt).replace("0x", ""),
          c: (_c = options === null || options === void 0 ? void 0 : options.c) !== null && _c !== void 0 ? _c : 262144,
          prf: "hmac-sha256"
        };
        if (kdfparams.c < 1e3) {
          throw new PBKDF2IterationsError();
        }
        derivedKey = pbkdf2Sync(uint8ArrayPassword, salt, kdfparams.c, kdfparams.dklen, "sha256");
      } else if (kdf === "scrypt") {
        kdfparams = {
          n: (_d = options === null || options === void 0 ? void 0 : options.n) !== null && _d !== void 0 ? _d : 8192,
          r: (_e = options === null || options === void 0 ? void 0 : options.r) !== null && _e !== void 0 ? _e : 8,
          p: (_f = options === null || options === void 0 ? void 0 : options.p) !== null && _f !== void 0 ? _f : 1,
          dklen: (_g = options === null || options === void 0 ? void 0 : options.dklen) !== null && _g !== void 0 ? _g : 32,
          salt: bytesToHex$2(salt).replace("0x", "")
        };
        derivedKey = scryptSync(uint8ArrayPassword, salt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);
      } else {
        throw new InvalidKdfError();
      }
      const cipher = yield encrypt$1(privateKeyUint8Array, derivedKey.slice(0, 16), initializationVector, "aes-128-ctr");
      const ciphertext = bytesToHex$2(cipher).slice(2);
      const mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), cipher)).replace("0x", "");
      return {
        version: 3,
        id: uuidV4(),
        address: privateKeyToAddress(privateKeyUint8Array).toLowerCase().replace("0x", ""),
        crypto: {
          ciphertext,
          cipherparams: {
            iv: bytesToHex$2(initializationVector).replace("0x", "")
          },
          cipher: "aes-128-ctr",
          kdf,
          kdfparams,
          mac
        }
      };
    });
    const privateKeyToAccount = (privateKey, ignoreLength) => {
      const privateKeyUint8Array = parseAndValidatePrivateKey(privateKey, ignoreLength);
      return {
        address: privateKeyToAddress(privateKeyUint8Array),
        privateKey: bytesToHex$2(privateKeyUint8Array),
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        signTransaction: (_tx) => {
          throw new TransactionSigningError("Do not have network access to sign the transaction");
        },
        sign: (data) => sign$4(typeof data === "string" ? data : JSON.stringify(data), privateKeyUint8Array),
        encrypt: (password, options) => __awaiter$w(void 0, void 0, void 0, function* () {
          return encrypt(privateKeyUint8Array, password, options);
        })
      };
    };
    const create = () => {
      const privateKey = secp256k1.utils.randomPrivateKey();
      return privateKeyToAccount(`${bytesToHex$2(privateKey)}`);
    };
    const decrypt = (keystore, password, nonStrict) => __awaiter$w(void 0, void 0, void 0, function* () {
      const json = typeof keystore === "object" ? keystore : JSON.parse(nonStrict ? keystore.toLowerCase() : keystore);
      validator.validateJSONSchema(keyStoreSchema, json);
      if (json.version !== 3)
        throw new KeyStoreVersionError();
      const uint8ArrayPassword = typeof password === "string" ? hexToBytes$2(utf8ToHex(password)) : password;
      validator.validate(["bytes"], [uint8ArrayPassword]);
      let derivedKey;
      if (json.crypto.kdf === "scrypt") {
        const kdfparams = json.crypto.kdfparams;
        const uint8ArraySalt = typeof kdfparams.salt === "string" ? hexToBytes$2(kdfparams.salt) : kdfparams.salt;
        derivedKey = scryptSync(uint8ArrayPassword, uint8ArraySalt, kdfparams.n, kdfparams.p, kdfparams.r, kdfparams.dklen);
      } else if (json.crypto.kdf === "pbkdf2") {
        const kdfparams = json.crypto.kdfparams;
        const uint8ArraySalt = typeof kdfparams.salt === "string" ? hexToBytes$2(kdfparams.salt) : kdfparams.salt;
        derivedKey = pbkdf2Sync(uint8ArrayPassword, uint8ArraySalt, kdfparams.c, kdfparams.dklen, "sha256");
      } else {
        throw new InvalidKdfError();
      }
      const ciphertext = hexToBytes$2(json.crypto.ciphertext);
      const mac = sha3Raw(uint8ArrayConcat(derivedKey.slice(16, 32), ciphertext)).replace("0x", "");
      if (mac !== json.crypto.mac) {
        throw new KeyDerivationError();
      }
      const seed = yield decrypt$1(hexToBytes$2(json.crypto.ciphertext), derivedKey.slice(0, 16), hexToBytes$2(json.crypto.cipherparams.iv));
      return privateKeyToAccount(seed);
    });
    var __awaiter$v = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const DEFAULT_BATCH_REQUEST_TIMEOUT = 1e3;
    class Web3BatchRequest {
      constructor(requestManager) {
        this._requestManager = requestManager;
        this._requests = /* @__PURE__ */ new Map();
      }
      get requests() {
        return [...this._requests.values()].map((r2) => r2.payload);
      }
      add(request) {
        const payload = toPayload(request);
        const promise = new Web3DeferredPromise();
        this._requests.set(payload.id, { payload, promise });
        return promise;
      }
      // eslint-disable-next-line class-methods-use-this
      execute(options) {
        var _a2;
        return __awaiter$v(this, void 0, void 0, function* () {
          if (this.requests.length === 0) {
            return Promise.resolve([]);
          }
          const request = new Web3DeferredPromise({
            timeout: (_a2 = options === null || options === void 0 ? void 0 : options.timeout) !== null && _a2 !== void 0 ? _a2 : DEFAULT_BATCH_REQUEST_TIMEOUT,
            eagerStart: true,
            timeoutMessage: "Batch request timeout"
          });
          this._processBatchRequest(request).catch((err) => request.reject(err));
          request.catch((err) => {
            if (err instanceof OperationTimeoutError) {
              this._abortAllRequests("Batch request timeout");
            }
            request.reject(err);
          });
          return request;
        });
      }
      _processBatchRequest(promise) {
        var _a2, _b;
        return __awaiter$v(this, void 0, void 0, function* () {
          const response = yield this._requestManager.sendBatch([...this._requests.values()].map((r2) => r2.payload));
          if (response.length !== this._requests.size) {
            this._abortAllRequests("Invalid batch response");
            throw new ResponseError(response, `Batch request size mismatch the results size. Requests: ${this._requests.size}, Responses: ${response.length}`);
          }
          const requestIds = this.requests.map((r2) => r2.id).map(Number).sort((a, b) => a - b);
          const responseIds = response.map((r2) => r2.id).map(Number).sort((a, b) => a - b);
          if (JSON.stringify(requestIds) !== JSON.stringify(responseIds)) {
            this._abortAllRequests("Invalid batch response");
            throw new ResponseError(response, `Batch request mismatch the results. Requests: [${requestIds.join()}], Responses: [${responseIds.join()}]`);
          }
          for (const res of response) {
            if (isResponseWithResult(res)) {
              (_a2 = this._requests.get(res.id)) === null || _a2 === void 0 ? void 0 : _a2.promise.resolve(res.result);
            } else if (isResponseWithError(res)) {
              (_b = this._requests.get(res.id)) === null || _b === void 0 ? void 0 : _b.promise.reject(res.error);
            }
          }
          promise.resolve(response);
        });
      }
      _abortAllRequests(msg) {
        for (const { promise } of this._requests.values()) {
          promise.reject(new OperationAbortError(msg));
        }
      }
    }
    var __awaiter$u = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class Web3Context extends Web3Config {
      constructor(providerOrContext) {
        var _a2;
        super();
        this.providers = Web3RequestManager.providers;
        if (isNullish(providerOrContext) || typeof providerOrContext === "string" && providerOrContext.trim() !== "" || isSupportedProvider(providerOrContext)) {
          this._requestManager = new Web3RequestManager(providerOrContext);
          this._subscriptionManager = new Web3SubscriptionManager(this._requestManager, {});
          return;
        }
        const { config, provider, requestManager, subscriptionManager, registeredSubscriptions: registeredSubscriptions2, accountProvider, wallet, requestManagerMiddleware } = providerOrContext;
        this.setConfig(config !== null && config !== void 0 ? config : {});
        this._requestManager = requestManager !== null && requestManager !== void 0 ? requestManager : new Web3RequestManager(provider, (_a2 = config === null || config === void 0 ? void 0 : config.enableExperimentalFeatures) === null || _a2 === void 0 ? void 0 : _a2.useSubscriptionWhenCheckingBlockTimeout, requestManagerMiddleware);
        if (subscriptionManager) {
          this._subscriptionManager = subscriptionManager;
        } else {
          this._subscriptionManager = new Web3SubscriptionManager(this.requestManager, registeredSubscriptions2 !== null && registeredSubscriptions2 !== void 0 ? registeredSubscriptions2 : {});
        }
        if (accountProvider) {
          this._accountProvider = accountProvider;
        }
        if (wallet) {
          this._wallet = wallet;
        }
      }
      get requestManager() {
        return this._requestManager;
      }
      /**
       * Will return the current subscriptionManager ({@link Web3SubscriptionManager})
       */
      get subscriptionManager() {
        return this._subscriptionManager;
      }
      get wallet() {
        return this._wallet;
      }
      get accountProvider() {
        return this._accountProvider;
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      static fromContextObject(...args) {
        return new this(...args.reverse());
      }
      getContextObject() {
        var _a2;
        return {
          config: this.config,
          provider: this.provider,
          requestManager: this.requestManager,
          subscriptionManager: this.subscriptionManager,
          registeredSubscriptions: (_a2 = this.subscriptionManager) === null || _a2 === void 0 ? void 0 : _a2.registeredSubscriptions,
          providers: this.providers,
          wallet: this.wallet,
          accountProvider: this.accountProvider
        };
      }
      /**
       * Use to create new object of any type extended by `Web3Context`
       * and link it to current context. This can be used to initiate a global context object
       * and then use it to create new objects of any type extended by `Web3Context`.
       */
      use(ContextRef, ...args) {
        const newContextChild = new ContextRef(...[...args, this.getContextObject()]);
        this.on(Web3ConfigEvent.CONFIG_CHANGE, (event) => {
          newContextChild.setConfig({ [event.name]: event.newValue });
        });
        this[ContextRef.name] = newContextChild;
        return newContextChild;
      }
      /**
       * Link current context to another context.
       */
      link(parentContext) {
        this.setConfig(parentContext.config);
        this._requestManager = parentContext.requestManager;
        this.provider = parentContext.provider;
        this._subscriptionManager = parentContext.subscriptionManager;
        this._wallet = parentContext.wallet;
        this._accountProvider = parentContext._accountProvider;
        parentContext.on(Web3ConfigEvent.CONFIG_CHANGE, (event) => {
          this.setConfig({ [event.name]: event.newValue });
        });
      }
      // eslint-disable-next-line no-use-before-define
      registerPlugin(plugin) {
        if (this[plugin.pluginNamespace] !== void 0)
          throw new ExistingPluginNamespaceError(plugin.pluginNamespace);
        const _pluginObject = {
          [plugin.pluginNamespace]: plugin
        };
        _pluginObject[plugin.pluginNamespace].link(this);
        Object.assign(this, _pluginObject);
      }
      /**
       * Will return the current provider.
       *
       * @returns Returns the current provider
       * @example
       * ```ts
       * const web3 = new Web3Context("http://localhost:8545");
       * console.log(web3.provider);
       * > HttpProvider {
       * 	clientUrl: 'http://localhost:8545',
       * 	httpProviderOptions: undefined
       *  }
       * ```
       */
      get provider() {
        return this.currentProvider;
      }
      /**
       * Will set the current provider.
       *
       * @param provider - The provider to set
       *
       * Accepted providers are of type {@link SupportedProviders}
       * @example
       * ```ts
       *  const web3Context = new web3ContextContext("http://localhost:8545");
       * web3Context.provider = "ws://localhost:8545";
       * console.log(web3Context.provider);
       * > WebSocketProvider {
       * _eventEmitter: EventEmitter {
       * _events: [Object: null prototype] {},
       * _eventsCount: 0,
       * ...
       * }
       * ```
       */
      set provider(provider) {
        this.requestManager.setProvider(provider);
      }
      /**
       * Will return the current provider. (The same as `provider`)
       *
       * @returns Returns the current provider
       * @example
       * ```ts
       * const web3Context = new Web3Context("http://localhost:8545");
       * console.log(web3Context.provider);
       * > HttpProvider {
       * 	clientUrl: 'http://localhost:8545',
       * 	httpProviderOptions: undefined
       *  }
       * ```
       */
      get currentProvider() {
        return this.requestManager.provider;
      }
      /**
       * Will set the current provider. (The same as `provider`)
       *
       * @param provider - {@link SupportedProviders} The provider to set
       *
       * @example
       * ```ts
       *  const web3Context = new Web3Context("http://localhost:8545");
       * web3Context.currentProvider = "ws://localhost:8545";
       * console.log(web3Context.provider);
       * > WebSocketProvider {
       * _eventEmitter: EventEmitter {
       * _events: [Object: null prototype] {},
       * _eventsCount: 0,
       * ...
       * }
       * ```
       */
      set currentProvider(provider) {
        this.requestManager.setProvider(provider);
      }
      /**
       * Will return the givenProvider if available.
       *
       * When using web3.js in an Ethereum compatible browser, it will set with the current native provider by that browser. Will return the given provider by the (browser) environment, otherwise `undefined`.
       */
      // eslint-disable-next-line class-methods-use-this
      get givenProvider() {
        return Web3Context.givenProvider;
      }
      /**
       * Will set the provider.
       *
       * @param provider - {@link SupportedProviders} The provider to set
       * @returns Returns true if the provider was set
       */
      setProvider(provider) {
        this.provider = provider;
        return true;
      }
      setRequestManagerMiddleware(requestManagerMiddleware) {
        this.requestManager.setMiddleware(requestManagerMiddleware);
      }
      /**
       * Will return the {@link Web3BatchRequest} constructor.
       */
      get BatchRequest() {
        return Web3BatchRequest.bind(void 0, this._requestManager);
      }
      /**
       * This method allows extending the web3 modules.
       * Note: This method is only for backward compatibility, and It is recommended to use Web3 v4 Plugin feature for extending web3.js functionality if you are developing something new.
       */
      extend(extendObj) {
        var _a2;
        if (extendObj.property && !this[extendObj.property])
          this[extendObj.property] = {};
        (_a2 = extendObj.methods) === null || _a2 === void 0 ? void 0 : _a2.forEach((element) => {
          const method = (...givenParams) => __awaiter$u(this, void 0, void 0, function* () {
            return this.requestManager.send({
              method: element.call,
              params: givenParams
            });
          });
          if (extendObj.property)
            this[extendObj.property][element.name] = method;
          else
            this[element.name] = method;
        });
        return this;
      }
    }
    Web3Context.providers = Web3RequestManager.providers;
    class Iban {
      /**
       * Construct a direct or indirect IBAN that has conversion methods and validity checks.
       * If the provided string was not of either the length of a direct IBAN (34 or 35),
       * nor the length of an indirect IBAN (20), an Error will be thrown ('Invalid IBAN was provided').
       *
       * @param iban - a Direct or an Indirect IBAN
       * @returns - Iban instance
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS");
       * > Iban { _iban: 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS' }
       * ```
       */
      constructor(iban) {
        this.toAddress = () => {
          if (this.isDirect()) {
            const base36 = this._iban.slice(4);
            const parsedBigInt = Iban._parseInt(base36, 36);
            const paddedBigInt = leftPad(parsedBigInt, 40);
            return toChecksumAddress(paddedBigInt);
          }
          throw new Error("Iban is indirect and cannot be converted. Must be length of 34 or 35");
        };
        if (Iban.isIndirect(iban) || Iban.isDirect(iban)) {
          this._iban = iban;
        } else {
          throw new Error("Invalid IBAN was provided");
        }
      }
      /**
       * A static method that checks if an IBAN is Direct.
       * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.
       * Note: this is also available as a method at an Iban instance.
       * @param iban - an IBAN to be checked
       * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.
       *
       * @example
       * ```ts
       * web3.eth.Iban.isDirect("XE81ETHXREGGAVOFYORK");
       * > false
       * ```
       */
      static isDirect(iban) {
        return iban.length === 34 || iban.length === 35;
      }
      /**
       * An instance method that checks if iban number is Direct.
       * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.
       * Note: this is also available as a static method.
       * @param iban - an IBAN to be checked
       * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.isDirect();
       * > false
       * ```
       */
      isDirect() {
        return Iban.isDirect(this._iban);
      }
      /**
       * A static method that checks if an IBAN is Indirect.
       * It actually check the length of the provided variable and, only if it is 20, it returns true.
       * Note: this is also available as a method at an Iban instance.
       * @param iban - an IBAN to be checked
       * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.
       *
       * @example
       * ```ts
       * web3.eth.Iban.isIndirect("XE81ETHXREGGAVOFYORK");
       * > true
       * ```
       */
      static isIndirect(iban) {
        return iban.length === 20;
      }
      /**
       * check if iban number if indirect
       * It actually check the length of the provided variable and, only if it is 20, it returns true.
       * Note: this is also available as a static method.
       * @param iban - an IBAN to be checked
       * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.isIndirect();
       * > true
       * ```
       */
      isIndirect() {
        return Iban.isIndirect(this._iban);
      }
      /**
       * This method could be used to check if a given string is valid IBAN object.
       * Note: this is also available as a method at an Iban instance.
       *
       * @param iban - a string to be checked if it is in IBAN
       * @returns - true if it is valid IBAN
       *
       * @example
       * ```ts
       * web3.eth.Iban.isValid("XE81ETHXREGGAVOFYORK");
       * > true
       *
       * web3.eth.Iban.isValid("XE82ETHXREGGAVOFYORK");
       * > false // because the checksum is incorrect
       * ```
       */
      static isValid(iban) {
        return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(iban) && Iban._mod9710(Iban._iso13616Prepare(iban)) === 1;
      }
      /**
       * Should be called to check if the early provided IBAN is correct.
       * Note: this is also available as a static method.
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.isValid();
       * > true
       *
       * const iban = new web3.eth.Iban("XE82ETHXREGGAVOFYORK");
       * iban.isValid();
       * > false // because the checksum is incorrect
       * ```
       */
      isValid() {
        return Iban.isValid(this._iban);
      }
      /**
       * Convert the passed BBAN to an IBAN for this country specification.
       * Please note that <i>"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account"</i>.
       * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits
       *
       * @param bban - the BBAN to convert to IBAN
       * @returns an Iban class instance that holds the equivalent IBAN
       *
       * @example
       * ```ts
       * web3.eth.Iban.fromBban('ETHXREGGAVOFYORK');
       * > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
       * ```
       */
      static fromBban(bban) {
        const countryCode = "XE";
        const remainder = this._mod9710(this._iso13616Prepare(`${countryCode}00${bban}`));
        const checkDigit = `0${(98 - remainder).toString()}`.slice(-2);
        return new Iban(`${countryCode}${checkDigit}${bban}`);
      }
      /**
       * Should be used to create IBAN object for given institution and identifier
       *
       * @param options - an object holds the `institution` and the `identifier` which will be composed to create an `Iban` object from.
       * @returns an Iban class instance that holds the equivalent IBAN
       *
       * @example
       * ```ts
       * web3.eth.Iban.createIndirect({
       *     institution: "XREG",
       *     identifier: "GAVOFYORK"
       * });
       * > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
       * ```
       */
      static createIndirect(options) {
        return Iban.fromBban(`ETH${options.institution}${options.identifier}`);
      }
      /**
       * This method should be used to create iban object from an Ethereum address.
       *
       * @param address - an Ethereum address
       * @returns an Iban class instance that holds the equivalent IBAN
       *
       * @example
       * ```ts
       * web3.eth.Iban.fromAddress("0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8");
       * > Iban {_iban: "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"}
       * ```
       */
      static fromAddress(address) {
        if (!isAddress$1(address)) {
          throw new InvalidAddressError(address);
        }
        const num = BigInt(hexToNumber$1(address));
        const base36 = num.toString(36);
        const padded = leftPad(base36, 15);
        return Iban.fromBban(padded.toUpperCase());
      }
      /**
       * This method should be used to create IBAN address from an Ethereum address
       *
       * @param address - an Ethereum address
       * @return the equivalent IBAN address
       *
       * @example
       * ```ts
       * web3.eth.Iban.toIban("0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8");
       * > "XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS"
       * ```
       */
      static toIban(address) {
        return Iban.fromAddress(address).toString();
      }
      /**
       * Should be called to get client identifier within institution
       *
       * @return the client of the IBAN instance.
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.client();
       * > 'GAVOFYORK'
       * ```
       */
      client() {
        return this.isIndirect() ? this._iban.slice(11) : "";
      }
      /**
       * Returns the IBAN checksum of the early provided IBAN
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.checksum();
       * > "81"
       * ```
       *
       */
      checksum() {
        return this._iban.slice(2, 4);
      }
      /**
       * Returns institution identifier from the early provided  IBAN
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban("XE81ETHXREGGAVOFYORK");
       * iban.institution();
       * > 'XREG'
       * ```
       */
      institution() {
        return this.isIndirect() ? this._iban.slice(7, 11) : "";
      }
      /**
       * Simply returns the early provided IBAN
       *
       * @example
       * ```ts
       * const iban = new web3.eth.Iban('XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS');
       * iban.toString();
       * > 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS'
       * ```
       */
      toString() {
        return this._iban;
      }
    }
    Iban._iso13616Prepare = (iban) => {
      const A2 = "A".charCodeAt(0);
      const Z2 = "Z".charCodeAt(0);
      const upperIban = iban.toUpperCase();
      const modifiedIban = `${upperIban.slice(4)}${upperIban.slice(0, 4)}`;
      return modifiedIban.split("").map((n2) => {
        const code = n2.charCodeAt(0);
        if (code >= A2 && code <= Z2) {
          return code - A2 + 10;
        }
        return n2;
      }).join("");
    };
    Iban._parseInt = (str, base2) => [...str].reduce((acc, curr) => BigInt(parseInt(curr, base2)) + BigInt(base2) * acc, BigInt(0));
    Iban._mod9710 = (iban) => {
      let remainder = iban;
      let block;
      while (remainder.length > 2) {
        block = remainder.slice(0, 9);
        remainder = `${(parseInt(block, 10) % 97).toString()}${remainder.slice(block.length)}`;
      }
      return parseInt(remainder, 10) % 97;
    };
    Iban.toAddress = (iban) => {
      const ibanObject = new Iban(iban);
      return ibanObject.toAddress();
    };
    var __awaiter$t = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var _a;
    class Web3PromiEvent extends Web3EventEmitter {
      constructor(executor) {
        super();
        this[_a] = "Promise";
        this._promise = new Promise(executor);
      }
      then(onfulfilled, onrejected) {
        return __awaiter$t(this, void 0, void 0, function* () {
          return this._promise.then(onfulfilled, onrejected);
        });
      }
      catch(onrejected) {
        return __awaiter$t(this, void 0, void 0, function* () {
          return this._promise.catch(onrejected);
        });
      }
      finally(onfinally) {
        return __awaiter$t(this, void 0, void 0, function* () {
          return this._promise.finally(onfinally);
        });
      }
      on(eventName, fn) {
        super.on(eventName, fn);
        return this;
      }
      once(eventName, fn) {
        super.once(eventName, fn);
        return this;
      }
    }
    _a = Symbol.toStringTag;
    (function(global2, undefined$1) {
      if (global2.setImmediate) {
        return;
      }
      var nextHandle = 1;
      var tasksByHandle = {};
      var currentlyRunningATask = false;
      var doc = global2.document;
      var registerImmediate;
      function setImmediate2(callback) {
        if (typeof callback !== "function") {
          callback = new Function("" + callback);
        }
        var args = new Array(arguments.length - 1);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
        }
        var task = { callback, args };
        tasksByHandle[nextHandle] = task;
        registerImmediate(nextHandle);
        return nextHandle++;
      }
      function clearImmediate(handle) {
        delete tasksByHandle[handle];
      }
      function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
          case 0:
            callback();
            break;
          case 1:
            callback(args[0]);
            break;
          case 2:
            callback(args[0], args[1]);
            break;
          case 3:
            callback(args[0], args[1], args[2]);
            break;
          default:
            callback.apply(undefined$1, args);
            break;
        }
      }
      function runIfPresent(handle) {
        if (currentlyRunningATask) {
          setTimeout(runIfPresent, 0, handle);
        } else {
          var task = tasksByHandle[handle];
          if (task) {
            currentlyRunningATask = true;
            try {
              run(task);
            } finally {
              clearImmediate(handle);
              currentlyRunningATask = false;
            }
          }
        }
      }
      function installNextTickImplementation() {
        registerImmediate = function(handle) {
          process.nextTick(function() {
            runIfPresent(handle);
          });
        };
      }
      function canUsePostMessage() {
        if (global2.postMessage && !global2.importScripts) {
          var postMessageIsAsynchronous = true;
          var oldOnMessage = global2.onmessage;
          global2.onmessage = function() {
            postMessageIsAsynchronous = false;
          };
          global2.postMessage("", "*");
          global2.onmessage = oldOnMessage;
          return postMessageIsAsynchronous;
        }
      }
      function installPostMessageImplementation() {
        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
          if (event.source === global2 && typeof event.data === "string" && event.data.indexOf(messagePrefix) === 0) {
            runIfPresent(+event.data.slice(messagePrefix.length));
          }
        };
        if (global2.addEventListener) {
          global2.addEventListener("message", onGlobalMessage, false);
        } else {
          global2.attachEvent("onmessage", onGlobalMessage);
        }
        registerImmediate = function(handle) {
          global2.postMessage(messagePrefix + handle, "*");
        };
      }
      function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
          var handle = event.data;
          runIfPresent(handle);
        };
        registerImmediate = function(handle) {
          channel.port2.postMessage(handle);
        };
      }
      function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
          var script = doc.createElement("script");
          script.onreadystatechange = function() {
            runIfPresent(handle);
            script.onreadystatechange = null;
            html.removeChild(script);
            script = null;
          };
          html.appendChild(script);
        };
      }
      function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
          setTimeout(runIfPresent, 0, handle);
        };
      }
      var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global2);
      attachTo = attachTo && attachTo.setTimeout ? attachTo : global2;
      if ({}.toString.call(global2.process) === "[object process]") {
        installNextTickImplementation();
      } else if (canUsePostMessage()) {
        installPostMessageImplementation();
      } else if (global2.MessageChannel) {
        installMessageChannelImplementation();
      } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        installReadyStateChangeImplementation();
      } else {
        installSetTimeoutImplementation();
      }
      attachTo.setImmediate = setImmediate2;
      attachTo.clearImmediate = clearImmediate;
    })(typeof self === "undefined" ? typeof commonjsGlobal === "undefined" ? commonjsGlobal : commonjsGlobal : self);
    var __awaiter$s = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    function getProtocolVersion(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_protocolVersion",
          params: []
        });
      });
    }
    function getSyncing(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_syncing",
          params: []
        });
      });
    }
    function getCoinbase(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_coinbase",
          params: []
        });
      });
    }
    function getMining(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_mining",
          params: []
        });
      });
    }
    function getHashRate$1(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_hashrate",
          params: []
        });
      });
    }
    function getGasPrice$1(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_gasPrice",
          params: []
        });
      });
    }
    function getMaxPriorityFeePerGas$1(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_maxPriorityFeePerGas",
          params: []
        });
      });
    }
    function getAccounts$2(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_accounts",
          params: []
        });
      });
    }
    function getBlockNumber$1(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_blockNumber",
          params: []
        });
      });
    }
    function getBalance$1(requestManager, address, blockNumber) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["address", "blockNumberOrTag"], [address, blockNumber]);
        return requestManager.send({
          method: "eth_getBalance",
          params: [address, blockNumber]
        });
      });
    }
    function getStorageAt$1(requestManager, address, storageSlot, blockNumber) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["address", "hex", "blockNumberOrTag"], [address, storageSlot, blockNumber]);
        return requestManager.send({
          method: "eth_getStorageAt",
          params: [address, storageSlot, blockNumber]
        });
      });
    }
    function getTransactionCount$1(requestManager, address, blockNumber) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["address", "blockNumberOrTag"], [address, blockNumber]);
        return requestManager.send({
          method: "eth_getTransactionCount",
          params: [address, blockNumber]
        });
      });
    }
    function getBlockTransactionCountByHash(requestManager, blockHash) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["bytes32"], [blockHash]);
        return requestManager.send({
          method: "eth_getBlockTransactionCountByHash",
          params: [blockHash]
        });
      });
    }
    function getBlockTransactionCountByNumber(requestManager, blockNumber) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["blockNumberOrTag"], [blockNumber]);
        return requestManager.send({
          method: "eth_getBlockTransactionCountByNumber",
          params: [blockNumber]
        });
      });
    }
    function getUncleCountByBlockHash(requestManager, blockHash) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["bytes32"], [blockHash]);
        return requestManager.send({
          method: "eth_getUncleCountByBlockHash",
          params: [blockHash]
        });
      });
    }
    function getUncleCountByBlockNumber(requestManager, blockNumber) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["blockNumberOrTag"], [blockNumber]);
        return requestManager.send({
          method: "eth_getUncleCountByBlockNumber",
          params: [blockNumber]
        });
      });
    }
    function getCode$1(requestManager, address, blockNumber) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["address", "blockNumberOrTag"], [address, blockNumber]);
        return requestManager.send({
          method: "eth_getCode",
          params: [address, blockNumber]
        });
      });
    }
    function sign$3(requestManager, address, message) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["address", "hex"], [address, message]);
        return requestManager.send({
          method: "eth_sign",
          params: [address, message]
        });
      });
    }
    function signTransaction$3(requestManager, transaction) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_signTransaction",
          params: [transaction]
        });
      });
    }
    function sendTransaction$3(requestManager, transaction) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_sendTransaction",
          params: [transaction]
        });
      });
    }
    function sendRawTransaction(requestManager, transaction) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["hex"], [transaction]);
        return requestManager.send({
          method: "eth_sendRawTransaction",
          params: [transaction]
        });
      });
    }
    function call$1(requestManager, transaction, blockNumber) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["blockNumberOrTag"], [blockNumber]);
        return requestManager.send({
          method: "eth_call",
          params: [transaction, blockNumber]
        });
      });
    }
    function estimateGas$1(requestManager, transaction, blockNumber) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["blockNumberOrTag"], [blockNumber]);
        return requestManager.send({
          method: "eth_estimateGas",
          params: [transaction, blockNumber]
        });
      });
    }
    function getBlockByHash(requestManager, blockHash, hydrated) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["bytes32", "bool"], [blockHash, hydrated]);
        return requestManager.send({
          method: "eth_getBlockByHash",
          params: [blockHash, hydrated]
        });
      });
    }
    function getBlockByNumber(requestManager, blockNumber, hydrated) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["blockNumberOrTag", "bool"], [blockNumber, hydrated]);
        return requestManager.send({
          method: "eth_getBlockByNumber",
          params: [blockNumber, hydrated]
        });
      });
    }
    function getTransactionByHash(requestManager, transactionHash) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["bytes32"], [transactionHash]);
        return requestManager.send({
          method: "eth_getTransactionByHash",
          params: [transactionHash]
        });
      });
    }
    function getTransactionByBlockHashAndIndex(requestManager, blockHash, transactionIndex) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["bytes32", "hex"], [blockHash, transactionIndex]);
        return requestManager.send({
          method: "eth_getTransactionByBlockHashAndIndex",
          params: [blockHash, transactionIndex]
        });
      });
    }
    function getTransactionByBlockNumberAndIndex(requestManager, blockNumber, transactionIndex) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["blockNumberOrTag", "hex"], [blockNumber, transactionIndex]);
        return requestManager.send({
          method: "eth_getTransactionByBlockNumberAndIndex",
          params: [blockNumber, transactionIndex]
        });
      });
    }
    function getTransactionReceipt$1(requestManager, transactionHash) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["bytes32"], [transactionHash]);
        return requestManager.send({
          method: "eth_getTransactionReceipt",
          params: [transactionHash]
        });
      });
    }
    function getUncleByBlockHashAndIndex(requestManager, blockHash, uncleIndex) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["bytes32", "hex"], [blockHash, uncleIndex]);
        return requestManager.send({
          method: "eth_getUncleByBlockHashAndIndex",
          params: [blockHash, uncleIndex]
        });
      });
    }
    function getUncleByBlockNumberAndIndex(requestManager, blockNumber, uncleIndex) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["blockNumberOrTag", "hex"], [blockNumber, uncleIndex]);
        return requestManager.send({
          method: "eth_getUncleByBlockNumberAndIndex",
          params: [blockNumber, uncleIndex]
        });
      });
    }
    function getLogs$1(requestManager, filter) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["filter"], [filter]);
        return requestManager.send({
          method: "eth_getLogs",
          params: [filter]
        });
      });
    }
    function getWork(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_getWork",
          params: []
        });
      });
    }
    function submitWork(requestManager, nonce, hash2, digest) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["bytes8", "bytes32", "bytes32"], [nonce, hash2, digest]);
        return requestManager.send({
          method: "eth_submitWork",
          params: [nonce, hash2, digest]
        });
      });
    }
    function getFeeHistory$1(requestManager, blockCount, newestBlock, rewardPercentiles) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["hex", "blockNumberOrTag"], [blockCount, newestBlock]);
        for (const rewardPercentile of rewardPercentiles) {
          validator.validate(["number"], [rewardPercentile]);
        }
        return requestManager.send({
          method: "eth_feeHistory",
          params: [blockCount, newestBlock, rewardPercentiles]
        });
      });
    }
    function getPendingTransactions$1(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_pendingTransactions",
          params: []
        });
      });
    }
    function requestAccounts(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_requestAccounts",
          params: []
        });
      });
    }
    function getChainId$1(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "eth_chainId",
          params: []
        });
      });
    }
    function getProof$1(requestManager, address, storageKeys, blockNumber) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["address", "bytes32[]", "blockNumberOrTag"], [address, storageKeys, blockNumber]);
        return requestManager.send({
          method: "eth_getProof",
          params: [address, storageKeys, blockNumber]
        });
      });
    }
    function getNodeInfo(requestManager) {
      return __awaiter$s(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "web3_clientVersion",
          params: []
        });
      });
    }
    function createAccessList$1(requestManager, transaction, blockNumber) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["blockNumberOrTag"], [blockNumber]);
        return requestManager.send({
          method: "eth_createAccessList",
          params: [transaction, blockNumber]
        });
      });
    }
    function signTypedData$1(requestManager, address, typedData, useLegacy = false) {
      return __awaiter$s(this, void 0, void 0, function* () {
        validator.validate(["address"], [address]);
        return requestManager.send({
          method: `eth_signTypedData${useLegacy ? "" : "_v4"}`,
          params: [address, typedData]
        });
      });
    }
    var __awaiter$r = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    function getId$1(requestManager) {
      return __awaiter$r(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "net_version",
          params: []
        });
      });
    }
    function getPeerCount$1(requestManager) {
      return __awaiter$r(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "net_peerCount",
          params: []
        });
      });
    }
    function isListening$1(requestManager) {
      return __awaiter$r(this, void 0, void 0, function* () {
        return requestManager.send({
          method: "net_listening",
          params: []
        });
      });
    }
    var __awaiter$q = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const getAccounts$1 = (requestManager) => __awaiter$q(void 0, void 0, void 0, function* () {
      return requestManager.send({
        method: "personal_listAccounts",
        params: []
      });
    });
    const newAccount$1 = (requestManager, password) => __awaiter$q(void 0, void 0, void 0, function* () {
      return requestManager.send({
        method: "personal_newAccount",
        params: [password]
      });
    });
    const unlockAccount$1 = (requestManager, address, password, unlockDuration) => __awaiter$q(void 0, void 0, void 0, function* () {
      return requestManager.send({
        method: "personal_unlockAccount",
        params: [address, password, unlockDuration]
      });
    });
    const lockAccount$1 = (requestManager, address) => __awaiter$q(void 0, void 0, void 0, function* () {
      return requestManager.send({
        method: "personal_lockAccount",
        params: [address]
      });
    });
    const importRawKey$1 = (requestManager, keyData, passphrase) => __awaiter$q(void 0, void 0, void 0, function* () {
      return requestManager.send({
        method: "personal_importRawKey",
        params: [keyData, passphrase]
      });
    });
    const sendTransaction$2 = (requestManager, tx, passphrase) => __awaiter$q(void 0, void 0, void 0, function* () {
      return requestManager.send({
        method: "personal_sendTransaction",
        params: [tx, passphrase]
      });
    });
    const signTransaction$2 = (requestManager, tx, passphrase) => __awaiter$q(void 0, void 0, void 0, function* () {
      return requestManager.send({
        method: "personal_signTransaction",
        params: [tx, passphrase]
      });
    });
    const sign$2 = (requestManager, data, address, passphrase) => __awaiter$q(void 0, void 0, void 0, function* () {
      return requestManager.send({
        method: "personal_sign",
        params: [data, address, passphrase]
      });
    });
    const ecRecover$1 = (requestManager, signedData, signature) => __awaiter$q(void 0, void 0, void 0, function* () {
      return requestManager.send({
        method: "personal_ecRecover",
        params: [signedData, signature]
      });
    });
    const transactionType0x0Schema = {
      type: "object",
      properties: {
        accessList: {
          type: "null"
        },
        maxFeePerGas: {
          type: "null"
        },
        maxPriorityFeePerGas: {
          type: "null"
        }
      }
    };
    const transactionType0x1Schema = {
      type: "object",
      properties: {
        maxFeePerGas: {
          type: "null"
        },
        maxPriorityFeePerGas: {
          type: "null"
        }
      }
    };
    const transactionType0x2Schema = {
      type: "object",
      properties: {
        gasPrice: {
          type: "null"
        }
      }
    };
    const validateTxTypeAndHandleErrors = (txSchema, tx, txType) => {
      try {
        validator.validateJSONSchema(txSchema, tx);
      } catch (error) {
        if (error instanceof Web3ValidatorError)
          throw new InvalidPropertiesForTransactionTypeError(error.errors, txType);
        throw error;
      }
    };
    const defaultTransactionTypeParser = (transaction) => {
      var _a2, _b;
      const tx = transaction;
      if (!isNullish$1(tx.type)) {
        let txSchema;
        switch (tx.type) {
          case "0x0":
            txSchema = transactionType0x0Schema;
            break;
          case "0x1":
            txSchema = transactionType0x1Schema;
            break;
          case "0x2":
            txSchema = transactionType0x2Schema;
            break;
          default:
            return format({ format: "uint" }, tx.type, ETH_DATA_FORMAT);
        }
        validateTxTypeAndHandleErrors(txSchema, tx, tx.type);
        return format({ format: "uint" }, tx.type, ETH_DATA_FORMAT);
      }
      if (!isNullish$1(tx.maxFeePerGas) || !isNullish$1(tx.maxPriorityFeePerGas)) {
        validateTxTypeAndHandleErrors(transactionType0x2Schema, tx, "0x2");
        return "0x2";
      }
      if (!isNullish$1(tx.accessList)) {
        validateTxTypeAndHandleErrors(transactionType0x1Schema, tx, "0x1");
        return "0x1";
      }
      const givenHardfork = (_a2 = tx.hardfork) !== null && _a2 !== void 0 ? _a2 : (_b = tx.common) === null || _b === void 0 ? void 0 : _b.hardfork;
      if (!isNullish$1(givenHardfork)) {
        const hardforkIndex = Object.keys(HardforksOrdered).indexOf(givenHardfork);
        if (hardforkIndex >= Object.keys(HardforksOrdered).indexOf("london"))
          return !isNullish$1(tx.gasPrice) ? "0x0" : "0x2";
        if (hardforkIndex === Object.keys(HardforksOrdered).indexOf("berlin"))
          return "0x0";
      }
      if (!isNullish$1(tx.gasPrice)) {
        validateTxTypeAndHandleErrors(transactionType0x0Schema, tx, "0x0");
        return "0x0";
      }
      return void 0;
    };
    const detectTransactionType = (transaction, web3Context) => {
      var _a2;
      return ((_a2 = web3Context === null || web3Context === void 0 ? void 0 : web3Context.transactionTypeParser) !== null && _a2 !== void 0 ? _a2 : defaultTransactionTypeParser)(transaction);
    };
    const detectRawTransactionType = (transaction) => transaction[0] > 127 ? "0x0" : toHex(transaction[0]);
    const accessListItemSchema = {
      type: "object",
      properties: {
        address: {
          format: "address"
        },
        storageKeys: {
          type: "array",
          items: {
            format: "bytes32"
          }
        }
      }
    };
    const accessListSchema = {
      type: "array",
      items: Object.assign({}, accessListItemSchema)
    };
    const accessListResultSchema = {
      type: "object",
      properties: {
        accessList: Object.assign({}, accessListSchema),
        gasUsed: {
          type: "string"
        }
      }
    };
    const chainSchema = {
      type: "string",
      enum: ["goerli", "kovan", "mainnet", "rinkeby", "ropsten", "sepolia"]
    };
    const hardforkSchema = {
      type: "string",
      enum: [
        "arrowGlacier",
        "berlin",
        "byzantium",
        "chainstart",
        "constantinople",
        "dao",
        "homestead",
        "istanbul",
        "london",
        "merge",
        "muirGlacier",
        "petersburg",
        "shanghai",
        "spuriousDragon",
        "tangerineWhistle"
      ]
    };
    const customChainSchema = {
      type: "object",
      properties: {
        name: {
          format: "string"
        },
        networkId: {
          format: "uint"
        },
        chainId: {
          format: "uint"
        }
      }
    };
    const transactionSchema = {
      type: "object",
      properties: {
        from: {
          format: "address"
        },
        to: {
          oneOf: [{ format: "address" }, { type: "null" }]
        },
        value: {
          format: "uint"
        },
        gas: {
          format: "uint"
        },
        gasPrice: {
          format: "uint"
        },
        effectiveGasPrice: {
          format: "uint"
        },
        type: {
          format: "uint"
        },
        maxFeePerGas: {
          format: "uint"
        },
        maxPriorityFeePerGas: {
          format: "uint"
        },
        accessList: Object.assign({}, accessListSchema),
        data: {
          format: "bytes"
        },
        input: {
          format: "bytes"
        },
        nonce: {
          format: "uint"
        },
        chain: Object.assign({}, chainSchema),
        hardfork: Object.assign({}, hardforkSchema),
        chainId: {
          format: "uint"
        },
        networkId: {
          format: "uint"
        },
        common: {
          type: "object",
          properties: {
            customChain: Object.assign({}, customChainSchema),
            baseChain: Object.assign({}, chainSchema),
            hardfork: Object.assign({}, hardforkSchema)
          }
        },
        gasLimit: {
          format: "uint"
        },
        v: {
          format: "uint"
        },
        r: {
          format: "bytes32"
        },
        s: {
          format: "bytes32"
        }
      }
    };
    const transactionInfoSchema = {
      type: "object",
      properties: Object.assign(Object.assign({}, transactionSchema.properties), { blockHash: {
        format: "bytes32"
      }, blockNumber: {
        format: "uint"
      }, hash: {
        format: "bytes32"
      }, transactionIndex: {
        format: "uint"
      }, from: {
        format: "address"
      }, to: {
        oneOf: [{ format: "address" }, { type: "null" }]
      }, value: {
        format: "uint"
      }, gas: {
        format: "uint"
      }, gasPrice: {
        format: "uint"
      }, effectiveGasPrice: {
        format: "uint"
      }, type: {
        format: "uint"
      }, maxFeePerGas: {
        format: "uint"
      }, maxPriorityFeePerGas: {
        format: "uint"
      }, accessList: Object.assign({}, accessListSchema), data: {
        format: "bytes"
      }, input: {
        format: "bytes"
      }, nonce: {
        format: "uint"
      }, gasLimit: {
        format: "uint"
      }, v: {
        format: "uint"
      }, r: {
        format: "bytes32"
      }, s: {
        format: "bytes32"
      } })
    };
    const withdrawalsSchema = {
      type: "object",
      properties: {
        index: {
          format: "uint"
        },
        validatorIndex: {
          format: "uint"
        },
        address: {
          format: "address"
        },
        amount: {
          format: "uint"
        }
      }
    };
    const blockSchema = {
      type: "object",
      properties: {
        baseFeePerGas: {
          format: "uint"
        },
        blobGasUsed: {
          format: "uint"
        },
        difficulty: {
          format: "uint"
        },
        excessBlobGas: {
          format: "uint"
        },
        extraData: {
          format: "bytes"
        },
        gasLimit: {
          format: "uint"
        },
        gasUsed: {
          format: "uint"
        },
        hash: {
          format: "bytes32"
        },
        logsBloom: {
          format: "bytes256"
        },
        miner: {
          format: "bytes"
        },
        mixHash: {
          format: "bytes32"
        },
        nonce: {
          format: "uint"
        },
        number: {
          format: "uint"
        },
        parentBeaconBlockRoot: {
          format: "bytes32"
        },
        parentHash: {
          format: "bytes32"
        },
        receiptsRoot: {
          format: "bytes32"
        },
        sha3Uncles: {
          format: "bytes32"
        },
        size: {
          format: "uint"
        },
        stateRoot: {
          format: "bytes32"
        },
        timestamp: {
          format: "uint"
        },
        totalDifficulty: {
          format: "uint"
        },
        transactions: {
          oneOf: [
            {
              type: "array",
              items: Object.assign({}, transactionInfoSchema)
            },
            {
              type: "array",
              items: {
                format: "bytes32"
              }
            }
          ]
        },
        transactionsRoot: {
          format: "bytes32"
        },
        uncles: {
          type: "array",
          items: {
            format: "bytes32"
          }
        },
        withdrawals: {
          type: "array",
          items: Object.assign({}, withdrawalsSchema)
        },
        withdrawalsRoot: {
          format: "bytes32"
        }
      }
    };
    const blockHeaderSchema = {
      type: "object",
      properties: {
        author: {
          format: "bytes32"
        },
        excessDataGas: {
          format: "uint"
        },
        baseFeePerGas: {
          format: "uint"
        },
        blobGasUsed: {
          format: "uint"
        },
        difficulty: {
          format: "uint"
        },
        excessBlobGas: {
          format: "uint"
        },
        extraData: {
          format: "bytes"
        },
        gasLimit: {
          format: "uint"
        },
        gasUsed: {
          format: "uint"
        },
        hash: {
          format: "bytes32"
        },
        logsBloom: {
          format: "bytes256"
        },
        miner: {
          format: "bytes"
        },
        mixHash: {
          format: "bytes32"
        },
        nonce: {
          format: "uint"
        },
        number: {
          format: "uint"
        },
        parentBeaconBlockRoot: {
          format: "bytes32"
        },
        parentHash: {
          format: "bytes32"
        },
        receiptsRoot: {
          format: "bytes32"
        },
        sha3Uncles: {
          format: "bytes32"
        },
        size: {
          format: "uint"
        },
        stateRoot: {
          format: "bytes32"
        },
        timestamp: {
          format: "uint"
        },
        totalDifficulty: {
          format: "uint"
        },
        transactions: {
          type: "array",
          items: {
            format: "bytes32"
          }
        },
        transactionsRoot: {
          format: "bytes32"
        },
        uncles: {
          type: "array",
          items: {
            format: "bytes32"
          }
        },
        withdrawals: {
          type: "array",
          items: Object.assign({}, withdrawalsSchema)
        },
        withdrawalsRoot: {
          format: "bytes32"
        }
      }
    };
    const logSchema = {
      type: "object",
      properties: {
        removed: {
          format: "bool"
        },
        logIndex: {
          format: "uint"
        },
        transactionIndex: {
          format: "uint"
        },
        transactionHash: {
          format: "bytes32"
        },
        blockHash: {
          format: "bytes32"
        },
        blockNumber: {
          format: "uint"
        },
        address: {
          format: "address"
        },
        data: {
          format: "bytes"
        },
        topics: {
          type: "array",
          items: {
            format: "bytes32"
          }
        }
      }
    };
    const syncSchema = {
      type: "object",
      properties: {
        startingBlock: {
          format: "string"
        },
        currentBlock: {
          format: "string"
        },
        highestBlock: {
          format: "string"
        },
        knownStates: {
          format: "string"
        },
        pulledStates: {
          format: "string"
        }
      }
    };
    const transactionReceiptSchema = {
      type: "object",
      properties: {
        transactionHash: {
          format: "bytes32"
        },
        transactionIndex: {
          format: "uint"
        },
        blockHash: {
          format: "bytes32"
        },
        blockNumber: {
          format: "uint"
        },
        from: {
          format: "address"
        },
        to: {
          format: "address"
        },
        cumulativeGasUsed: {
          format: "uint"
        },
        gasUsed: {
          format: "uint"
        },
        effectiveGasPrice: {
          format: "uint"
        },
        contractAddress: {
          format: "address"
        },
        logs: {
          type: "array",
          items: Object.assign({}, logSchema)
        },
        logsBloom: {
          format: "bytes"
        },
        root: {
          format: "bytes"
        },
        status: {
          format: "uint"
        },
        type: {
          format: "uint"
        }
      }
    };
    const SignatureObjectSchema = {
      type: "object",
      properties: {
        messageHash: {
          format: "bytes"
        },
        r: {
          format: "bytes32"
        },
        s: {
          format: "bytes32"
        },
        v: {
          format: "bytes"
        },
        message: {
          format: "bytes"
        },
        signature: {
          format: "bytes"
        }
      }
    };
    const feeHistorySchema = {
      type: "object",
      properties: {
        oldestBlock: {
          format: "uint"
        },
        baseFeePerGas: {
          type: "array",
          items: {
            format: "uint"
          }
        },
        reward: {
          type: "array",
          items: {
            type: "array",
            items: {
              format: "uint"
            }
          }
        },
        gasUsedRatio: {
          type: "array",
          items: {
            type: "number"
          }
        }
      }
    };
    const storageProofSchema = {
      type: "object",
      properties: {
        key: {
          format: "bytes32"
        },
        value: {
          format: "uint"
        },
        proof: {
          type: "array",
          items: {
            format: "bytes32"
          }
        }
      }
    };
    const accountSchema = {
      type: "object",
      properties: {
        balance: {
          format: "uint"
        },
        codeHash: {
          format: "bytes32"
        },
        nonce: {
          format: "uint"
        },
        storageHash: {
          format: "bytes32"
        },
        accountProof: {
          type: "array",
          items: {
            format: "bytes32"
          }
        },
        storageProof: {
          type: "array",
          items: Object.assign({}, storageProofSchema)
        }
      }
    };
    function formatTransaction(transaction, returnFormat = DEFAULT_RETURN_FORMAT, options = {
      transactionSchema: transactionInfoSchema,
      fillInputAndData: false
    }) {
      var _a2, _b;
      let formattedTransaction = mergeDeep({}, transaction);
      if (!isNullish$1(transaction === null || transaction === void 0 ? void 0 : transaction.common)) {
        formattedTransaction.common = Object.assign({}, transaction.common);
        if (!isNullish$1((_a2 = transaction.common) === null || _a2 === void 0 ? void 0 : _a2.customChain))
          formattedTransaction.common.customChain = Object.assign({}, transaction.common.customChain);
      }
      formattedTransaction = format((_b = options.transactionSchema) !== null && _b !== void 0 ? _b : transactionInfoSchema, formattedTransaction, returnFormat);
      if (!isNullish$1(formattedTransaction.data) && !isNullish$1(formattedTransaction.input) && // Converting toHex is accounting for data and input being Uint8Arrays
      // since comparing Uint8Array is not as straightforward as comparing strings
      toHex(formattedTransaction.data) !== toHex(formattedTransaction.input))
        throw new TransactionDataAndInputError({
          data: bytesToHex$2(formattedTransaction.data),
          input: bytesToHex$2(formattedTransaction.input)
        });
      if (options.fillInputAndData) {
        if (!isNullish$1(formattedTransaction.data)) {
          formattedTransaction.input = formattedTransaction.data;
        } else if (!isNullish$1(formattedTransaction.input)) {
          formattedTransaction.data = formattedTransaction.input;
        }
      }
      if (!isNullish$1(formattedTransaction.gasLimit)) {
        formattedTransaction.gas = formattedTransaction.gasLimit;
        delete formattedTransaction.gasLimit;
      }
      return formattedTransaction;
    }
    function decodeSignedTransaction(encodedSignedTransaction, returnFormat, options = {
      fillInputAndData: false
    }) {
      return {
        raw: format({ format: "bytes" }, encodedSignedTransaction, returnFormat),
        tx: formatTransaction(Object.assign(Object.assign({}, TransactionFactory.fromSerializedData(hexToBytes$2(encodedSignedTransaction)).toJSON()), { hash: bytesToHex$2(keccak256Wrapper(hexToBytes$2(encodedSignedTransaction))), type: detectRawTransactionType(hexToBytes$2(encodedSignedTransaction)) }), returnFormat, {
          fillInputAndData: options.fillInputAndData,
          transactionSchema: options.transactionSchema
        })
      };
    }
    var __awaiter$p = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    function getId(web3Context, returnFormat) {
      return __awaiter$p(this, void 0, void 0, function* () {
        const response = yield getId$1(web3Context.requestManager);
        return format({ format: "uint" }, response, returnFormat);
      });
    }
    function getPeerCount(web3Context, returnFormat) {
      return __awaiter$p(this, void 0, void 0, function* () {
        const response = yield getPeerCount$1(web3Context.requestManager);
        return format({ format: "uint" }, response, returnFormat);
      });
    }
    const isListening = (web3Context) => __awaiter$p(void 0, void 0, void 0, function* () {
      return isListening$1(web3Context.requestManager);
    });
    var __awaiter$o = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class Net extends Web3Context {
      /**
       * Gets the current network ID
       *
       * @param returnFormat - Return format
       * @returns A Promise of the network ID.
       * @example
       * ```ts
       * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
       * await net.getId();
       * > 1
       * ```
       */
      getId(returnFormat = this.defaultReturnFormat) {
        return __awaiter$o(this, void 0, void 0, function* () {
          return getId(this, returnFormat);
        });
      }
      /**
       * Get the number of peers connected to.
       *
       * @param returnFormat - Return format
       * @returns A promise of the number of the peers connected to.
       * @example
       * ```ts
       * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
       * await net.getPeerCount();
       * > 0
       * ```
       */
      getPeerCount(returnFormat = this.defaultReturnFormat) {
        return __awaiter$o(this, void 0, void 0, function* () {
          return getPeerCount(this, returnFormat);
        });
      }
      /**
       * Check if the node is listening for peers
       *
       * @returns A promise of a boolean if the node is listening to peers
       * @example
       * ```ts
       * const net = new Net(Net.givenProvider || 'ws://some.local-or-remote.node:8546');
       * await net.isListening();
       * > true
       * ```
       */
      isListening() {
        return __awaiter$o(this, void 0, void 0, function* () {
          return isListening(this);
        });
      }
    }
    const ALL_EVENTS = "ALLEVENTS";
    const ALL_EVENTS_ABI = {
      name: ALL_EVENTS,
      signature: "",
      type: "event",
      inputs: []
    };
    const NUMBER_DATA_FORMAT = { bytes: FMT_BYTES.HEX, number: FMT_NUMBER.NUMBER };
    var __awaiter$n = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    function getEip1559GasPricing(transaction, web3Context, returnFormat) {
      var _a2, _b, _c, _d;
      return __awaiter$n(this, void 0, void 0, function* () {
        const block = yield getBlock(web3Context, web3Context.defaultBlock, false, ETH_DATA_FORMAT);
        if (isNullish$1(block.baseFeePerGas))
          throw new Eip1559NotSupportedError();
        let gasPrice;
        if (isNullish$1(transaction.gasPrice) && BigInt(block.baseFeePerGas) === BigInt(0)) {
          gasPrice = yield getGasPrice(web3Context, returnFormat);
        }
        if (!isNullish$1(transaction.gasPrice) || !isNullish$1(gasPrice)) {
          const convertedTransactionGasPrice = format({ format: "uint" }, (_a2 = transaction.gasPrice) !== null && _a2 !== void 0 ? _a2 : gasPrice, returnFormat);
          return {
            maxPriorityFeePerGas: convertedTransactionGasPrice,
            maxFeePerGas: convertedTransactionGasPrice
          };
        }
        return {
          maxPriorityFeePerGas: format({ format: "uint" }, (_b = transaction.maxPriorityFeePerGas) !== null && _b !== void 0 ? _b : web3Context.defaultMaxPriorityFeePerGas, returnFormat),
          maxFeePerGas: format({ format: "uint" }, (_c = transaction.maxFeePerGas) !== null && _c !== void 0 ? _c : BigInt(block.baseFeePerGas) * BigInt(2) + BigInt((_d = transaction.maxPriorityFeePerGas) !== null && _d !== void 0 ? _d : web3Context.defaultMaxPriorityFeePerGas), returnFormat)
        };
      });
    }
    function getTransactionGasPricing(transaction, web3Context, returnFormat) {
      return __awaiter$n(this, void 0, void 0, function* () {
        const transactionType = getTransactionType(transaction, web3Context);
        if (!isNullish$1(transactionType)) {
          if (transactionType.startsWith("-"))
            throw new UnsupportedTransactionTypeError(transactionType);
          if (Number(transactionType) < 0 || Number(transactionType) > 127)
            throw new UnsupportedTransactionTypeError(transactionType);
          if (isNullish$1(transaction.gasPrice) && (transactionType === "0x0" || transactionType === "0x1"))
            return {
              gasPrice: yield getGasPrice(web3Context, returnFormat),
              maxPriorityFeePerGas: void 0,
              maxFeePerGas: void 0
            };
          if (transactionType === "0x2") {
            return Object.assign({ gasPrice: void 0 }, yield getEip1559GasPricing(transaction, web3Context, returnFormat));
          }
        }
        return void 0;
      });
    }
    var __awaiter$m = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const getTransactionFromOrToAttr = (attr, web3Context, transaction, privateKey) => {
      if (transaction !== void 0 && attr in transaction && transaction[attr] !== void 0) {
        if (typeof transaction[attr] === "string" && isAddress$1(transaction[attr])) {
          return transaction[attr];
        }
        if (!isHexStrict$1(transaction[attr]) && isNumber(transaction[attr])) {
          if (web3Context.wallet) {
            const account = web3Context.wallet.get(format({ format: "uint" }, transaction[attr], NUMBER_DATA_FORMAT));
            if (!isNullish$1(account)) {
              return account.address;
            }
            throw new LocalWalletNotAvailableError();
          }
          throw new LocalWalletNotAvailableError();
        } else {
          throw attr === "from" ? new InvalidTransactionWithSender(transaction.from) : (
            // eslint-disable-next-line @typescript-eslint/no-unsafe-call
            new InvalidTransactionWithReceiver(transaction.to)
          );
        }
      }
      if (attr === "from") {
        if (!isNullish$1(privateKey))
          return privateKeyToAddress(privateKey);
        if (!isNullish$1(web3Context.defaultAccount))
          return web3Context.defaultAccount;
      }
      return void 0;
    };
    const getTransactionNonce = (web3Context, address, returnFormat = web3Context.defaultReturnFormat) => __awaiter$m(void 0, void 0, void 0, function* () {
      if (isNullish$1(address)) {
        throw new UnableToPopulateNonceError();
      }
      return getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);
    });
    const getTransactionType = (transaction, web3Context) => {
      const inferredType = detectTransactionType(transaction, web3Context);
      if (!isNullish$1(inferredType))
        return inferredType;
      if (!isNullish$1(web3Context.defaultTransactionType))
        return format({ format: "uint" }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);
      return void 0;
    };
    function defaultTransactionBuilder(options) {
      var _a2, _b;
      return __awaiter$m(this, void 0, void 0, function* () {
        let populatedTransaction = format(transactionSchema, options.transaction, options.web3Context.defaultReturnFormat);
        if (isNullish$1(populatedTransaction.from)) {
          populatedTransaction.from = getTransactionFromOrToAttr("from", options.web3Context, void 0, options.privateKey);
        }
        if (isNullish$1(populatedTransaction.nonce)) {
          populatedTransaction.nonce = yield getTransactionNonce(options.web3Context, populatedTransaction.from, ETH_DATA_FORMAT);
        }
        if (isNullish$1(populatedTransaction.value)) {
          populatedTransaction.value = "0x0";
        }
        if (!isNullish$1(populatedTransaction.data)) {
          if (!isNullish$1(populatedTransaction.input) && populatedTransaction.data !== populatedTransaction.input)
            throw new TransactionDataAndInputError({
              data: bytesToHex$2(populatedTransaction.data),
              input: bytesToHex$2(populatedTransaction.input)
            });
          if (!populatedTransaction.data.startsWith("0x"))
            populatedTransaction.data = `0x${populatedTransaction.data}`;
        } else if (!isNullish$1(populatedTransaction.input)) {
          if (!populatedTransaction.input.startsWith("0x"))
            populatedTransaction.input = `0x${populatedTransaction.input}`;
        } else {
          populatedTransaction.input = "0x";
        }
        if (isNullish$1(populatedTransaction.common)) {
          if (options.web3Context.defaultCommon) {
            const common = options.web3Context.defaultCommon;
            const chainId = common.customChain.chainId;
            const networkId = common.customChain.networkId;
            const name2 = common.customChain.name;
            populatedTransaction.common = Object.assign(Object.assign({}, common), { customChain: { chainId, networkId, name: name2 } });
          }
          if (isNullish$1(populatedTransaction.chain)) {
            populatedTransaction.chain = options.web3Context.defaultChain;
          }
          if (isNullish$1(populatedTransaction.hardfork)) {
            populatedTransaction.hardfork = options.web3Context.defaultHardfork;
          }
        }
        if (isNullish$1(populatedTransaction.chainId) && isNullish$1((_a2 = populatedTransaction.common) === null || _a2 === void 0 ? void 0 : _a2.customChain.chainId)) {
          populatedTransaction.chainId = yield getChainId(options.web3Context, ETH_DATA_FORMAT);
        }
        if (isNullish$1(populatedTransaction.networkId)) {
          populatedTransaction.networkId = (_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0 ? _b : yield getId(options.web3Context, ETH_DATA_FORMAT);
        }
        if (isNullish$1(populatedTransaction.gasLimit) && !isNullish$1(populatedTransaction.gas)) {
          populatedTransaction.gasLimit = populatedTransaction.gas;
        }
        populatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);
        if (isNullish$1(populatedTransaction.accessList) && (populatedTransaction.type === "0x1" || populatedTransaction.type === "0x2")) {
          populatedTransaction.accessList = [];
        }
        if (options.fillGasPrice)
          populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), yield getTransactionGasPricing(populatedTransaction, options.web3Context, ETH_DATA_FORMAT));
        if (isNullish$1(populatedTransaction.gas) && isNullish$1(populatedTransaction.gasLimit) && options.fillGasLimit) {
          const fillGasLimit = yield estimateGas(options.web3Context, populatedTransaction, "latest", ETH_DATA_FORMAT);
          populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), { gas: format({ format: "uint" }, fillGasLimit, ETH_DATA_FORMAT) });
        }
        return populatedTransaction;
      });
    }
    const transactionBuilder = (options) => __awaiter$m(void 0, void 0, void 0, function* () {
      var _a2;
      return ((_a2 = options.web3Context.transactionBuilder) !== null && _a2 !== void 0 ? _a2 : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), { transaction: options.transaction }));
    });
    var __awaiter$l = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    function resolveByPolling(web3Context, starterBlockNumber, transactionHash) {
      const pollingInterval = web3Context.transactionPollingInterval;
      const [intervalId, promiseToError] = rejectIfConditionAtInterval(() => __awaiter$l(this, void 0, void 0, function* () {
        let lastBlockNumber;
        try {
          lastBlockNumber = yield getBlockNumber(web3Context, NUMBER_DATA_FORMAT);
        } catch (error) {
          console.warn("An error happen while trying to get the block number", error);
          return void 0;
        }
        const numberOfBlocks = lastBlockNumber - starterBlockNumber;
        if (numberOfBlocks >= web3Context.transactionBlockTimeout) {
          return new TransactionBlockTimeoutError({
            starterBlockNumber,
            numberOfBlocks,
            transactionHash
          });
        }
        return void 0;
      }), pollingInterval);
      const clean = () => {
        clearInterval(intervalId);
      };
      return [promiseToError, { clean }];
    }
    function resolveBySubscription(web3Context, starterBlockNumber, transactionHash) {
      var _a2;
      return __awaiter$l(this, void 0, void 0, function* () {
        let needToWatchLater = true;
        let subscription;
        let resourceCleaner;
        function revertToPolling(reject, previousError) {
          if (previousError) {
            console.warn("error happened at subscription. So revert to polling...", previousError);
          }
          resourceCleaner.clean();
          needToWatchLater = false;
          const [promiseToError2, newResourceCleaner] = resolveByPolling(web3Context, starterBlockNumber, transactionHash);
          resourceCleaner.clean = newResourceCleaner.clean;
          promiseToError2.catch((error) => reject(error));
        }
        try {
          subscription = yield (_a2 = web3Context.subscriptionManager) === null || _a2 === void 0 ? void 0 : _a2.subscribe("newHeads");
          resourceCleaner = {
            clean: () => {
              var _a3;
              if (subscription.id) {
                (_a3 = web3Context.subscriptionManager) === null || _a3 === void 0 ? void 0 : _a3.removeSubscription(subscription).then(() => {
                }).catch(() => {
                });
              }
            }
          };
        } catch (error) {
          return resolveByPolling(web3Context, starterBlockNumber, transactionHash);
        }
        const promiseToError = new Promise((_, reject) => {
          try {
            subscription.on("data", (lastBlockHeader) => {
              needToWatchLater = false;
              if (!(lastBlockHeader === null || lastBlockHeader === void 0 ? void 0 : lastBlockHeader.number)) {
                return;
              }
              const numberOfBlocks = Number(BigInt(lastBlockHeader.number) - BigInt(starterBlockNumber));
              if (numberOfBlocks >= web3Context.transactionBlockTimeout) {
                reject(new TransactionBlockTimeoutError({
                  starterBlockNumber,
                  numberOfBlocks,
                  transactionHash
                }));
              }
            });
            subscription.on("error", (error) => {
              revertToPolling(reject, error);
            });
          } catch (error) {
            revertToPolling(reject, error);
          }
          setTimeout(() => {
            if (needToWatchLater) {
              revertToPolling(reject);
            }
          }, web3Context.blockHeaderTimeout * 1e3);
        });
        return [promiseToError, resourceCleaner];
      });
    }
    function rejectIfBlockTimeout(web3Context, transactionHash) {
      var _a2, _b;
      return __awaiter$l(this, void 0, void 0, function* () {
        const { provider } = web3Context.requestManager;
        let callingRes;
        const starterBlockNumber = yield getBlockNumber(web3Context, NUMBER_DATA_FORMAT);
        if (((_b = (_a2 = provider).supportsSubscriptions) === null || _b === void 0 ? void 0 : _b.call(_a2)) && web3Context.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout) {
          callingRes = yield resolveBySubscription(web3Context, starterBlockNumber, transactionHash);
        } else {
          callingRes = resolveByPolling(web3Context, starterBlockNumber, transactionHash);
        }
        return callingRes;
      });
    }
    var __awaiter$k = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    function trySendTransaction(web3Context, sendTransactionFunc, transactionHash) {
      return __awaiter$k(this, void 0, void 0, function* () {
        const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionSendTimeout, new TransactionSendTimeoutError({
          numberOfSeconds: web3Context.transactionSendTimeout / 1e3,
          transactionHash
        }));
        const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);
        try {
          return yield Promise.race([
            sendTransactionFunc(),
            rejectOnTimeout,
            rejectOnBlockTimeout
            // this will throw an error on Transaction Block Timeout
          ]);
        } finally {
          clearTimeout(timeoutId);
          blockTimeoutResourceCleaner.clean();
        }
      });
    }
    var __awaiter$j = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    function waitForTransactionReceipt(web3Context, transactionHash, returnFormat, customGetTransactionReceipt) {
      var _a2;
      return __awaiter$j(this, void 0, void 0, function* () {
        const pollingInterval = (_a2 = web3Context.transactionReceiptPollingInterval) !== null && _a2 !== void 0 ? _a2 : web3Context.transactionPollingInterval;
        const [awaitableTransactionReceipt, IntervalId] = pollTillDefinedAndReturnIntervalId(() => __awaiter$j(this, void 0, void 0, function* () {
          try {
            return (customGetTransactionReceipt !== null && customGetTransactionReceipt !== void 0 ? customGetTransactionReceipt : getTransactionReceipt)(web3Context, transactionHash, returnFormat);
          } catch (error) {
            console.warn("An error happen while trying to get the transaction receipt", error);
            return void 0;
          }
        }), pollingInterval);
        const [timeoutId, rejectOnTimeout] = rejectIfTimeout(web3Context.transactionPollingTimeout, new TransactionPollingTimeoutError({
          numberOfSeconds: web3Context.transactionPollingTimeout / 1e3,
          transactionHash
        }));
        const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = yield rejectIfBlockTimeout(web3Context, transactionHash);
        try {
          return yield Promise.race([
            awaitableTransactionReceipt,
            rejectOnTimeout,
            rejectOnBlockTimeout
            // this will throw an error on Transaction Block Timeout
          ]);
        } finally {
          if (timeoutId)
            clearTimeout(timeoutId);
          if (IntervalId)
            clearInterval(IntervalId);
          blockTimeoutResourceCleaner.clean();
        }
      });
    }
    var __awaiter$i = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const watchTransactionByPolling = ({ web3Context, transactionReceipt, transactionPromiEvent, customTransactionReceiptSchema, returnFormat }) => {
      var _a2;
      let confirmations = 1;
      const intervalId = setInterval(() => {
        (() => __awaiter$i(void 0, void 0, void 0, function* () {
          if (confirmations >= web3Context.transactionConfirmationBlocks) {
            clearInterval(intervalId);
            return;
          }
          const nextBlock = yield getBlockByNumber(web3Context.requestManager, numberToHex$1(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)), false);
          if (nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.hash) {
            confirmations += 1;
            transactionPromiEvent.emit("confirmation", {
              confirmations: format({ format: "uint" }, confirmations, returnFormat),
              receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),
              latestBlockHash: format({ format: "bytes32" }, nextBlock.hash, returnFormat)
            });
          }
        }))();
      }, (_a2 = web3Context.transactionReceiptPollingInterval) !== null && _a2 !== void 0 ? _a2 : web3Context.transactionPollingInterval);
    };
    var __awaiter$h = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const watchTransactionBySubscription = ({ web3Context, transactionReceipt, transactionPromiEvent, customTransactionReceiptSchema, returnFormat }) => {
      let needToWatchLater = true;
      let lastCaughtBlockHash;
      setImmediate(() => {
        var _a2;
        (_a2 = web3Context.subscriptionManager) === null || _a2 === void 0 ? void 0 : _a2.subscribe("newHeads").then((subscription) => {
          subscription.on("data", (newBlockHeader) => __awaiter$h(void 0, void 0, void 0, function* () {
            var _a3;
            needToWatchLater = false;
            if (!(newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.number) || // For some cases, the on-data event is fired couple times for the same block!
            // This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.
            lastCaughtBlockHash === (newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash)) {
              return;
            }
            lastCaughtBlockHash = newBlockHeader === null || newBlockHeader === void 0 ? void 0 : newBlockHeader.parentHash;
            const confirmations = BigInt(newBlockHeader.number) - BigInt(transactionReceipt.blockNumber) + BigInt(1);
            transactionPromiEvent.emit("confirmation", {
              confirmations: format({ format: "uint" }, confirmations, returnFormat),
              receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),
              latestBlockHash: format({ format: "bytes32" }, newBlockHeader.parentHash, returnFormat)
            });
            if (confirmations >= web3Context.transactionConfirmationBlocks) {
              yield (_a3 = web3Context.subscriptionManager) === null || _a3 === void 0 ? void 0 : _a3.removeSubscription(subscription);
            }
          }));
          subscription.on("error", () => __awaiter$h(void 0, void 0, void 0, function* () {
            var _b;
            yield (_b = web3Context.subscriptionManager) === null || _b === void 0 ? void 0 : _b.removeSubscription(subscription);
            needToWatchLater = false;
            watchTransactionByPolling({
              web3Context,
              transactionReceipt,
              transactionPromiEvent,
              customTransactionReceiptSchema,
              returnFormat
            });
          }));
        }).catch(() => {
          needToWatchLater = false;
          watchTransactionByPolling({
            web3Context,
            transactionReceipt,
            customTransactionReceiptSchema,
            transactionPromiEvent,
            returnFormat
          });
        });
      });
      setTimeout(() => {
        if (needToWatchLater) {
          watchTransactionByPolling({
            web3Context,
            transactionReceipt,
            transactionPromiEvent,
            returnFormat
          });
        }
      }, web3Context.blockHeaderTimeout * 1e3);
    };
    function watchTransactionForConfirmations(web3Context, transactionPromiEvent, transactionReceipt, transactionHash, returnFormat, customTransactionReceiptSchema) {
      if (isNullish$1(transactionReceipt) || isNullish$1(transactionReceipt.blockHash))
        throw new TransactionMissingReceiptOrBlockHashError({
          receipt: transactionReceipt,
          blockHash: format({ format: "bytes32" }, transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockHash, returnFormat),
          transactionHash: format({ format: "bytes32" }, transactionHash, returnFormat)
        });
      if (!transactionReceipt.blockNumber)
        throw new TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });
      transactionPromiEvent.emit("confirmation", {
        confirmations: format({ format: "uint" }, 1, returnFormat),
        receipt: format(customTransactionReceiptSchema !== null && customTransactionReceiptSchema !== void 0 ? customTransactionReceiptSchema : transactionReceiptSchema, transactionReceipt, returnFormat),
        latestBlockHash: format({ format: "bytes32" }, transactionReceipt.blockHash, returnFormat)
      });
      const provider = web3Context.requestManager.provider;
      if (provider && "supportsSubscriptions" in provider && provider.supportsSubscriptions()) {
        watchTransactionBySubscription({
          web3Context,
          transactionReceipt,
          transactionPromiEvent,
          customTransactionReceiptSchema,
          returnFormat
        });
      } else {
        watchTransactionByPolling({
          web3Context,
          transactionReceipt,
          transactionPromiEvent,
          customTransactionReceiptSchema,
          returnFormat
        });
      }
    }
    const isAbiErrorFragment = (item) => !isNullish(item) && typeof item === "object" && !isNullish(item.type) && item.type === "error";
    const isAbiEventFragment = (item) => !isNullish(item) && typeof item === "object" && !isNullish(item.type) && item.type === "event";
    const isAbiFunctionFragment = (item) => !isNullish(item) && typeof item === "object" && !isNullish(item.type) && item.type === "function";
    const isAbiConstructorFragment = (item) => !isNullish(item) && typeof item === "object" && !isNullish(item.type) && item.type === "constructor";
    const isSimplifiedStructFormat = (type) => typeof type === "object" && typeof type.components === "undefined" && typeof type.name === "undefined";
    const mapStructNameAndType = (structName) => structName.includes("[]") ? { type: "tuple[]", name: structName.slice(0, -2) } : { type: "tuple", name: structName };
    const mapStructToCoderFormat = (struct) => {
      const components = [];
      for (const key of Object.keys(struct)) {
        const item = struct[key];
        if (typeof item === "object") {
          components.push(Object.assign(Object.assign({}, mapStructNameAndType(key)), { components: mapStructToCoderFormat(item) }));
        } else {
          components.push({
            name: key,
            type: struct[key]
          });
        }
      }
      return components;
    };
    const flattenTypes = (includeTuple, puts) => {
      const types = [];
      puts.forEach((param) => {
        if (typeof param.components === "object") {
          if (!param.type.startsWith("tuple")) {
            throw new AbiError(`Invalid value given "${param.type}". Error: components found but type is not tuple.`);
          }
          const arrayBracket = param.type.indexOf("[");
          const suffix = arrayBracket >= 0 ? param.type.substring(arrayBracket) : "";
          const result = flattenTypes(includeTuple, param.components);
          if (Array.isArray(result) && includeTuple) {
            types.push(`tuple(${result.join(",")})${suffix}`);
          } else {
            types.push(`(${result.join(",")})${suffix}`);
          }
        } else {
          types.push(param.type);
        }
      });
      return types;
    };
    const jsonInterfaceMethodToString = (json) => {
      var _a2, _b, _c, _d;
      if (isAbiErrorFragment(json) || isAbiEventFragment(json) || isAbiFunctionFragment(json)) {
        if ((_a2 = json.name) === null || _a2 === void 0 ? void 0 : _a2.includes("(")) {
          return json.name;
        }
        return `${(_b = json.name) !== null && _b !== void 0 ? _b : ""}(${flattenTypes(false, (_c = json.inputs) !== null && _c !== void 0 ? _c : []).join(",")})`;
      }
      return `(${flattenTypes(false, (_d = json.inputs) !== null && _d !== void 0 ? _d : []).join(",")})`;
    };
    const encodeErrorSignature = (functionName) => {
      if (typeof functionName !== "string" && !isAbiErrorFragment(functionName)) {
        throw new AbiError("Invalid parameter value in encodeErrorSignature");
      }
      let name2;
      if (functionName && (typeof functionName === "function" || typeof functionName === "object")) {
        name2 = jsonInterfaceMethodToString(functionName);
      } else {
        name2 = functionName;
      }
      return sha3Raw(name2);
    };
    const encodeEventSignature = (functionName) => {
      if (typeof functionName !== "string" && !isAbiEventFragment(functionName)) {
        throw new AbiError("Invalid parameter value in encodeEventSignature");
      }
      let name2;
      if (functionName && (typeof functionName === "function" || typeof functionName === "object")) {
        name2 = jsonInterfaceMethodToString(functionName);
      } else {
        name2 = functionName;
      }
      return sha3Raw(name2);
    };
    function execTyped(regex, string) {
      const match = regex.exec(string);
      return match == null ? void 0 : match.groups;
    }
    var bytesRegex = /^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/;
    var integerRegex = /^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/;
    var isTupleRegex = /^\(.+?\).*?$/;
    var __defProp = Object.defineProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    var name = "abitype";
    var version = "0.7.1";
    var BaseError = class extends Error {
      constructor(shortMessage, args = {}) {
        var _a2;
        const details = args.cause instanceof BaseError ? args.cause.details : ((_a2 = args.cause) == null ? void 0 : _a2.message) ? args.cause.message : args.details;
        const docsPath = args.cause instanceof BaseError ? args.cause.docsPath || args.docsPath : args.docsPath;
        const message = [
          shortMessage || "An error occurred.",
          "",
          ...args.metaMessages ? [...args.metaMessages, ""] : [],
          ...docsPath ? [`Docs: https://abitype.dev${docsPath}`] : [],
          ...details ? [`Details: ${details}`] : [],
          `Version: ${name}@${version}`
        ].join("\n");
        super(message);
        __publicField(this, "details");
        __publicField(this, "docsPath");
        __publicField(this, "metaMessages");
        __publicField(this, "shortMessage");
        __publicField(this, "name", "AbiTypeError");
        if (args.cause)
          this.cause = args.cause;
        this.details = details;
        this.docsPath = docsPath;
        this.metaMessages = args.metaMessages;
        this.shortMessage = shortMessage;
      }
    };
    var structSignatureRegex = /^struct (?<name>[a-zA-Z0-9_]+) \{(?<properties>.*?)\}$/;
    function isStructSignature(signature) {
      return structSignatureRegex.test(signature);
    }
    function execStructSignature(signature) {
      return execTyped(
        structSignatureRegex,
        signature
      );
    }
    var modifiers = /* @__PURE__ */ new Set([
      "memory",
      "indexed",
      "storage",
      "calldata"
    ]);
    var functionModifiers = /* @__PURE__ */ new Set([
      "calldata",
      "memory",
      "storage"
    ]);
    function getParameterCacheKey(param, type) {
      if (type)
        return `${type}:${param}`;
      return param;
    }
    var parameterCache = /* @__PURE__ */ new Map([
      // Unnamed
      ["address", { type: "address" }],
      ["bool", { type: "bool" }],
      ["bytes", { type: "bytes" }],
      ["bytes32", { type: "bytes32" }],
      ["int", { type: "int256" }],
      ["int256", { type: "int256" }],
      ["string", { type: "string" }],
      ["uint", { type: "uint256" }],
      ["uint8", { type: "uint8" }],
      ["uint16", { type: "uint16" }],
      ["uint24", { type: "uint24" }],
      ["uint32", { type: "uint32" }],
      ["uint64", { type: "uint64" }],
      ["uint96", { type: "uint96" }],
      ["uint112", { type: "uint112" }],
      ["uint160", { type: "uint160" }],
      ["uint192", { type: "uint192" }],
      ["uint256", { type: "uint256" }],
      // Named
      ["address owner", { type: "address", name: "owner" }],
      ["address to", { type: "address", name: "to" }],
      ["bool approved", { type: "bool", name: "approved" }],
      ["bytes _data", { type: "bytes", name: "_data" }],
      ["bytes data", { type: "bytes", name: "data" }],
      ["bytes signature", { type: "bytes", name: "signature" }],
      ["bytes32 hash", { type: "bytes32", name: "hash" }],
      ["bytes32 r", { type: "bytes32", name: "r" }],
      ["bytes32 root", { type: "bytes32", name: "root" }],
      ["bytes32 s", { type: "bytes32", name: "s" }],
      ["string name", { type: "string", name: "name" }],
      ["string symbol", { type: "string", name: "symbol" }],
      ["string tokenURI", { type: "string", name: "tokenURI" }],
      ["uint tokenId", { type: "uint256", name: "tokenId" }],
      ["uint8 v", { type: "uint8", name: "v" }],
      ["uint256 balance", { type: "uint256", name: "balance" }],
      ["uint256 tokenId", { type: "uint256", name: "tokenId" }],
      ["uint256 value", { type: "uint256", name: "value" }],
      // Indexed
      [
        "event:address indexed from",
        { type: "address", name: "from", indexed: true }
      ],
      ["event:address indexed to", { type: "address", name: "to", indexed: true }],
      [
        "event:uint indexed tokenId",
        { type: "uint256", name: "tokenId", indexed: true }
      ],
      [
        "event:uint256 indexed tokenId",
        { type: "uint256", name: "tokenId", indexed: true }
      ]
    ]);
    var abiParameterWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
    var abiParameterWithTupleRegex = /^\((?<type>.+?)\)(?<array>(?:\[\d*?\])+?)?(?:\s(?<modifier>calldata|indexed|memory|storage{1}))?(?:\s(?<name>[a-zA-Z0-9_]+))?$/;
    var dynamicIntegerRegex = /^u?int$/;
    function parseAbiParameter(param, options) {
      var _a2, _b;
      const parameterCacheKey = getParameterCacheKey(param, options == null ? void 0 : options.type);
      if (parameterCache.has(parameterCacheKey))
        return parameterCache.get(parameterCacheKey);
      const isTuple = isTupleRegex.test(param);
      const match = execTyped(
        isTuple ? abiParameterWithTupleRegex : abiParameterWithoutTupleRegex,
        param
      );
      if (!match)
        throw new BaseError("Invalid ABI parameter.", {
          details: param
        });
      if (match.name && isSolidityKeyword(match.name))
        throw new BaseError("Invalid ABI parameter.", {
          details: param,
          metaMessages: [
            `"${match.name}" is a protected Solidity keyword. More info: https://docs.soliditylang.org/en/latest/cheatsheet.html`
          ]
        });
      const name2 = match.name ? { name: match.name } : {};
      const indexed = match.modifier === "indexed" ? { indexed: true } : {};
      const structs = (options == null ? void 0 : options.structs) ?? {};
      let type;
      let components = {};
      if (isTuple) {
        type = "tuple";
        const params = splitParameters(match.type);
        const components_ = [];
        const length = params.length;
        for (let i = 0; i < length; i++) {
          components_.push(parseAbiParameter(params[i], { structs }));
        }
        components = { components: components_ };
      } else if (match.type in structs) {
        type = "tuple";
        components = { components: structs[match.type] };
      } else if (dynamicIntegerRegex.test(match.type)) {
        type = `${match.type}256`;
      } else {
        type = match.type;
        if (!((options == null ? void 0 : options.type) === "struct") && !isSolidityType(type))
          throw new BaseError("Unknown type.", {
            metaMessages: [`Type "${type}" is not a valid ABI type.`]
          });
      }
      if (match.modifier) {
        if (!((_b = (_a2 = options == null ? void 0 : options.modifiers) == null ? void 0 : _a2.has) == null ? void 0 : _b.call(_a2, match.modifier)))
          throw new BaseError("Invalid ABI parameter.", {
            details: param,
            metaMessages: [
              `Modifier "${match.modifier}" not allowed${(options == null ? void 0 : options.type) ? ` in "${options.type}" type` : ""}.`
            ]
          });
        if (functionModifiers.has(match.modifier) && !isValidDataLocation(type, !!match.array))
          throw new BaseError("Invalid ABI parameter.", {
            details: param,
            metaMessages: [
              `Modifier "${match.modifier}" not allowed${(options == null ? void 0 : options.type) ? ` in "${options.type}" type` : ""}.`,
              `Data location can only be specified for array, struct, or mapping types, but "${match.modifier}" was given.`
            ]
          });
      }
      const abiParameter = {
        type: `${type}${match.array ?? ""}`,
        ...name2,
        ...indexed,
        ...components
      };
      parameterCache.set(parameterCacheKey, abiParameter);
      return abiParameter;
    }
    function splitParameters(params, result = [], current = "", depth = 0) {
      if (params === "") {
        if (current === "")
          return result;
        if (depth !== 0)
          throw new BaseError("Unbalanced parentheses.", {
            metaMessages: [
              `"${current.trim()}" has too many ${depth > 0 ? "opening" : "closing"} parentheses.`
            ],
            details: `Depth "${depth}"`
          });
        return [...result, current.trim()];
      }
      const length = params.length;
      for (let i = 0; i < length; i++) {
        const char = params[i];
        const tail = params.slice(i + 1);
        switch (char) {
          case ",":
            return depth === 0 ? splitParameters(tail, [...result, current.trim()]) : splitParameters(tail, result, `${current}${char}`, depth);
          case "(":
            return splitParameters(tail, result, `${current}${char}`, depth + 1);
          case ")":
            return splitParameters(tail, result, `${current}${char}`, depth - 1);
          default:
            return splitParameters(tail, result, `${current}${char}`, depth);
        }
      }
      return [];
    }
    function isSolidityType(type) {
      return type === "address" || type === "bool" || type === "function" || type === "string" || bytesRegex.test(type) || integerRegex.test(type);
    }
    var protectedKeywordsRegex = /^(?:after|alias|anonymous|apply|auto|byte|calldata|case|catch|constant|copyof|default|defined|error|event|external|false|final|function|immutable|implements|in|indexed|inline|internal|let|mapping|match|memory|mutable|null|of|override|partial|private|promise|public|pure|reference|relocatable|return|returns|sizeof|static|storage|struct|super|supports|switch|this|true|try|typedef|typeof|var|view|virtual)$/;
    function isSolidityKeyword(name2) {
      return name2 === "address" || name2 === "bool" || name2 === "function" || name2 === "string" || name2 === "tuple" || bytesRegex.test(name2) || integerRegex.test(name2) || protectedKeywordsRegex.test(name2);
    }
    function isValidDataLocation(type, isArray) {
      return isArray || type === "bytes" || type === "string" || type === "tuple";
    }
    function parseStructs(signatures) {
      const shallowStructs = {};
      const signaturesLength = signatures.length;
      for (let i = 0; i < signaturesLength; i++) {
        const signature = signatures[i];
        if (!isStructSignature(signature))
          continue;
        const match = execStructSignature(signature);
        if (!match)
          throw new BaseError("Invalid struct signature.", {
            details: signature
          });
        const properties = match.properties.split(";");
        const components = [];
        const propertiesLength = properties.length;
        for (let k2 = 0; k2 < propertiesLength; k2++) {
          const property = properties[k2];
          const trimmed = property.trim();
          if (!trimmed)
            continue;
          const abiParameter = parseAbiParameter(trimmed, {
            type: "struct"
          });
          components.push(abiParameter);
        }
        if (!components.length)
          throw new BaseError("Invalid struct signature.", {
            details: signature,
            metaMessages: ["No properties exist."]
          });
        shallowStructs[match.name] = components;
      }
      const resolvedStructs = {};
      const entries = Object.entries(shallowStructs);
      const entriesLength = entries.length;
      for (let i = 0; i < entriesLength; i++) {
        const [name2, parameters] = entries[i];
        resolvedStructs[name2] = resolveStructs(parameters, shallowStructs);
      }
      return resolvedStructs;
    }
    var typeWithoutTupleRegex = /^(?<type>[a-zA-Z0-9_]+?)(?<array>(?:\[\d*?\])+?)?$/;
    function resolveStructs(abiParameters, structs, ancestors = /* @__PURE__ */ new Set()) {
      const components = [];
      const length = abiParameters.length;
      for (let i = 0; i < length; i++) {
        const abiParameter = abiParameters[i];
        const isTuple = isTupleRegex.test(abiParameter.type);
        if (isTuple)
          components.push(abiParameter);
        else {
          const match = execTyped(
            typeWithoutTupleRegex,
            abiParameter.type
          );
          if (!(match == null ? void 0 : match.type))
            throw new BaseError("Invalid ABI parameter.", {
              details: JSON.stringify(abiParameter, null, 2),
              metaMessages: ["ABI parameter type is invalid."]
            });
          const { array, type } = match;
          if (type in structs) {
            if (ancestors.has(type))
              throw new BaseError("Circular reference detected.", {
                metaMessages: [`Struct "${type}" is a circular reference.`]
              });
            components.push({
              ...abiParameter,
              type: `tuple${array ?? ""}`,
              components: resolveStructs(
                structs[type] ?? [],
                structs,
                /* @__PURE__ */ new Set([...ancestors, type])
              )
            });
          } else {
            if (isSolidityType(type))
              components.push(abiParameter);
            else
              throw new BaseError("Unknown type.", {
                metaMessages: [
                  `Type "${type}" is not a valid ABI type. Perhaps you forgot to include a struct signature?`
                ]
              });
          }
        }
      }
      return components;
    }
    function parseAbiParameter2(param) {
      let abiParameter;
      if (typeof param === "string")
        abiParameter = parseAbiParameter(param, {
          modifiers
        });
      else {
        const structs = parseStructs(param);
        const length = param.length;
        for (let i = 0; i < length; i++) {
          const signature = param[i];
          if (isStructSignature(signature))
            continue;
          abiParameter = parseAbiParameter(signature, { modifiers, structs });
          break;
        }
      }
      if (!abiParameter)
        throw new BaseError("Failed to parse ABI parameter.", {
          details: `parseAbiParameter(${JSON.stringify(param, null, 2)})`,
          docsPath: "/api/human.html#parseabiparameter-1"
        });
      return abiParameter;
    }
    const WORD_SIZE = 32;
    function alloc(size = 0) {
      var _a2;
      if (((_a2 = globalThis.Buffer) === null || _a2 === void 0 ? void 0 : _a2.alloc) !== void 0) {
        const buf = globalThis.Buffer.alloc(size);
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
      }
      return new Uint8Array(size);
    }
    function convertExternalAbiParameter(abiParam) {
      var _a2, _b;
      return Object.assign(Object.assign({}, abiParam), { name: (_a2 = abiParam.name) !== null && _a2 !== void 0 ? _a2 : "", components: (_b = abiParam.components) === null || _b === void 0 ? void 0 : _b.map((c) => convertExternalAbiParameter(c)) });
    }
    function isAbiParameter(param) {
      return !isNullish(param) && typeof param === "object" && !isNullish(param.type) && typeof param.type === "string";
    }
    function toAbiParams(abi2) {
      return abi2.map((input) => {
        var _a2;
        if (isAbiParameter(input)) {
          return input;
        }
        if (typeof input === "string") {
          return convertExternalAbiParameter(parseAbiParameter2(input.replace(/tuple/, "")));
        }
        if (isSimplifiedStructFormat(input)) {
          const structName = Object.keys(input)[0];
          const structInfo = mapStructNameAndType(structName);
          structInfo.name = (_a2 = structInfo.name) !== null && _a2 !== void 0 ? _a2 : "";
          return Object.assign(Object.assign({}, structInfo), { components: mapStructToCoderFormat(input[structName]) });
        }
        throw new AbiError("Invalid abi");
      });
    }
    function extractArrayType(param) {
      const arrayParenthesisStart = param.type.lastIndexOf("[");
      const arrayParamType = param.type.substring(0, arrayParenthesisStart);
      const sizeString = param.type.substring(arrayParenthesisStart);
      let size = -1;
      if (sizeString !== "[]") {
        size = Number(sizeString.slice(1, -1));
        if (isNaN(size)) {
          throw new AbiError("Invalid fixed array size", { size: sizeString });
        }
      }
      return {
        param: { type: arrayParamType, name: "", components: param.components },
        size
      };
    }
    function isDynamic(param) {
      var _a2, _b;
      if (param.type === "string" || param.type === "bytes" || param.type.endsWith("[]"))
        return true;
      if (param.type === "tuple") {
        return (_b = (_a2 = param.components) === null || _a2 === void 0 ? void 0 : _a2.some(isDynamic)) !== null && _b !== void 0 ? _b : false;
      }
      if (param.type.endsWith("]")) {
        return isDynamic(extractArrayType(param).param);
      }
      return false;
    }
    const ADDRESS_BYTES_COUNT = 20;
    const ADDRESS_OFFSET = WORD_SIZE - ADDRESS_BYTES_COUNT;
    function encodeAddress(param, input) {
      if (typeof input !== "string") {
        throw new AbiError("address type expects string as input type", {
          value: input,
          name: param.name,
          type: param.type
        });
      }
      let address = input.toLowerCase();
      if (!address.startsWith("0x")) {
        address = `0x${address}`;
      }
      if (!isAddress$1(address)) {
        throw new AbiError("provided input is not valid address", {
          value: input,
          name: param.name,
          type: param.type
        });
      }
      const addressBytes = hexToUint8Array(address);
      const encoded = alloc(WORD_SIZE);
      encoded.set(addressBytes, ADDRESS_OFFSET);
      return {
        dynamic: false,
        encoded
      };
    }
    function decodeAddress(_param, bytes2) {
      const addressBytes = bytes2.subarray(ADDRESS_OFFSET, WORD_SIZE);
      if (addressBytes.length !== ADDRESS_BYTES_COUNT) {
        throw new AbiError("Invalid decoding input, not enough bytes to decode address", { bytes: bytes2 });
      }
      const result = uint8ArrayToHexString$1(addressBytes);
      return {
        result: toChecksumAddress(result),
        encoded: bytes2.subarray(WORD_SIZE),
        consumed: WORD_SIZE
      };
    }
    const numberLimits = /* @__PURE__ */ new Map();
    let base = BigInt(256);
    for (let i = 8; i <= 256; i += 8) {
      numberLimits.set(`uint${i}`, {
        min: BigInt(0),
        max: base - BigInt(1)
      });
      numberLimits.set(`int${i}`, {
        min: -base / BigInt(2),
        max: base / BigInt(2) - BigInt(1)
      });
      base *= BigInt(256);
    }
    numberLimits.set(`int`, numberLimits.get("int256"));
    numberLimits.set(`uint`, numberLimits.get("uint256"));
    const mask = BigInt(1) << BigInt(256);
    function bigIntToUint8Array(value, byteLength = WORD_SIZE) {
      let hexValue;
      if (value < 0) {
        hexValue = (mask + value).toString(16);
      } else {
        hexValue = value.toString(16);
      }
      hexValue = padLeft(hexValue, byteLength * 2);
      return hexToUint8Array(hexValue);
    }
    function uint8ArrayToBigInt(value, max) {
      const hexValue = uint8ArrayToHexString$1(value);
      const result = BigInt(hexValue);
      if (result <= max)
        return result;
      return result - mask;
    }
    function encodeNumber(param, input) {
      let value;
      try {
        value = toBigInt(input);
      } catch (e) {
        throw new AbiError("provided input is not number value", {
          type: param.type,
          value: input,
          name: param.name
        });
      }
      const limit = numberLimits.get(param.type);
      if (!limit) {
        throw new AbiError("provided abi contains invalid number datatype", { type: param.type });
      }
      if (value < limit.min) {
        throw new AbiError("provided input is less then minimum for given type", {
          type: param.type,
          value: input,
          name: param.name,
          minimum: limit.min.toString()
        });
      }
      if (value > limit.max) {
        throw new AbiError("provided input is greater then maximum for given type", {
          type: param.type,
          value: input,
          name: param.name,
          maximum: limit.max.toString()
        });
      }
      return {
        dynamic: false,
        encoded: bigIntToUint8Array(value)
      };
    }
    function decodeNumber(param, bytes2) {
      if (bytes2.length < WORD_SIZE) {
        throw new AbiError("Not enough bytes left to decode", { param, bytesLeft: bytes2.length });
      }
      const boolBytes = bytes2.subarray(0, WORD_SIZE);
      const limit = numberLimits.get(param.type);
      if (!limit) {
        throw new AbiError("provided abi contains invalid number datatype", { type: param.type });
      }
      const numberResult = uint8ArrayToBigInt(boolBytes, limit.max);
      if (numberResult < limit.min) {
        throw new AbiError("decoded value is less then minimum for given type", {
          type: param.type,
          value: numberResult,
          name: param.name,
          minimum: limit.min.toString()
        });
      }
      if (numberResult > limit.max) {
        throw new AbiError("decoded value is greater then maximum for given type", {
          type: param.type,
          value: numberResult,
          name: param.name,
          maximum: limit.max.toString()
        });
      }
      return {
        result: numberResult,
        encoded: bytes2.subarray(WORD_SIZE),
        consumed: WORD_SIZE
      };
    }
    function encodeBoolean(param, input) {
      let value;
      try {
        value = toBool(input);
      } catch (e) {
        if (e instanceof InvalidBooleanError) {
          throw new AbiError("provided input is not valid boolean value", {
            type: param.type,
            value: input,
            name: param.name
          });
        }
      }
      return encodeNumber({ type: "uint8", name: "" }, Number(value));
    }
    function decodeBool(_param, bytes2) {
      const numberResult = decodeNumber({ type: "uint8", name: "" }, bytes2);
      if (numberResult.result > 1 || numberResult.result < 0) {
        throw new AbiError("Invalid boolean value encoded", {
          boolBytes: bytes2.subarray(0, WORD_SIZE),
          numberResult
        });
      }
      return {
        result: numberResult.result === BigInt(1),
        encoded: numberResult.encoded,
        consumed: WORD_SIZE
      };
    }
    const MAX_STATIC_BYTES_COUNT = 32;
    function encodeBytes(param, input) {
      if (typeof input === "string" && input.length % 2 !== 0) {
        input += "0";
      }
      if (!isBytes$1(input)) {
        throw new AbiError("provided input is not valid bytes value", {
          type: param.type,
          value: input,
          name: param.name
        });
      }
      const bytes2 = bytesToUint8Array(input);
      const [, size] = param.type.split("bytes");
      if (size) {
        if (Number(size) > MAX_STATIC_BYTES_COUNT || Number(size) < 1) {
          throw new AbiError("invalid bytes type. Static byte type can have between 1 and 32 bytes", {
            type: param.type
          });
        }
        if (Number(size) < bytes2.length) {
          throw new AbiError("provided input size is different than type size", {
            type: param.type,
            value: input,
            name: param.name
          });
        }
        const encoded2 = alloc(WORD_SIZE);
        encoded2.set(bytes2);
        return {
          dynamic: false,
          encoded: encoded2
        };
      }
      const partsLength = Math.ceil(bytes2.length / WORD_SIZE);
      const encoded = alloc(WORD_SIZE + partsLength * WORD_SIZE);
      encoded.set(encodeNumber({ type: "uint32", name: "" }, bytes2.length).encoded);
      encoded.set(bytes2, WORD_SIZE);
      return {
        dynamic: true,
        encoded
      };
    }
    function decodeBytes(param, bytes2) {
      const [, sizeString] = param.type.split("bytes");
      let size = Number(sizeString);
      let remainingBytes = bytes2;
      let partsCount = 1;
      let consumed = 0;
      if (!size) {
        const result = decodeNumber({ type: "uint32", name: "" }, remainingBytes);
        size = Number(result.result);
        consumed += result.consumed;
        remainingBytes = result.encoded;
        partsCount = Math.ceil(size / WORD_SIZE);
      }
      if (size > bytes2.length) {
        throw new AbiError("there is not enough data to decode", {
          type: param.type,
          encoded: bytes2,
          size
        });
      }
      return {
        result: bytesToHex$2(remainingBytes.subarray(0, size)),
        encoded: remainingBytes.subarray(partsCount * WORD_SIZE),
        consumed: consumed + partsCount * WORD_SIZE
      };
    }
    function encodeString(_param, input) {
      if (typeof input !== "string") {
        throw new AbiError("invalid input, should be string", { input });
      }
      const bytes2 = utf8ToBytes$2(input);
      return encodeBytes({ type: "bytes", name: "" }, bytes2);
    }
    function decodeString(_param, bytes2) {
      const r2 = decodeBytes({ type: "bytes", name: "" }, bytes2);
      return {
        result: hexToUtf8(r2.result),
        encoded: r2.encoded,
        consumed: r2.consumed
      };
    }
    function encodeDynamicParams(encodedParams) {
      let staticSize = 0;
      let dynamicSize = 0;
      const staticParams = [];
      const dynamicParams = [];
      for (const encodedParam of encodedParams) {
        if (encodedParam.dynamic) {
          staticSize += WORD_SIZE;
        } else {
          staticSize += encodedParam.encoded.length;
        }
      }
      for (const encodedParam of encodedParams) {
        if (encodedParam.dynamic) {
          staticParams.push(encodeNumber({ type: "uint256", name: "" }, staticSize + dynamicSize));
          dynamicParams.push(encodedParam);
          dynamicSize += encodedParam.encoded.length;
        } else {
          staticParams.push(encodedParam);
        }
      }
      return uint8ArrayConcat(...staticParams.map((p2) => p2.encoded), ...dynamicParams.map((p2) => p2.encoded));
    }
    function encodeArray(param, values) {
      if (!Array.isArray(values)) {
        throw new AbiError("Expected value to be array", { abi: param, values });
      }
      const { size, param: arrayItemParam } = extractArrayType(param);
      const encodedParams = values.map((v2) => encodeParamFromAbiParameter(arrayItemParam, v2));
      const dynamic = size === -1;
      const dynamicItems = encodedParams.length > 0 && encodedParams[0].dynamic;
      if (!dynamic && values.length !== size) {
        throw new AbiError("Given arguments count doesn't match array length", {
          arrayLength: size,
          argumentsLength: values.length
        });
      }
      if (dynamic || dynamicItems) {
        const encodingResult = encodeDynamicParams(encodedParams);
        if (dynamic) {
          const encodedLength = encodeNumber({ type: "uint256", name: "" }, encodedParams.length).encoded;
          return {
            dynamic: true,
            encoded: encodedParams.length > 0 ? uint8ArrayConcat(encodedLength, encodingResult) : encodedLength
          };
        }
        return {
          dynamic: true,
          encoded: encodingResult
        };
      }
      return {
        dynamic: false,
        encoded: uint8ArrayConcat(...encodedParams.map((p2) => p2.encoded))
      };
    }
    function decodeArray(param, bytes2) {
      let { size, param: arrayItemParam } = extractArrayType(param);
      const dynamic = size === -1;
      let consumed = 0;
      const result = [];
      let remaining = bytes2;
      if (dynamic) {
        const lengthResult = decodeNumber({ type: "uint32", name: "" }, bytes2);
        size = Number(lengthResult.result);
        consumed = lengthResult.consumed;
        remaining = lengthResult.encoded;
      }
      const hasDynamicChild = isDynamic(arrayItemParam);
      if (hasDynamicChild) {
        for (let i = 0; i < size; i += 1) {
          const offsetResult = decodeNumber({ type: "uint32", name: "" }, remaining.subarray(i * WORD_SIZE));
          consumed += offsetResult.consumed;
          const decodedChildResult = decodeParamFromAbiParameter(arrayItemParam, remaining.subarray(Number(offsetResult.result)));
          consumed += decodedChildResult.consumed;
          result.push(decodedChildResult.result);
        }
        return {
          result,
          encoded: remaining.subarray(consumed),
          consumed
        };
      }
      for (let i = 0; i < size; i += 1) {
        const decodedChildResult = decodeParamFromAbiParameter(arrayItemParam, bytes2.subarray(consumed));
        consumed += decodedChildResult.consumed;
        result.push(decodedChildResult.result);
      }
      return {
        result,
        encoded: bytes2.subarray(consumed),
        consumed
      };
    }
    function encodeParamFromAbiParameter(param, value) {
      if (param.type === "string") {
        return encodeString(param, value);
      }
      if (param.type === "bool") {
        return encodeBoolean(param, value);
      }
      if (param.type === "address") {
        return encodeAddress(param, value);
      }
      if (param.type === "tuple") {
        return encodeTuple(param, value);
      }
      if (param.type.endsWith("]")) {
        return encodeArray(param, value);
      }
      if (param.type.startsWith("bytes")) {
        return encodeBytes(param, value);
      }
      if (param.type.startsWith("uint") || param.type.startsWith("int")) {
        return encodeNumber(param, value);
      }
      throw new AbiError("Unsupported", {
        param,
        value
      });
    }
    function decodeParamFromAbiParameter(param, bytes2) {
      if (param.type === "string") {
        return decodeString(param, bytes2);
      }
      if (param.type === "bool") {
        return decodeBool(param, bytes2);
      }
      if (param.type === "address") {
        return decodeAddress(param, bytes2);
      }
      if (param.type === "tuple") {
        return decodeTuple(param, bytes2);
      }
      if (param.type.endsWith("]")) {
        return decodeArray(param, bytes2);
      }
      if (param.type.startsWith("bytes")) {
        return decodeBytes(param, bytes2);
      }
      if (param.type.startsWith("uint") || param.type.startsWith("int")) {
        return decodeNumber(param, bytes2);
      }
      throw new AbiError("Unsupported", {
        param,
        bytes: bytes2
      });
    }
    function encodeTuple(param, input) {
      var _a2, _b, _c;
      let dynamic = false;
      if (!Array.isArray(input) && typeof input !== "object") {
        throw new AbiError("param must be either Array or Object", {
          param,
          input
        });
      }
      const narrowedInput = input;
      const encoded = [];
      for (let i = 0; i < ((_b = (_a2 = param.components) === null || _a2 === void 0 ? void 0 : _a2.length) !== null && _b !== void 0 ? _b : 0); i += 1) {
        const paramComponent = param.components[i];
        let result;
        if (Array.isArray(narrowedInput)) {
          if (i >= narrowedInput.length) {
            throw new AbiError("input param length missmatch", {
              param,
              input
            });
          }
          result = encodeParamFromAbiParameter(paramComponent, narrowedInput[i]);
        } else {
          const paramInput = narrowedInput[(_c = paramComponent.name) !== null && _c !== void 0 ? _c : ""];
          if (paramInput === void 0 || paramInput === null) {
            throw new AbiError("missing input defined in abi", {
              param,
              input,
              paramName: paramComponent.name
            });
          }
          result = encodeParamFromAbiParameter(paramComponent, paramInput);
        }
        if (result.dynamic) {
          dynamic = true;
        }
        encoded.push(result);
      }
      if (dynamic) {
        return {
          dynamic: true,
          encoded: encodeDynamicParams(encoded)
        };
      }
      return {
        dynamic: false,
        encoded: uint8ArrayConcat(...encoded.map((e) => e.encoded))
      };
    }
    function decodeTuple(param, bytes2) {
      const result = {
        __length__: 0
      };
      let consumed = 0;
      if (!param.components) {
        return {
          result,
          encoded: bytes2,
          consumed
        };
      }
      let dynamicConsumed = 0;
      for (const [index, childParam] of param.components.entries()) {
        let decodedResult;
        if (isDynamic(childParam)) {
          const offsetResult = decodeNumber({ type: "uint32", name: "" }, bytes2.subarray(consumed));
          decodedResult = decodeParamFromAbiParameter(childParam, bytes2.subarray(Number(offsetResult.result)));
          consumed += offsetResult.consumed;
          dynamicConsumed += decodedResult.consumed;
        } else {
          decodedResult = decodeParamFromAbiParameter(childParam, bytes2.subarray(consumed));
          consumed += decodedResult.consumed;
        }
        result.__length__ += 1;
        result[index] = decodedResult.result;
        if (childParam.name && childParam.name !== "") {
          result[childParam.name] = decodedResult.result;
        }
      }
      return {
        encoded: bytes2.subarray(consumed + dynamicConsumed),
        result,
        consumed: consumed + dynamicConsumed
      };
    }
    function decodeParameters$1(abis, bytes2, _loose) {
      const abiParams = toAbiParams(abis);
      const bytesArray = hexToUint8Array(bytes2);
      return decodeTuple({ type: "tuple", name: "", components: abiParams }, bytesArray).result;
    }
    function inferParamsAbi(params) {
      const abi2 = [];
      params.forEach((param) => {
        if (Array.isArray(param)) {
          const inferredParams = inferParamsAbi(param);
          abi2.push({
            type: "tuple",
            components: inferredParams,
            name: ""
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
          });
        } else {
          abi2.push({ type: toHex(param, true) });
        }
      });
      return abi2;
    }
    function encodeParameters(abi2, params) {
      if ((abi2 === null || abi2 === void 0 ? void 0 : abi2.length) !== params.length) {
        throw new AbiError("Invalid number of values received for given ABI", {
          expected: abi2 === null || abi2 === void 0 ? void 0 : abi2.length,
          received: params.length
        });
      }
      const abiParams = toAbiParams(abi2);
      return uint8ArrayToHexString$1(encodeTuple({ type: "tuple", name: "", components: abiParams }, params).encoded);
    }
    function inferTypesAndEncodeParameters(params) {
      try {
        const abiParams = inferParamsAbi(params);
        return uint8ArrayToHexString$1(encodeTuple({ type: "tuple", name: "", components: abiParams }, params).encoded);
      } catch (e) {
        throw new AbiError("Could not infer types from given params", {
          params
        });
      }
    }
    const encodeParameter = (abi2, param) => encodeParameters([abi2], [param]);
    const decodeParametersWith = (abis, bytes2, loose) => {
      try {
        if (abis.length > 0 && (!bytes2 || bytes2 === "0x" || bytes2 === "0X")) {
          throw new AbiError("Returned values aren't valid, did it run Out of Gas? You might also see this error if you are not using the correct ABI for the contract you are retrieving data from, requesting data from a block number that does not exist, or querying a node which is not fully synced.");
        }
        return decodeParameters$1(abis, `0x${bytes2.replace(/0x/i, "")}`, loose);
      } catch (err) {
        throw new AbiError(`Parameter decoding error: ${err.message}`, {
          internalErr: err
        });
      }
    };
    const decodeParameters = (abi2, bytes2) => decodeParametersWith(abi2, bytes2, false);
    const decodeParameter = (abi2, bytes2) => decodeParameters([abi2], bytes2)["0"];
    const encodeFunctionSignature = (functionName) => {
      if (typeof functionName !== "string" && !isAbiFunctionFragment(functionName)) {
        throw new AbiError("Invalid parameter value in encodeFunctionSignature");
      }
      let name2;
      if (functionName && (typeof functionName === "function" || typeof functionName === "object")) {
        name2 = jsonInterfaceMethodToString(functionName);
      } else {
        name2 = functionName;
      }
      return sha3Raw(name2).slice(0, 10);
    };
    const encodeFunctionCall = (jsonInterface, params) => {
      var _a2;
      if (!isAbiFunctionFragment(jsonInterface)) {
        throw new AbiError("Invalid parameter value in encodeFunctionCall");
      }
      return `${encodeFunctionSignature(jsonInterface)}${encodeParameters((_a2 = jsonInterface.inputs) !== null && _a2 !== void 0 ? _a2 : [], params !== null && params !== void 0 ? params : []).replace("0x", "")}`;
    };
    const STATIC_TYPES = ["bool", "string", "int", "uint", "address", "fixed", "ufixed"];
    const _decodeParameter = (inputType, clonedTopic) => inputType === "string" ? clonedTopic : decodeParameter(inputType, clonedTopic);
    const decodeLog = (inputs, data, topics) => {
      const clonedTopics = Array.isArray(topics) ? topics : [topics];
      const indexedInputs = {};
      const nonIndexedInputs = {};
      for (const [i, input] of inputs.entries()) {
        if (input.indexed) {
          indexedInputs[i] = input;
        } else {
          nonIndexedInputs[i] = input;
        }
      }
      const decodedNonIndexedInputs = data ? decodeParametersWith(Object.values(nonIndexedInputs), data, true) : { __length__: 0 };
      const offset = clonedTopics.length - Object.keys(indexedInputs).length;
      const decodedIndexedInputs = Object.values(indexedInputs).map((input, index) => STATIC_TYPES.some((s) => input.type.startsWith(s)) ? _decodeParameter(input.type, clonedTopics[index + offset]) : clonedTopics[index + offset]);
      const returnValues = { __length__: 0 };
      let indexedCounter = 0;
      let nonIndexedCounter = 0;
      for (const [i, res] of inputs.entries()) {
        returnValues[i] = res.type === "string" ? "" : void 0;
        if (indexedInputs[i]) {
          returnValues[i] = decodedIndexedInputs[indexedCounter];
          indexedCounter += 1;
        }
        if (nonIndexedInputs[i]) {
          returnValues[i] = decodedNonIndexedInputs[String(nonIndexedCounter)];
          nonIndexedCounter += 1;
        }
        if (res.name) {
          returnValues[res.name] = returnValues[i];
        }
        returnValues.__length__ += 1;
      }
      return returnValues;
    };
    const decodeContractErrorData = (errorsAbi, error) => {
      if (error === null || error === void 0 ? void 0 : error.data) {
        let errorName;
        let errorSignature;
        let errorArgs;
        try {
          const errorSha = error.data.slice(0, 10);
          const errorAbi = errorsAbi.find((abi2) => encodeErrorSignature(abi2).startsWith(errorSha));
          if (errorAbi === null || errorAbi === void 0 ? void 0 : errorAbi.inputs) {
            errorName = errorAbi.name;
            errorSignature = jsonInterfaceMethodToString(errorAbi);
            errorArgs = decodeParameters([...errorAbi.inputs], error.data.substring(10));
          } else if (error.data.startsWith("0x08c379a0")) {
            errorName = "Error";
            errorSignature = "Error(string)";
            errorArgs = decodeParameters([
              {
                name: "message",
                type: "string"
              }
            ], error.data.substring(10));
          } else if (error.data.startsWith("0x4e487b71")) {
            errorName = "Panic";
            errorSignature = "Panic(uint256)";
            errorArgs = decodeParameters([
              {
                name: "code",
                type: "uint256"
              }
            ], error.data.substring(10));
          } else {
            console.error("No matching error abi found for error data", error.data);
          }
        } catch (err) {
          console.error(err);
        }
        if (errorName) {
          error.setDecodedProperties(errorName, errorSignature, errorArgs);
        }
      }
    };
    var __awaiter$g = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const parseTransactionError = (error, contractAbi) => {
      var _a2, _b, _c, _d, _e;
      if (error instanceof ContractExecutionError && error.cause instanceof Eip838ExecutionError) {
        if (contractAbi !== void 0) {
          const errorsAbi = contractAbi.filter((abi2) => isAbiErrorFragment(abi2));
          decodeContractErrorData(errorsAbi, error.cause);
          return {
            reason: error.cause.message,
            signature: (_a2 = error.cause.data) === null || _a2 === void 0 ? void 0 : _a2.slice(0, 10),
            data: (_b = error.cause.data) === null || _b === void 0 ? void 0 : _b.substring(10),
            customErrorName: error.cause.errorName,
            customErrorDecodedSignature: error.cause.errorSignature,
            customErrorArguments: error.cause.errorArgs
          };
        }
        return {
          reason: error.cause.message,
          signature: (_c = error.cause.data) === null || _c === void 0 ? void 0 : _c.slice(0, 10),
          data: (_d = error.cause.data) === null || _d === void 0 ? void 0 : _d.substring(10)
        };
      }
      if (error instanceof InvalidResponseError && !Array.isArray((_e = error.cause) === null || _e === void 0 ? void 0 : _e.errors) && error.cause !== void 0) {
        return error.cause.message;
      }
      throw error;
    };
    function getRevertReason(web3Context, transaction, contractAbi, returnFormat = web3Context.defaultReturnFormat) {
      return __awaiter$g(this, void 0, void 0, function* () {
        try {
          yield call(web3Context, transaction, web3Context.defaultBlock, returnFormat);
          return void 0;
        } catch (error) {
          return parseTransactionError(error, contractAbi);
        }
      });
    }
    var __awaiter$f = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    function getTransactionError(web3Context, transactionFormatted, transactionReceiptFormatted, receivedError, contractAbi, knownReason) {
      return __awaiter$f(this, void 0, void 0, function* () {
        let _reason = knownReason;
        if (_reason === void 0) {
          if (web3Context.handleRevert && transactionFormatted !== void 0) {
            _reason = yield getRevertReason(web3Context, transactionFormatted, contractAbi);
          }
        }
        let error;
        if (_reason === void 0) {
          error = new TransactionRevertedWithoutReasonError(transactionReceiptFormatted);
        } else if (typeof _reason === "string") {
          error = new TransactionRevertInstructionError(_reason, void 0, transactionReceiptFormatted);
        } else if (_reason.customErrorName !== void 0 && _reason.customErrorDecodedSignature !== void 0 && _reason.customErrorArguments !== void 0) {
          const reasonWithCustomError = _reason;
          error = new TransactionRevertWithCustomError(reasonWithCustomError.reason, reasonWithCustomError.customErrorName, reasonWithCustomError.customErrorDecodedSignature, reasonWithCustomError.customErrorArguments, reasonWithCustomError.signature, transactionReceiptFormatted, reasonWithCustomError.data);
        } else {
          error = new TransactionRevertInstructionError(_reason.reason, _reason.signature, transactionReceiptFormatted, _reason.data);
        }
        return error;
      });
    }
    const decodeEventABI = (event, data, jsonInterface, returnFormat = DEFAULT_RETURN_FORMAT) => {
      var _a2, _b, _c, _d, _e;
      let modifiedEvent = Object.assign({}, event);
      const result = format(logSchema, data, returnFormat);
      if ([ALL_EVENTS, "allEvents"].includes(modifiedEvent.name)) {
        const matchedEvent = jsonInterface.find((j) => j.signature === data.topics[0]);
        if (matchedEvent) {
          modifiedEvent = matchedEvent;
        } else {
          modifiedEvent = { anonymous: true };
        }
      }
      modifiedEvent.inputs = (_b = (_a2 = modifiedEvent.inputs) !== null && _a2 !== void 0 ? _a2 : event.inputs) !== null && _b !== void 0 ? _b : [];
      if (!modifiedEvent.anonymous) {
        let indexedInputs = 0;
        ((_c = modifiedEvent.inputs) !== null && _c !== void 0 ? _c : []).forEach((input) => {
          if (input.indexed) {
            indexedInputs += 1;
          }
        });
        if (indexedInputs > 0 && (data === null || data === void 0 ? void 0 : data.topics) && (data === null || data === void 0 ? void 0 : data.topics.length) !== indexedInputs + 1) {
          modifiedEvent = Object.assign(Object.assign({}, modifiedEvent), { anonymous: true, inputs: [] });
        }
      }
      const argTopics = modifiedEvent.anonymous ? data.topics : ((_d = data.topics) !== null && _d !== void 0 ? _d : []).slice(1);
      return Object.assign(Object.assign({}, result), { returnValues: decodeLog([...(_e = modifiedEvent.inputs) !== null && _e !== void 0 ? _e : []], data.data, argTopics), event: modifiedEvent.name, signature: modifiedEvent.anonymous || !data.topics || data.topics.length === 0 || !data.topics[0] ? void 0 : data.topics[0], raw: {
        data: data.data,
        topics: data.topics
      } });
    };
    var __awaiter$e = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class SendTxHelper {
      constructor({ options, web3Context, promiEvent, returnFormat }) {
        this.options = {
          checkRevertBeforeSending: true
        };
        this.options = options;
        this.web3Context = web3Context;
        this.promiEvent = promiEvent;
        this.returnFormat = returnFormat;
      }
      getReceiptWithEvents(data) {
        var _a2, _b;
        const result = Object.assign({}, data !== null && data !== void 0 ? data : {});
        if (((_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.contractAbi) && result.logs && result.logs.length > 0) {
          result.events = {};
          for (const log of result.logs) {
            const event = decodeEventABI(ALL_EVENTS_ABI, log, (_b = this.options) === null || _b === void 0 ? void 0 : _b.contractAbi, this.returnFormat);
            if (event.event) {
              result.events[event.event] = event;
            }
          }
        }
        return result;
      }
      checkRevertBeforeSending(tx) {
        return __awaiter$e(this, void 0, void 0, function* () {
          if (this.options.checkRevertBeforeSending !== false) {
            let formatTx = tx;
            if (isNullish$1(tx.data) && isNullish$1(tx.input) && isNullish$1(tx.gas)) {
              formatTx = Object.assign(Object.assign({}, tx), { gas: 21e3 });
            }
            const reason = yield getRevertReason(this.web3Context, formatTx, this.options.contractAbi);
            if (reason !== void 0) {
              throw yield getTransactionError(this.web3Context, tx, void 0, void 0, this.options.contractAbi, reason);
            }
          }
        });
      }
      emitSending(tx) {
        if (this.promiEvent.listenerCount("sending") > 0) {
          this.promiEvent.emit("sending", tx);
        }
      }
      populateGasPrice({ transactionFormatted, transaction }) {
        var _a2;
        return __awaiter$e(this, void 0, void 0, function* () {
          let result = transactionFormatted;
          if (!this.web3Context.config.ignoreGasPricing && !((_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.ignoreGasPricing) && isNullish$1(transactionFormatted.gasPrice) && (isNullish$1(transaction.maxPriorityFeePerGas) || isNullish$1(transaction.maxFeePerGas))) {
            result = Object.assign(Object.assign({}, transactionFormatted), yield getTransactionGasPricing(transactionFormatted, this.web3Context, ETH_DATA_FORMAT));
          }
          return result;
        });
      }
      signAndSend({ wallet, tx }) {
        return __awaiter$e(this, void 0, void 0, function* () {
          if (wallet) {
            const signedTransaction = yield wallet.signTransaction(tx);
            return trySendTransaction(this.web3Context, () => __awaiter$e(this, void 0, void 0, function* () {
              return sendRawTransaction(this.web3Context.requestManager, signedTransaction.rawTransaction);
            }), signedTransaction.transactionHash);
          }
          return trySendTransaction(this.web3Context, () => __awaiter$e(this, void 0, void 0, function* () {
            return sendTransaction$3(this.web3Context.requestManager, tx);
          }));
        });
      }
      emitSent(tx) {
        if (this.promiEvent.listenerCount("sent") > 0) {
          this.promiEvent.emit("sent", tx);
        }
      }
      emitTransactionHash(hash2) {
        if (this.promiEvent.listenerCount("transactionHash") > 0) {
          this.promiEvent.emit("transactionHash", hash2);
        }
      }
      emitReceipt(receipt) {
        if (this.promiEvent.listenerCount("receipt") > 0) {
          this.promiEvent.emit(
            "receipt",
            // @ts-expect-error unknown type fix
            receipt
          );
        }
      }
      handleError({ error, tx }) {
        var _a2;
        return __awaiter$e(this, void 0, void 0, function* () {
          let _error = error;
          if (_error instanceof ContractExecutionError && this.web3Context.handleRevert) {
            _error = yield getTransactionError(this.web3Context, tx, void 0, void 0, (_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.contractAbi);
          }
          if ((_error instanceof InvalidResponseError || _error instanceof ContractExecutionError || _error instanceof TransactionRevertWithCustomError || _error instanceof TransactionRevertedWithoutReasonError || _error instanceof TransactionRevertInstructionError || _error instanceof TransactionPollingTimeoutError) && this.promiEvent.listenerCount("error") > 0) {
            this.promiEvent.emit("error", _error);
          }
          return _error;
        });
      }
      emitConfirmation({ receipt, transactionHash, customTransactionReceiptSchema }) {
        if (this.promiEvent.listenerCount("confirmation") > 0) {
          watchTransactionForConfirmations(this.web3Context, this.promiEvent, receipt, transactionHash, this.returnFormat, customTransactionReceiptSchema);
        }
      }
      handleResolve({ receipt, tx }) {
        var _a2, _b, _c;
        return __awaiter$e(this, void 0, void 0, function* () {
          if ((_a2 = this.options) === null || _a2 === void 0 ? void 0 : _a2.transactionResolver) {
            return (_b = this.options) === null || _b === void 0 ? void 0 : _b.transactionResolver(receipt);
          }
          if (receipt.status === BigInt(0)) {
            const error = yield getTransactionError(
              this.web3Context,
              tx,
              // @ts-expect-error unknown type fix
              receipt,
              void 0,
              (_c = this.options) === null || _c === void 0 ? void 0 : _c.contractAbi
            );
            if (this.promiEvent.listenerCount("error") > 0) {
              this.promiEvent.emit("error", error);
            }
            throw error;
          } else {
            return receipt;
          }
        });
      }
    }
    var __awaiter$d = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __rest = function(s, e) {
      var t2 = {};
      for (var p2 in s) if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
        t2[p2] = s[p2];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p2 = Object.getOwnPropertySymbols(s); i < p2.length; i++) {
          if (e.indexOf(p2[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i]))
            t2[p2[i]] = s[p2[i]];
        }
      return t2;
    };
    const isSyncing = (web3Context) => __awaiter$d(void 0, void 0, void 0, function* () {
      return getSyncing(web3Context.requestManager);
    });
    function getHashRate(web3Context, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const response = yield getHashRate$1(web3Context.requestManager);
        return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getGasPrice(web3Context, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const response = yield getGasPrice$1(web3Context.requestManager);
        return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getMaxPriorityFeePerGas(web3Context, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const response = yield getMaxPriorityFeePerGas$1(web3Context.requestManager);
        return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getBlockNumber(web3Context, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const response = yield getBlockNumber$1(web3Context.requestManager);
        return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getBalance(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
        const response = yield getBalance$1(web3Context.requestManager, address, blockNumberFormatted);
        return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getStorageAt(web3Context, address, storageSlot, blockNumber = web3Context.defaultBlock, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const storageSlotFormatted = format({ format: "uint" }, storageSlot, ETH_DATA_FORMAT);
        const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
        const response = yield getStorageAt$1(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);
        return format({ format: "bytes" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getCode(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
        const response = yield getCode$1(web3Context.requestManager, address, blockNumberFormatted);
        return format({ format: "bytes" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getBlock(web3Context, block = web3Context.defaultBlock, hydrated = false, returnFormat) {
      var _a2;
      return __awaiter$d(this, void 0, void 0, function* () {
        let response;
        if (isBytes$1(block)) {
          const blockHashFormatted = format({ format: "bytes32" }, block, ETH_DATA_FORMAT);
          response = yield getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);
        } else {
          const blockNumberFormatted = isBlockTag(block) ? block : format({ format: "uint" }, block, ETH_DATA_FORMAT);
          response = yield getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);
        }
        const res = format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
        if (!isNullish$1(res)) {
          const result = Object.assign(Object.assign({}, res), { transactions: (_a2 = res.transactions) !== null && _a2 !== void 0 ? _a2 : [] });
          return result;
        }
        return res;
      });
    }
    function getBlockTransactionCount(web3Context, block = web3Context.defaultBlock, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        let response;
        if (isBytes$1(block)) {
          const blockHashFormatted = format({ format: "bytes32" }, block, ETH_DATA_FORMAT);
          response = yield getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);
        } else {
          const blockNumberFormatted = isBlockTag(block) ? block : format({ format: "uint" }, block, ETH_DATA_FORMAT);
          response = yield getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);
        }
        return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getBlockUncleCount(web3Context, block = web3Context.defaultBlock, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        let response;
        if (isBytes$1(block)) {
          const blockHashFormatted = format({ format: "bytes32" }, block, ETH_DATA_FORMAT);
          response = yield getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);
        } else {
          const blockNumberFormatted = isBlockTag(block) ? block : format({ format: "uint" }, block, ETH_DATA_FORMAT);
          response = yield getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);
        }
        return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getUncle(web3Context, block = web3Context.defaultBlock, uncleIndex, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const uncleIndexFormatted = format({ format: "uint" }, uncleIndex, ETH_DATA_FORMAT);
        let response;
        if (isBytes$1(block)) {
          const blockHashFormatted = format({ format: "bytes32" }, block, ETH_DATA_FORMAT);
          response = yield getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);
        } else {
          const blockNumberFormatted = isBlockTag(block) ? block : format({ format: "uint" }, block, ETH_DATA_FORMAT);
          response = yield getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);
        }
        return format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getTransaction(web3Context, transactionHash, returnFormat = web3Context.defaultReturnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const transactionHashFormatted = format({ format: "bytes32" }, transactionHash, DEFAULT_RETURN_FORMAT);
        const response = yield getTransactionByHash(web3Context.requestManager, transactionHashFormatted);
        return isNullish$1(response) ? response : formatTransaction(response, returnFormat, {
          transactionSchema: web3Context.config.customTransactionSchema,
          fillInputAndData: true
        });
      });
    }
    function getPendingTransactions(web3Context, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const response = yield getPendingTransactions$1(web3Context.requestManager);
        return response.map((transaction) => formatTransaction(transaction, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {
          transactionSchema: web3Context.config.customTransactionSchema,
          fillInputAndData: true
        }));
      });
    }
    function getTransactionFromBlock(web3Context, block = web3Context.defaultBlock, transactionIndex, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const transactionIndexFormatted = format({ format: "uint" }, transactionIndex, ETH_DATA_FORMAT);
        let response;
        if (isBytes$1(block)) {
          const blockHashFormatted = format({ format: "bytes32" }, block, ETH_DATA_FORMAT);
          response = yield getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);
        } else {
          const blockNumberFormatted = isBlockTag(block) ? block : format({ format: "uint" }, block, ETH_DATA_FORMAT);
          response = yield getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);
        }
        return isNullish$1(response) ? response : formatTransaction(response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {
          transactionSchema: web3Context.config.customTransactionSchema,
          fillInputAndData: true
        });
      });
    }
    function getTransactionReceipt(web3Context, transactionHash, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const transactionHashFormatted = format({ format: "bytes32" }, transactionHash, DEFAULT_RETURN_FORMAT);
        let response;
        try {
          response = yield getTransactionReceipt$1(web3Context.requestManager, transactionHashFormatted);
        } catch (error) {
          if (typeof error === "object" && !isNullish$1(error) && "message" in error && error.message === "transaction indexing is in progress") {
            console.warn("Transaction indexing is in progress.");
          } else {
            throw error;
          }
        }
        return isNullish$1(response) ? response : format(transactionReceiptSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getTransactionCount(web3Context, address, blockNumber = web3Context.defaultBlock, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
        const response = yield getTransactionCount$1(web3Context.requestManager, address, blockNumberFormatted);
        return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function sendTransaction$1(web3Context, transactionObj, returnFormat, options = { checkRevertBeforeSending: true }, transactionMiddleware) {
      const promiEvent = new Web3PromiEvent((resolve, reject) => {
        setImmediate(() => {
          (() => __awaiter$d(this, void 0, void 0, function* () {
            const sendTxHelper = new SendTxHelper({
              web3Context,
              promiEvent,
              options,
              returnFormat
            });
            let transaction = Object.assign({}, transactionObj);
            if (!isNullish$1(transactionMiddleware)) {
              transaction = yield transactionMiddleware.processTransaction(transaction);
            }
            let transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), { from: getTransactionFromOrToAttr("from", web3Context, transaction), to: getTransactionFromOrToAttr("to", web3Context, transaction) }), ETH_DATA_FORMAT, {
              transactionSchema: web3Context.config.customTransactionSchema
            });
            try {
              transactionFormatted = yield sendTxHelper.populateGasPrice({
                transaction,
                transactionFormatted
              });
              yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);
              sendTxHelper.emitSending(transactionFormatted);
              let wallet;
              if (web3Context.wallet && !isNullish$1(transactionFormatted.from)) {
                wallet = web3Context.wallet.get(transactionFormatted.from);
              }
              const transactionHash = yield sendTxHelper.signAndSend({
                wallet,
                tx: transactionFormatted
              });
              const transactionHashFormatted = format({ format: "bytes32" }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
              sendTxHelper.emitSent(transactionFormatted);
              sendTxHelper.emitTransactionHash(transactionHashFormatted);
              const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
              const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));
              sendTxHelper.emitReceipt(transactionReceiptFormatted);
              resolve(yield sendTxHelper.handleResolve({
                receipt: transactionReceiptFormatted,
                tx: transactionFormatted
              }));
              sendTxHelper.emitConfirmation({
                receipt: transactionReceiptFormatted,
                transactionHash
              });
            } catch (error) {
              reject(yield sendTxHelper.handleError({
                error,
                tx: transactionFormatted
              }));
            }
          }))();
        });
      });
      return promiEvent;
    }
    function sendSignedTransaction(web3Context, signedTransaction, returnFormat, options = { checkRevertBeforeSending: true }) {
      const promiEvent = new Web3PromiEvent((resolve, reject) => {
        setImmediate(() => {
          (() => __awaiter$d(this, void 0, void 0, function* () {
            const sendTxHelper = new SendTxHelper({
              web3Context,
              promiEvent,
              options,
              returnFormat
            });
            const signedTransactionFormattedHex = format({ format: "bytes" }, signedTransaction, ETH_DATA_FORMAT);
            const unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes$2(signedTransactionFormattedHex)));
            const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {
              // Some providers will default `from` to address(0) causing the error
              // reported from `eth_call` to not be the reason the user's tx failed
              // e.g. `eth_call` will return an Out of Gas error for a failed
              // smart contract execution contract, because the sender, address(0),
              // has no balance to pay for the gas of the transaction execution
              from: unSerializedTransaction.getSenderAddress().toString()
            });
            try {
              const { v: v2, r: r2, s } = unSerializedTransactionWithFrom, txWithoutSigParams = __rest(unSerializedTransactionWithFrom, ["v", "r", "s"]);
              yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);
              sendTxHelper.emitSending(signedTransactionFormattedHex);
              const transactionHash = yield trySendTransaction(web3Context, () => __awaiter$d(this, void 0, void 0, function* () {
                return sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);
              }));
              sendTxHelper.emitSent(signedTransactionFormattedHex);
              const transactionHashFormatted = format({ format: "bytes32" }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
              sendTxHelper.emitTransactionHash(transactionHashFormatted);
              const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
              const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));
              sendTxHelper.emitReceipt(transactionReceiptFormatted);
              resolve(yield sendTxHelper.handleResolve({
                receipt: transactionReceiptFormatted,
                tx: unSerializedTransactionWithFrom
              }));
              sendTxHelper.emitConfirmation({
                receipt: transactionReceiptFormatted,
                transactionHash
              });
            } catch (error) {
              reject(yield sendTxHelper.handleError({
                error,
                tx: unSerializedTransactionWithFrom
              }));
            }
          }))();
        });
      });
      return promiEvent;
    }
    function sign$1(web3Context, message, addressOrIndex, returnFormat = web3Context.defaultReturnFormat) {
      var _a2;
      return __awaiter$d(this, void 0, void 0, function* () {
        const messageFormatted = format({ format: "bytes" }, message, DEFAULT_RETURN_FORMAT);
        if ((_a2 = web3Context.wallet) === null || _a2 === void 0 ? void 0 : _a2.get(addressOrIndex)) {
          const wallet = web3Context.wallet.get(addressOrIndex);
          const signed2 = wallet.sign(messageFormatted);
          return format(SignatureObjectSchema, signed2, returnFormat);
        }
        if (typeof addressOrIndex === "number") {
          throw new SignatureError(message, 'RPC method "eth_sign" does not support index signatures');
        }
        const response = yield sign$3(web3Context.requestManager, addressOrIndex, messageFormatted);
        return format({ format: "bytes" }, response, returnFormat);
      });
    }
    function signTransaction$1(web3Context, transaction, returnFormat = web3Context.defaultReturnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const response = yield signTransaction$3(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {
          transactionSchema: web3Context.config.customTransactionSchema
        }));
        return isString(response) ? decodeSignedTransaction(response, returnFormat, {
          fillInputAndData: true
        }) : {
          raw: format({ format: "bytes" }, response.raw, returnFormat),
          tx: formatTransaction(response.tx, returnFormat, {
            transactionSchema: web3Context.config.customTransactionSchema,
            fillInputAndData: true
          })
        };
      });
    }
    function call(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat = web3Context.defaultReturnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
        const response = yield call$1(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {
          transactionSchema: web3Context.config.customTransactionSchema
        }), blockNumberFormatted);
        return format({ format: "bytes" }, response, returnFormat);
      });
    }
    function estimateGas(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT, {
          transactionSchema: web3Context.config.customTransactionSchema
        });
        const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
        const response = yield estimateGas$1(web3Context.requestManager, transactionFormatted, blockNumberFormatted);
        return format({ format: "uint" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getLogs(web3Context, filter, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        let { toBlock, fromBlock } = filter;
        if (!isNullish$1(toBlock)) {
          if (typeof toBlock === "number" || typeof toBlock === "bigint") {
            toBlock = numberToHex$1(toBlock);
          }
        }
        if (!isNullish$1(fromBlock)) {
          if (typeof fromBlock === "number" || typeof fromBlock === "bigint") {
            fromBlock = numberToHex$1(fromBlock);
          }
        }
        const formattedFilter = Object.assign(Object.assign({}, filter), { fromBlock, toBlock });
        const response = yield getLogs$1(web3Context.requestManager, formattedFilter);
        const result = response.map((res) => {
          if (typeof res === "string") {
            return res;
          }
          return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
        });
        return result;
      });
    }
    function getChainId(web3Context, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const response = yield getChainId$1(web3Context.requestManager);
        return format(
          { format: "uint" },
          // Response is number in hex formatted string
          response,
          returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat
        );
      });
    }
    function getProof(web3Context, address, storageKeys, blockNumber = web3Context.defaultBlock, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const storageKeysFormatted = storageKeys.map((storageKey) => format({ format: "bytes" }, storageKey, ETH_DATA_FORMAT));
        const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
        const response = yield getProof$1(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);
        return format(accountSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function getFeeHistory(web3Context, blockCount, newestBlock = web3Context.defaultBlock, rewardPercentiles, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const blockCountFormatted = format({ format: "uint" }, blockCount, ETH_DATA_FORMAT);
        const newestBlockFormatted = isBlockTag(newestBlock) ? newestBlock : format({ format: "uint" }, newestBlock, ETH_DATA_FORMAT);
        const rewardPercentilesFormatted = format({
          type: "array",
          items: {
            format: "uint"
          }
        }, rewardPercentiles, NUMBER_DATA_FORMAT);
        const response = yield getFeeHistory$1(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);
        return format(feeHistorySchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function createAccessList(web3Context, transaction, blockNumber = web3Context.defaultBlock, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({ format: "uint" }, blockNumber, ETH_DATA_FORMAT);
        const response = yield createAccessList$1(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {
          transactionSchema: web3Context.config.customTransactionSchema
        }), blockNumberFormatted);
        return format(accessListResultSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {
      return __awaiter$d(this, void 0, void 0, function* () {
        const response = yield signTypedData$1(web3Context.requestManager, address, typedData, useLegacy);
        return format({ format: "bytes" }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);
      });
    }
    let LogsSubscription$1 = class LogsSubscription extends Web3Subscription {
      _buildSubscriptionParams() {
        return ["logs", this.args];
      }
      formatSubscriptionResult(data) {
        return format(logSchema, data, super.returnFormat);
      }
    };
    class NewPendingTransactionsSubscription extends Web3Subscription {
      // eslint-disable-next-line
      _buildSubscriptionParams() {
        return ["newPendingTransactions"];
      }
      formatSubscriptionResult(data) {
        return format({ format: "string" }, data, super.returnFormat);
      }
    }
    class NewHeadsSubscription extends Web3Subscription {
      // eslint-disable-next-line
      _buildSubscriptionParams() {
        return ["newHeads"];
      }
      formatSubscriptionResult(data) {
        return format(blockHeaderSchema, data, super.returnFormat);
      }
    }
    class SyncingSubscription extends Web3Subscription {
      // eslint-disable-next-line
      _buildSubscriptionParams() {
        return ["syncing"];
      }
      _processSubscriptionResult(data) {
        if (typeof data === "boolean") {
          this.emit("changed", data);
        } else {
          const mappedData = Object.fromEntries(Object.entries((data === null || data === void 0 ? void 0 : data.status) || data).map(([key, value]) => [
            key.charAt(0).toLowerCase() + key.substring(1),
            value
          ]));
          this.emit("changed", data.syncing);
          this.emit("data", format(syncSchema, mappedData, super.returnFormat));
        }
      }
    }
    var __awaiter$c = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const registeredSubscriptions = {
      logs: LogsSubscription$1,
      newPendingTransactions: NewPendingTransactionsSubscription,
      newHeads: NewHeadsSubscription,
      syncing: SyncingSubscription,
      pendingTransactions: NewPendingTransactionsSubscription,
      newBlockHeaders: NewHeadsSubscription
      // the same as newHeads. just for support API like in version 1.x
    };
    class Web3Eth extends Web3Context {
      constructor(providerOrContext) {
        if (typeof providerOrContext === "string" || isSupportedProvider(providerOrContext)) {
          super({
            provider: providerOrContext,
            registeredSubscriptions
          });
          return;
        }
        if (providerOrContext.registeredSubscriptions) {
          super(providerOrContext);
          return;
        }
        super(Object.assign(Object.assign({}, providerOrContext), { registeredSubscriptions }));
        this.getFeeData = this.calculateFeeData;
      }
      setTransactionMiddleware(transactionMiddleware) {
        this.transactionMiddleware = transactionMiddleware;
      }
      getTransactionMiddleware() {
        return this.transactionMiddleware;
      }
      /**
       * @returns Returns the ethereum protocol version of the node.
       *
       * ```ts
       * web3.eth.getProtocolVersion().then(console.log);
       * > "63"
       * ```
       */
      getProtocolVersion() {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getProtocolVersion(this.requestManager);
        });
      }
      // TODO Add returnFormat parameter
      /**
       * Checks if the node is currently syncing.
       *
       * @returns Either a {@link SyncingStatusAPI}, or `false`.
       *
       * ```ts
       * web3.eth.isSyncing().then(console.log);
       * > {
       *     startingBlock: 100,
       *     currentBlock: 312,
       *     highestBlock: 512,
       *     knownStates: 234566,
       *     pulledStates: 123455
       * }
       * ```
       */
      isSyncing() {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getSyncing(this.requestManager);
        });
      }
      // TODO consider adding returnFormat parameter (to format address as bytes)
      /**
       * @returns Returns the coinbase address to which mining rewards will go.
       *
       * ```ts
       * web3.eth.getCoinbase().then(console.log);
       * > "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe"
       * ```
       */
      getCoinbase() {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getCoinbase(this.requestManager);
        });
      }
      /**
       * Checks whether the node is mining or not.
       *
       * @returns `true` if the node is mining, otherwise `false`.
       *
       * ```ts
       * web3.eth.isMining().then(console.log);
       * > true
       * ```
       */
      isMining() {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getMining(this.requestManager);
        });
      }
      /**
       * @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.
       *
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The number of hashes per second that the node is mining with.
       *
       * ```ts
       * web3.eth.getHashrate().then(console.log);
       * > 493736n
       *
       * web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x788a8"
       * ```
       */
      getHashrate(returnFormat) {
        var _a2;
        if (returnFormat === void 0) {
          returnFormat = (_a2 = this.defaultReturnFormat) !== null && _a2 !== void 0 ? _a2 : DEFAULT_RETURN_FORMAT;
        }
        return __awaiter$c(this, void 0, void 0, function* () {
          return this.getHashRate(returnFormat);
        });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The number of hashes per second that the node is mining with.
       *
       * ```ts
       * web3.eth.getHashRate().then(console.log);
       * > 493736n
       *
       * web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x788a8"
       * ```
       */
      getHashRate(returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getHashRate(this, returnFormat);
        });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The gas price determined by the last few blocks median gas price.
       *
       * ```ts
       * web3.eth.getGasPrice().then(console.log);
       * > 20000000000n
       *
       * web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x4a817c800"
       * ```
       */
      getGasPrice(returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getGasPrice(this, returnFormat);
        });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns the current maxPriorityFeePerGas per gas in wei.
       *
       * ```ts
       * web3.eth.getMaxPriorityFeePerGas().then(console.log);
       * > 20000000000n
       *
       * web3.eth.getMaxPriorityFeePerGas({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0x4a817c800"
       * ```
       */
      getMaxPriorityFeePerGas(returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getMaxPriorityFeePerGas(this, returnFormat);
        });
      }
      /**
       * Calculates the current Fee Data.
       * If the node supports EIP-1559, then `baseFeePerGas` and `maxPriorityFeePerGas` will be returned along with the calculated `maxFeePerGas` value.
       * `maxFeePerGas` is calculated as `baseFeePerGas` * `baseFeePerGasFactor` + `maxPriorityFeePerGas`.
       * If the node does not support EIP-1559, then the `gasPrice` will be returned and the other values will be undefined.
       *
       * @param baseFeePerGasFactor (optional) The factor to multiply the `baseFeePerGas` with when calculating `maxFeePerGas`, if the node supports EIP-1559. The default value is 2.
       * @param alternativeMaxPriorityFeePerGas (optional) The alternative `maxPriorityFeePerGas` to use when calculating `maxFeePerGas`, if the node supports EIP-1559, but does not support the method `eth_maxPriorityFeePerGas`. The default value is 1 gwei.
       * @returns The current fee data.
       *
       * ```ts
       * web3.eth.calculateFeeData().then(console.log);
       * > {
       *     gasPrice: 20000000000n,
       *     maxFeePerGas: 60000000000n,
       *     maxPriorityFeePerGas: 20000000000n,
       *     baseFeePerGas: 20000000000n
       * }
       *
       * web3.eth.calculateFeeData(1n).then(console.log);
       * > {
       *     gasPrice: 20000000000n,
       *     maxFeePerGas: 40000000000n,
       *     maxPriorityFeePerGas: 20000000000n,
       *     baseFeePerGas: 20000000000n
       * }
       *
       * web3.eth.calculateFeeData(3n).then(console.log);
       * > {
       *     gasPrice: 20000000000n,
       *     maxFeePerGas: 80000000000n,
       *     maxPriorityFeePerGas: 20000000000n,
       *     baseFeePerGas: 20000000000n
       * }
       * ```
       */
      calculateFeeData(baseFeePerGasFactor = BigInt(2), alternativeMaxPriorityFeePerGas = ethUnitMap.Gwei) {
        var _a2;
        return __awaiter$c(this, void 0, void 0, function* () {
          const block = yield this.getBlock(void 0, false);
          const baseFeePerGas = (_a2 = block === null || block === void 0 ? void 0 : block.baseFeePerGas) !== null && _a2 !== void 0 ? _a2 : void 0;
          let gasPrice;
          try {
            gasPrice = yield this.getGasPrice();
          } catch (error) {
          }
          let maxPriorityFeePerGas;
          try {
            maxPriorityFeePerGas = yield this.getMaxPriorityFeePerGas();
          } catch (error) {
          }
          let maxFeePerGas;
          if (baseFeePerGas) {
            maxPriorityFeePerGas = maxPriorityFeePerGas !== null && maxPriorityFeePerGas !== void 0 ? maxPriorityFeePerGas : alternativeMaxPriorityFeePerGas;
            maxFeePerGas = baseFeePerGas * baseFeePerGasFactor + maxPriorityFeePerGas;
          }
          return { gasPrice, maxFeePerGas, maxPriorityFeePerGas, baseFeePerGas };
        });
      }
      /**
       * @returns A list of accounts the node controls (addresses are checksummed).
       *
       * ```ts
       * web3.eth.getAccounts().then(console.log);
       * > ["0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe", "0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf"]
       * ```
       */
      getAccounts() {
        var _a2;
        return __awaiter$c(this, void 0, void 0, function* () {
          const hexAddresses = (_a2 = yield getAccounts$2(this.requestManager)) !== null && _a2 !== void 0 ? _a2 : [];
          return hexAddresses.map((address) => toChecksumAddress(address));
        });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The current block number.
       *
       * ```ts
       * web3.eth.getBlockNumber().then(console.log);
       * > 2744n
       *
       * web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);
       * > "0xab8"
       * ```
       */
      getBlockNumber(returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getBlockNumber(this, returnFormat);
        });
      }
      /**
       * Get the balance of an address at a given block.
       *
       * @param address The address to get the balance of.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The current balance for the given address in `wei`.
       *
       * ```ts
       * web3.eth.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
       * > 1000000000000n
       *
       * web3.eth.getBalance("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
       * > "0xe8d4a51000"
       * ```
       */
      getBalance(address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getBalance(this, address, blockNumber, returnFormat);
        });
      }
      /**
       * Get the storage at a specific position of an address.
       *
       * @param address The address to get the storage from.
       * @param storageSlot The index position of the storage.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The value in storage at the given position.
       *
       * ```ts
       * web3.eth.getStorageAt("0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234", 0).then(console.log);
       * > "0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"
       *
       * web3.eth.getStorageAt(
       *      "0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234",
       *      0,
       *      undefined,
       *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }
       * ).then(console.log);
       * > Uint8Array(31) [
       *       3, 52,  86, 115,  33,  35, 255, 255,
       *       35, 66,  52,  45, 209,  35,  66,  67,
       *       67, 36,  35,  66,  52, 253,  35,  79,
       *       210, 63, 212, 242,  61,  66,  52
       *    ]
       * ```
       */
      getStorageAt(address, storageSlot, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getStorageAt(this, address, storageSlot, blockNumber, returnFormat);
        });
      }
      /**
       * Get the code at a specific address.
       *
       * @param address The address to get the code from.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.
       *
       * ```ts
       * web3.eth.getCode("0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234").then(console.log);
       * > "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
       *
       * web3.eth.getCode(
       *      "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
       *      undefined,
       *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }
       * ).then(console.log);
       * > Uint8Array(50) [
       *   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,
       *   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,
       *   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,
       *   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,
       *   144, 80, 145, 144,  80, 86
       * ]
       * ```
       */
      getCode(address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getCode(this, address, blockNumber, returnFormat);
        });
      }
      /**
       * Retrieves a {@link Block} matching the provided block number, block hash or block tag.
       *
       * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
       * @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).
       * @returns A {@link Block} object matching the provided block number or block hash.
       *
       * ```ts
       * web3.eth.getBlock(0).then(console.log);
       * > {
       *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
       *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
       *    miner: '0x0000000000000000000000000000000000000000',
       *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
       *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    logsBloom: '0x
       *    difficulty: 1n,
       *    number: 0n,
       *    gasLimit: 30000000n,
       *    gasUsed: 0n,
       *    timestamp: 1658281638n,
       *    extraData: '0x',
       *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    nonce: 0n,
       *    totalDifficulty: 1n,
       *    baseFeePerGas: 1000000000n,
       *    size: 514n,
       *    transactions: [],
       *    uncles: []
       *  }
       *
       * web3.eth.getBlock(
       *      "0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d",
       *      false,
       *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > {
       *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
       *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
       *    miner: '0x0000000000000000000000000000000000000000',
       *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
       *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
       *    difficulty: 1,
       *    number: 0,
       *    gasLimit: 30000000,
       *    gasUsed: 0,
       *    timestamp: 1658281638,
       *    extraData: '0x',
       *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    nonce: 0,
       *    totalDifficulty: 1,
       *    baseFeePerGas: 1000000000,
       *    size: 514,
       *    transactions: [],
       *    uncles: []
       *  }
       * ```
       */
      getBlock(block = this.defaultBlock, hydrated = false, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getBlock(this, block, hydrated, returnFormat);
        });
      }
      /**
       * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The number of transactions in the provided block.
       *
       * ```ts
       * web3.eth.getBlockTransactionCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
       * > 1n
       *
       * web3.eth.getBlockTransactionCount(
       *     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > 1
       * ```
       */
      getBlockTransactionCount(block = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getBlockTransactionCount(this, block, returnFormat);
        });
      }
      /**
       * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.
       *
       * ```ts
       * web3.eth.getBlockUncleCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
       * > 1n
       *
       * web3.eth.getBlockUncleCount(
       *     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > 1
       * ```
       */
      getBlockUncleCount(block = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getBlockUncleCount(this, block, returnFormat);
        });
      }
      /**
       *
       * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
       * @param uncleIndex The index position of the uncle.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.
       *
       * ```ts
       * web3.eth.getUncle(0, 1).then(console.log);
       * > {
       *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
       *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
       *    miner: '0x0000000000000000000000000000000000000000',
       *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
       *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    logsBloom: '0x
       *    difficulty: 1n,
       *    number: 0n,
       *    gasLimit: 30000000n,
       *    gasUsed: 0n,
       *    timestamp: 1658281638n,
       *    extraData: '0x',
       *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    nonce: 0n,
       *    totalDifficulty: 1n,
       *    baseFeePerGas: 1000000000n,
       *    size: 514n,
       *    transactions: [],
       *    uncles: []
       *  }
       *
       * web3.eth.getUncle(
       *      "0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d",
       *      1,
       *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > {
       *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',
       *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
       *    miner: '0x0000000000000000000000000000000000000000',
       *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',
       *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',
       *    logsBloom: '0x
       *    difficulty: 1,
       *    number: 0,
       *    gasLimit: 30000000,
       *    gasUsed: 0,
       *    timestamp: 1658281638,
       *    extraData: '0x',
       *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *    nonce: 0,
       *    totalDifficulty: 1,
       *    baseFeePerGas: 1000000000,
       *    size: 514,
       *    transactions: [],
       *    uncles: []
       *  }
       * ```
       */
      getUncle(block = this.defaultBlock, uncleIndex, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getUncle(this, block, uncleIndex, returnFormat);
        });
      }
      /**
       * @param transactionHash The hash of the desired transaction.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The desired transaction object.
       *
       * ```ts
       * web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);
       * {
       *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *    type: 0n,
       *    nonce: 0n,
       *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
       *    blockNumber: 1n,
       *    transactionIndex: 0n,
       *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *    value: 1n,
       *    gas: 90000n,
       *    gasPrice: 2000000000n,
       *    input: '0x',
       *    v: 2709n,
       *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *  }
       *
       * web3.eth.getTransaction(
       *     web3.utils.hexToBytes("0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"),
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * {
       *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *    type: 0,
       *    nonce: 0,
       *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
       *    blockNumber: 1,
       *    transactionIndex: 0,
       *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *    value: 1,
       *    gas: 90000,
       *    gasPrice: 2000000000,
       *    input: '0x',
       *    v: 2709,
       *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *  }
       * ```
       */
      getTransaction(transactionHash, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          const response = yield getTransaction(this, transactionHash, returnFormat);
          if (!response)
            throw new TransactionNotFound();
          return response;
        });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns A list of pending transactions.
       *
       * ```ts
       * web3.eth.getPendingTransactions().then(console.log);
       * > [
       *      {
       *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *          type: 0n,
       *          nonce: 0n,
       *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *          blockNumber: null,
       *          transactionIndex: 0n,
       *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *          value: 1n,
       *          gas: 90000n,
       *          gasPrice: 2000000000n,
       *          input: '0x',
       *          v: 2709n,
       *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *      },
       *      {
       *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
       *          type: 0n,
       *          nonce: 1n,
       *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *          blockNumber: null,
       *          transactionIndex: 0n,
       *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *          value: 1n,
       *          gas: 90000n,
       *          gasPrice: 2000000000n,
       *          input: '0x',
       *          v: 2710n,
       *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',
       *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'
       *      }
       *   ]
       *
       * * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
       * > [
       *      {
       *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *          type: 0,
       *          nonce: 0,
       *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *          blockNumber: null,
       *          transactionIndex: 0,
       *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *          value: 1,
       *          gas: 90000,
       *          gasPrice: 2000000000,
       *          input: '0x',
       *          v: 2709,
       *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *      },
       *      {
       *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
       *          type: 0,
       *          nonce: 1,
       *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',
       *          blockNumber: null,
       *          transactionIndex: 0,
       *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *          value: 1,
       *          gas: 90000,
       *          gasPrice: 2000000000,
       *          input: '0x',
       *          v: 2710,
       *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',
       *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'
       *      }
       *   ]
       * ```
       */
      getPendingTransactions(returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getPendingTransactions(this, returnFormat);
        });
      }
      /**
       * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.
       * @param transactionIndex The index position of the transaction.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The desired transaction object.
       *
       * ```ts
       * web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);
       * {
       *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *    type: 0n,
       *    nonce: 0n,
       *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
       *    blockNumber: 1n,
       *    transactionIndex: 0n,
       *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *    value: 1n,
       *    gas: 90000n,
       *    gasPrice: 2000000000n,
       *    input: '0x',
       *    v: 2709n,
       *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *  }
       *
       * web3.eth.getTransactionFromBlock(
       *     hexToBytes("0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"),
       *     0,
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * {
       *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',
       *    type: 0,
       *    nonce: 0,
       *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',
       *    blockNumber: 1,
       *    transactionIndex: 0,
       *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *    value: 1,
       *    gas: 90000,
       *    gasPrice: 2000000000,
       *    input: '0x',
       *    v: 2709,
       *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',
       *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'
       *  }
       * ```
       */
      getTransactionFromBlock(block = this.defaultBlock, transactionIndex, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getTransactionFromBlock(this, block, transactionIndex, returnFormat);
        });
      }
      /**
       * @param transactionHash Hash of the transaction to retrieve the receipt for.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The desired {@link TransactionReceipt} object.
       *
       * ```ts
       * web3.eth.getTransactionReceipt("0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f").then(console.log);
       * > {
       *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
       *      transactionIndex: 0n,
       *      blockNumber: 2n,
       *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
       *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *      cumulativeGasUsed: 21000n,
       *      gasUsed: 21000n,
       *      logs: [],
       *      logsBloom: '0x
       *      status: 1n,
       *      effectiveGasPrice: 2000000000n,
       *      type: 0n
       *  }
       *
       * web3.eth.getTransactionReceipt(
       *      "0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f",
       *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > {
       *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
       *      transactionIndex: 0,
       *      blockNumber: 2,
       *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
       *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *      cumulativeGasUsed: 21000,
       *      gasUsed: 21000,
       *      logs: [],
       *      logsBloom: '0x
       *      status: 1,
       *      effectiveGasPrice: 2000000000,
       *      type: 0n
       *  }
       * ```
       */
      getTransactionReceipt(transactionHash, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          const response = yield getTransactionReceipt(this, transactionHash, returnFormat);
          if (!response)
            throw new TransactionNotFound();
          return response;
        });
      }
      /**
       * @param address The address to get the number of transactions for.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The number of transactions sent from the provided address.
       *
       * ```ts
       * web3.eth.getTransactionCount("0x407d73d8a49eeb85d32cf465507dd71d507100c1").then(console.log);
       * > 1n
       *
       * web3.eth.getTransactionCount(
       *     "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
       *     undefined,
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > 1
       * ```
       */
      getTransactionCount(address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getTransactionCount(this, address, blockNumber, returnFormat);
        });
      }
      /**
       * @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @param options A configuration object used to change the behavior of the `sendTransaction` method.
       * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.
       * ```ts
       * const transaction = {
       *   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
       *   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
       *   value: '0x1'
       * }
       *
       * const transactionHash = await web3.eth.sendTransaction(transaction);
       * console.log(transactionHash);
       * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f
       *
       * web3.eth.sendTransaction(transaction).then(console.log);
       * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f
       *
       * web3.eth.sendTransaction(transaction).catch(console.log);
       * > <Some TransactionError>
       *
       * // Example using options.ignoreGasPricing = true
       * web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);
       * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f
       * ```
       *
       *
       * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:
       * - `sending`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));
       * > {
       *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
       *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
       *    value: '0x1',
       *    gasPrice: '0x77359400',
       *    maxPriorityFeePerGas: undefined,
       *    maxFeePerGas: undefined
       * }
       * ```
       * - `sent`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));
       * > {
       *    from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',
       *    to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',
       *    value: '0x1',
       *    gasPrice: '0x77359400',
       *    maxPriorityFeePerGas: undefined,
       *    maxFeePerGas: undefined
       * }
       * ```
       * - `transactionHash`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));
       * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f
       * ```
       * - `receipt`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));
       * > {
       *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',
       *      transactionIndex: 0n,
       *      blockNumber: 2n,
       *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',
       *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *      cumulativeGasUsed: 21000n,
       *      gasUsed: 21000n,
       *      logs: [],
       *      logsBloom: '0x
       *      status: 1n,
       *      effectiveGasPrice: 2000000000n,
       *      type: 0n
       * }
       * ```
       * - `confirmation`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));
       * > {
       *     confirmations: 1n,
       *     receipt: {
       *         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',
       *         transactionIndex: 0n,
       *         blockNumber: 5n,
       *         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',
       *         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',
       *         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',
       *         cumulativeGasUsed: 21000n,
       *         gasUsed: 21000n,
       *         logs: [],
       *         logsBloom: '0x
       *         status: 1n,
       *         effectiveGasPrice: 2000000000n,
       *         type: 0n
       *     },
       *     latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'
       * }
       * ```
       * - `error`
       * ```ts
       * web3.eth.sendTransaction(transaction).on('error', error => console.log);
       * > <Some TransactionError>
       * ```
       */
      sendTransaction(transaction, returnFormat = this.defaultReturnFormat, options) {
        return sendTransaction$1(this, transaction, returnFormat, options, this.transactionMiddleware);
      }
      /**
       * @param transaction Signed transaction in one of the valid {@link Bytes} format.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @param options A configuration object used to change the behavior of the method
       * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.
       * ```ts
       * const signedTransaction = "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
       *
       * const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);
       * console.log(transactionHash);
       * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
       *
       * web3.eth.sendSignedTransaction(signedTransaction).then(console.log);
       * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
       *
       * web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);
       * > <Some TransactionError>
       * ```
       *
       *
       * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:
       * - `sending`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));
       * > "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
       * ```
       * - `sent`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));
       * > "0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f"
       * ```
       * - `transactionHash`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));
       * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700
       * ```
       * - `receipt`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));
       * > {
       *      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',
       *      blockNumber: 1n,
       *      cumulativeGasUsed: 21000n,
       *      effectiveGasPrice: 1000000001n,
       *      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *      gasUsed: 21000n,
       *      logs: [],
       *      logsBloom: '0x
       *      status: 1n,
       *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',
       *      transactionIndex: 0n,
       *      type: 0n
       * }
       * ```
       * - `confirmation`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));
       * > {
       *     confirmations: 1n,
       *     receipt: {
       *          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',
       *          blockNumber: 1n,
       *          cumulativeGasUsed: 21000n,
       *          effectiveGasPrice: 1000000001n,
       *          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *          gasUsed: 21000n,
       *          logs: [],
       *          logsBloom: '0x
       *          status: 1n,
       *          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',
       *          transactionIndex: 0n,
       *          type: 0n
       *     },
       *     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'
       * }
       * ```
       * - `error`
       * ```ts
       * web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));
       * > <Some TransactionError>
       * ```
       */
      sendSignedTransaction(transaction, returnFormat = this.defaultReturnFormat, options) {
        return sendSignedTransaction(this, transaction, returnFormat, options);
      }
      /**
       * @param message Data to sign in one of the valid {@link Bytes} format.
       * @param address Address to sign data with, can be an address or the index of a local wallet.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns The signed `message`.
       *
       * ```ts
       * // Using an unlocked account managed by connected RPC client
       * web3.eth.sign("0x48656c6c6f20776f726c64", "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe").then(console.log);
       * > "0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"
       *
       * // Using an unlocked account managed by connected RPC client
       * web3.eth.sign("0x48656c6c6f20776f726c64", "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);
       * > Uint8Array(65) [
       *    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,
       *    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,
       *   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,
       *    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,
       *    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,
       *   206, 115, 116, 101, 197, 207, 208,  75, 228,   0
       * ]
       * ```
       *
       * // Using an indexed account managed by local Web3 wallet
       * web3.eth.sign("0x48656c6c6f20776f726c64", 0).then(console.log);
       * > "0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400"
       */
      sign(message, addressOrIndex, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return sign$1(this, message, addressOrIndex, returnFormat);
        });
      }
      /**
       * @param transaction The transaction object to sign.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.
       * @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).
       *
       * ```ts
       * const transaction = {
       *      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
       *      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
       *      value: '0x1',
       *      gas: '21000',
       *      gasPrice: await web3Eth.getGasPrice(),
       *      nonce: '0x1',
       *      type: '0x0'
       * }
       *
       * web3.eth.signTransaction(transaction).then(console.log);
       * > {
       *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
       *   tx: {
       *      type: 0n,
       *      nonce: 1n,
       *      gasPrice: 1000000001n,
       *      gas: 21000n,
       *      value: 1n,
       *      v: 2710n,
       *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',
       *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
       *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *      data: '0x'
       *   }
       * }
       *
       * web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
       * > {
       *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
       *   tx: {
       *      type: 0,
       *      nonce: 1,
       *      gasPrice: 1000000001,
       *      gas: 21000,
       *      value: 1,
       *      v: 2710,
       *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',
       *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',
       *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',
       *      data: '0x'
       *   }
       * }
       * ```
       */
      signTransaction(transaction, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return signTransaction$1(this, transaction, returnFormat);
        });
      }
      // TODO Decide what to do with transaction.to
      // https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076
      /**
       * Executes a message call within the EVM without creating a transaction.
       * It does not publish anything to the blockchain and does not consume any gas.
       *
       * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns The returned data of the call, e.g. a smart contract function's return value.
       */
      call(transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return call(this, transaction, blockNumber, returnFormat);
        });
      }
      /**
       * Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.
       * The transaction will not be added to the blockchain, and actual gas usage can vary when interacting
       * with a contract as a result of updating the contract's state.
       *
       * @param transaction The {@link Transaction} object to estimate the gas for.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns The used gas for the simulated transaction execution.
       *
       * ```ts
       * const transaction = {
       *       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
       *       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',
       *       value: '0x1',
       *       nonce: '0x1',
       *       type: '0x0'
       * }
       *
       * web3.eth.estimateGas(transaction).then(console.log);
       * > 21000n
       *
       * web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
       * > 21000
       * ```
       */
      estimateGas(transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return estimateGas(this, transaction, blockNumber, returnFormat);
        });
      }
      /**
       * Gets past logs, matching the provided `filter`.
       *
       * @param filter A {@link Filter} object containing the properties for the desired logs.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.
       *
       * ```ts
       * web3.eth.getPastLogs({
       *      address: "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe",
       *      topics: ["0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"]
       *  }).then(console.log);
       * > [{
       *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
       *       logIndex: 0n,
       *       transactionIndex: 0n,
       *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
       *       blockNumber: 1234n,
       *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
       *   },
       *   {...}]
       *
       * web3.eth.getPastLogs(
       *     {
       *       address: "0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe",
       *       topics: ["0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234"]
       *     },
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > [{
       *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']
       *       logIndex: 0,
       *       transactionIndex: 0,
       *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',
       *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',
       *       blockNumber: 1234,
       *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'
       *   },
       *   {...}]
       * ```
       */
      getPastLogs(filter, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getLogs(this, filter, returnFormat);
        });
      }
      /**
       * Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').
       *
       * @returns The mining work as an array of strings with the following structure:
       *
       * String 32 Bytes - at index 0: current block header pow-hash
       * String 32 Bytes - at index 1: the seed hash used for the DAG.
       * String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.
       *
       * ```ts
       * web3.eth.getWork().then(console.log);
       * > [
       *     "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
       *     "0x5EED00000000000000000000000000005EED0000000000000000000000000000",
       *     "0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000"
       * ]
       * ```
       */
      getWork() {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getWork(this.requestManager);
        });
      }
      /**
       * Used for submitting a proof-of-work solution.
       *
       * @param nonce The nonce found (8 bytes).
       * @param hash  The header’s pow-hash (32 bytes).
       * @param digest The mix digest (32 bytes).
       * @returns Returns `true` if the provided solution is valid, otherwise `false`.
       *
       * ```ts
       * web3.eth.submitWork([
       *     "0x0000000000000001",
       *     "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef",
       *     "0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000"
       * ]).then(console.log);
       * > true
       * ```
       */
      submitWork(nonce, hash2, digest) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return submitWork(this.requestManager, nonce, hash2, digest);
        });
      }
      // TODO - Format addresses
      /**
       * This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)
       * This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.
       * It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).
       * For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.
       *
       * @returns An array of enabled accounts.
       *
       * ```ts
       * web3.eth.requestAccounts().then(console.log);
       * > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']
       * ```
       */
      requestAccounts() {
        return __awaiter$c(this, void 0, void 0, function* () {
          return requestAccounts(this.requestManager);
        });
      }
      /**
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).
       *
       * ```ts
       * web3.eth.getChainId().then(console.log);
       * > 61n
       *
       * web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
       * > 61
       * ```
       */
      getChainId(returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getChainId(this, returnFormat);
        });
      }
      /**
       * @returns The current client version.
       *
       * ```ts
       * web3.eth.getNodeInfo().then(console.log);
       * > "Mist/v0.9.3/darwin/go1.4.1"
       * ```
       */
      getNodeInfo() {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getNodeInfo(this.requestManager);
        });
      }
      /**
       * @param address The Address of the account or contract.
       * @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).
       *
       * ```ts
       * web3.eth.getProof(
       *     "0x1234567890123456789012345678901234567890",
       *     ["0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001"],
       *     "latest"
       * ).then(console.log);
       * > {
       *     "address": "0x1234567890123456789012345678901234567890",
       *     "accountProof": [
       *         "0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80",
       *         "0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80",
       *         "0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080",
       *         "0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080"
       *     ],
       *     "balance": 0n,
       *     "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
       *     "nonce": 0n,
       *     "storageHash": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
       *     "storageProof": [
       *         {
       *             "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
       *             "value": 0n,
       *             "proof": []
       *         },
       *         {
       *             "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
       *             "value": 0n,
       *             "proof": []
       *         }
       *     ]
       * }
       *
       * web3.eth.getProof(
       *     "0x1234567890123456789012345678901234567890",
       *     ["0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000001"],
       *     undefined,
       *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }
       * ).then(console.log);
       * > {
       *     "address": "0x1234567890123456789012345678901234567890",
       *     "accountProof": [
       *         "0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80",
       *         "0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80",
       *         "0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080",
       *         "0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080"
       *     ],
       *     "balance": 0,
       *     "codeHash": "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
       *     "nonce": 0,
       *     "storageHash": "0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",
       *     "storageProof": [
       *         {
       *             "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
       *             "value": 0,
       *             "proof": []
       *         },
       *         {
       *             "key": "0x0000000000000000000000000000000000000000000000000000000000000001",
       *             "value": 0,
       *             "proof": []
       *         }
       *     ]
       * }
       * ```
       */
      getProof(address, storageKeys, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getProof(this, address, storageKeys, blockNumber, returnFormat);
        });
      }
      // TODO Throwing an error with Geth, but not Infura
      // TODO gasUsedRatio and reward not formatting
      /**
       * @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.
       * @param newestBlock Highest number block of the requested range.
       * @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.
       * @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.
       * The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.
       * For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.
       *
       * ```ts
       * web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);
       * > {
       *     baseFeePerGas: [
       *         22983878621n,
       *         21417903463n,
       *         19989260230n,
       *         17770954829n,
       *         18850641304n
       *     ],
       *     gasUsedRatio: [
       *         0.22746546666666667,
       *         0.2331871,
       *         0.05610054885262125,
       *         0.7430227268212117
       *     ],
       *     oldestBlock: 15216343n,
       *     reward: [
       *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],
       *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],
       *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],
       *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]
       *     ]
       * }
       *
       * web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);
       * > {
       *     baseFeePerGas: [
       *         22983878621,
       *         21417903463,
       *         19989260230,
       *         17770954829,
       *         18850641304
       *     ],
       *     gasUsedRatio: [
       *         0.22746546666666667,
       *         0.2331871,
       *         0.05610054885262125,
       *         0.7430227268212117
       *     ],
       *     oldestBlock: 15216343,
       *     reward: [
       *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],
       *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],
       *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],
       *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]
       *     ]
       * }
       * ```
       */
      getFeeHistory(blockCount, newestBlock = this.defaultBlock, rewardPercentiles, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return getFeeHistory(this, blockCount, newestBlock, rewardPercentiles, returnFormat);
        });
      }
      /**
       * This method generates an access list for a transaction.
       *
       * @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.
       * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.
       * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.
       * @example
       * ```ts
       * web3.eth.createAccessList({
       * from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',
       * data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',
       * gasPrice: '0x3b9aca00',
       * gas: '0x3d0900',
       * to: '0x940b25304947ae863568B3804434EC77E2160b87'
       * })
       * .then(console.log);
       *
       * > {
       *  "accessList": [
       *     {
       *       "address": "0x15859bdf5aff2080a9968f6a410361e9598df62f",
       *       "storageKeys": [
       *         "0x0000000000000000000000000000000000000000000000000000000000000000"
       *       ]
       *     }
       *   ],
       *   "gasUsed": "0x7671"
       * }
       * ```
       */
      createAccessList(transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return __awaiter$c(this, void 0, void 0, function* () {
          return createAccessList(this, transaction, blockNumber, returnFormat);
        });
      }
      /**
       * This method sends EIP-712 typed data to the RPC provider to be signed.
       *
       * @param address The address that corresponds with the private key used to sign the typed data.
       * @param typedData The EIP-712 typed data object.
       * @param useLegacy A boolean flag determining whether the RPC call uses the legacy method `eth_signTypedData` or the newer method `eth_signTypedData_v4`
       * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the signed typed data should be formatted.
       * @returns The signed typed data.
       */
      signTypedData(address, typedData, useLegacy, returnFormat) {
        var _a2;
        if (useLegacy === void 0) {
          useLegacy = false;
        }
        if (returnFormat === void 0) {
          returnFormat = (_a2 = this.defaultReturnFormat) !== null && _a2 !== void 0 ? _a2 : DEFAULT_RETURN_FORMAT;
        }
        return __awaiter$c(this, void 0, void 0, function* () {
          return signTypedData(this, address, typedData, useLegacy, returnFormat);
        });
      }
      /**
       * Lets you subscribe to specific events in the blockchain.
       *
       * @param name - The subscription you want to subscribe to.
       * @param args - Optional additional parameters, depending on the subscription type.
       * @returns A subscription object of type {@link RegisteredSubscription}. The object contains:
       *  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.
       *  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.
       *  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.
       *  - subscription.args: The subscription arguments, used when re-subscribing.
       *
       *
       * You can use the subscription object to listen on:
       *
       * - on("data") - Fires on each incoming log with the log object as argument.
       * - on("changed") - Fires on each log which was removed from the blockchain. The log will have the additional property "removed: true".
       * - on("error") - Fires when an error in the subscription occurs.
       * - on("connected") - Fires once after the subscription successfully connected. Returns the subscription id.
       *
       * @example **Subscribe to Smart Contract events**
       * ```ts
       * // Subscribe to `logs`
       * const logSubscription = web3.eth.subscribe('logs', {
       *     address: '0x1234567890123456789012345678901234567890',
       *     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']
       * });
       * logSubscription.on('data', (data: any) => console.log(data));
       * logSubscription.on('error', (error: any) => console.log(error));
       *
       * ```
       *
       * @example **Subscribe to new block headers**
       * ```ts
       * // Subscribe to `newBlockHeaders`
       * const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');
       *
       * newBlocksSubscription.on('data', async blockhead => {
       * 	console.log('New block header: ', blockhead);
       *
       * 	// You do not need the next line, if you like to keep notified for every new block
       * 	await newBlocksSubscription.unsubscribe();
       * 	console.log('Unsubscribed from new block headers.');
       * });
       * newBlocksSubscription.on('error', error =>
       * 	console.log('Error when subscribing to New block header: ', error),
       * );
       * ```
       *
       * 	### subscribe('pendingTransactions')
       *
       * Subscribes to incoming pending transactions.
       * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').
       *
       * ```ts
       * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);
       * ```
       *
       * ### subscribe('newHeads')
       * ( same as subscribe('newBlockHeaders'))
       * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.
       *
       * The structure of a returned block header is {@link BlockHeaderOutput}:
       *
       * ```ts
       * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well
       *  'data',
       * console.log
       * );
       * >{
       * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',
       * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',
       * miner: '0x0000000000000000000000000000000000000000',
       * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',
       * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',
       * logsBloom: '0x
       * difficulty: 2n,
       * number: 21n,
       * gasLimit: 11738125n,
       * gasUsed: 830006n,
       * timestamp: 1678797237n,
       * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',
       * nonce: 0n
       * }
       * ```
       *
       * ### subscribe('syncing')
       * Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.
       *
       * ```ts
       * (await web3.eth.subscribe('syncing')).on('changed', console.log);
       * > `true` // when syncing
       *
       * (await web3.eth.subscribe('syncing')).on('data', console.log);
       * > {
       *      startingBlock: 0,
       *      currentBlock: 0,
       *      highestBlock: 0,
       *      pulledStates: 0,
       *      knownStates: 0
       *   }
       * ```
       *
       * ### subscribe('logs', options)
       * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.
       *
       * options: You can subscribe to logs matching a given filter object, which can take the following parameters:
       * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.
       * - `address`: (optional) Contract address or a list of addresses from which logs should originate.
       * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.
       *
       * ```ts
       *  (await web3.eth.subscribe('logs', {
       *    address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
       *   })).on('data', console.log);
       *
       * > {
       * removed: false,
       * logIndex: 119n,
       * transactionIndex: 58n,
       * transactionHash: '0x61533efa77937360215069d5d6cb0be09a22af9721e6dc3df59d957833ed8870',
       * blockHash: '0xe32bb97084479d32247f66f8b46d00af2fbc3c2db2bc6e5843fe2e4d1ca9b099',
       * blockNumber: 18771966n,
       * address: '0xdac17f958d2ee523a2206206994597c13d831ec7',
       * data: '0x00000000000000000000000000000000000000000000000000000000d88b2e40',
       * topics: [
       * '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
       * '0x0000000000000000000000002fb2457f6ec1865dc0d4e7300c696b69c2a1b989',
       * '0x00000000000000000000000027fd43babfbe83a81d14665b1a6fb8030a60c9b4'
       * ]
       * }
       *```
       */
      subscribe(name2, args, returnFormat) {
        var _a2, _b;
        if (returnFormat === void 0) {
          returnFormat = (_a2 = this.defaultReturnFormat) !== null && _a2 !== void 0 ? _a2 : DEFAULT_RETURN_FORMAT;
        }
        return __awaiter$c(this, void 0, void 0, function* () {
          const subscription = yield (_b = this.subscriptionManager) === null || _b === void 0 ? void 0 : _b.subscribe(name2, args, returnFormat);
          if (subscription instanceof LogsSubscription$1 && name2 === "logs" && typeof args === "object" && !isNullish(args.fromBlock) && Number.isFinite(Number(args.fromBlock))) {
            setImmediate(() => {
              this.getPastLogs(args).then((logs) => {
                for (const log of logs) {
                  subscription._processSubscriptionResult(log);
                }
              }).catch((e) => {
                subscription._processSubscriptionError(e);
              });
            });
          }
          return subscription;
        });
      }
      static shouldClearSubscription({ sub }) {
        return !(sub instanceof SyncingSubscription);
      }
      /**
       * Resets subscriptions.
       *
       * @param notClearSyncing If `true` it keeps the `syncing` subscription.
       * @returns A promise to an array of subscription ids that were cleared.
       *
       * ```ts
       * web3.eth.clearSubscriptions().then(console.log);
       * > [...] An array of subscription ids that were cleared
       * ```
       */
      clearSubscriptions(notClearSyncing = false) {
        var _a2;
        return (_a2 = this.subscriptionManager) === null || _a2 === void 0 ? void 0 : _a2.unsubscribe(
          // eslint-disable-next-line
          notClearSyncing ? Web3Eth.shouldClearSubscription : void 0
        );
      }
    }
    const validateCustomChainInfo = (transaction) => {
      if (!isNullish$1(transaction.common)) {
        if (isNullish$1(transaction.common.customChain))
          throw new MissingCustomChainError();
        if (isNullish$1(transaction.common.customChain.chainId))
          throw new MissingCustomChainIdError();
        if (!isNullish$1(transaction.chainId) && transaction.chainId !== transaction.common.customChain.chainId)
          throw new ChainIdMismatchError({
            txChainId: transaction.chainId,
            customChainId: transaction.common.customChain.chainId
          });
      }
    };
    const validateChainInfo = (transaction) => {
      if (!isNullish$1(transaction.common) && !isNullish$1(transaction.chain) && !isNullish$1(transaction.hardfork)) {
        throw new CommonOrChainAndHardforkError();
      }
      if (!isNullish$1(transaction.chain) && isNullish$1(transaction.hardfork) || !isNullish$1(transaction.hardfork) && isNullish$1(transaction.chain))
        throw new MissingChainOrHardforkError({
          chain: transaction.chain,
          hardfork: transaction.hardfork
        });
    };
    const validateBaseChain = (transaction) => {
      if (!isNullish$1(transaction.common)) {
        if (!isNullish$1(transaction.common.baseChain)) {
          if (!isNullish$1(transaction.chain) && transaction.chain !== transaction.common.baseChain) {
            throw new ChainMismatchError({
              txChain: transaction.chain,
              baseChain: transaction.common.baseChain
            });
          }
        }
      }
    };
    const validateHardfork = (transaction) => {
      if (!isNullish$1(transaction.common)) {
        if (!isNullish$1(transaction.common.hardfork)) {
          if (!isNullish$1(transaction.hardfork) && transaction.hardfork !== transaction.common.hardfork) {
            throw new HardforkMismatchError({
              txHardfork: transaction.hardfork,
              commonHardfork: transaction.common.hardfork
            });
          }
        }
      }
    };
    const validateLegacyGas = (transaction) => {
      if (
        // This check is verifying gas and gasPrice aren't less than 0.
        isNullish$1(transaction.gas) || !isUInt(transaction.gas) || isNullish$1(transaction.gasPrice) || !isUInt(transaction.gasPrice)
      )
        throw new InvalidGasOrGasPrice({
          gas: transaction.gas,
          gasPrice: transaction.gasPrice
        });
      if (!isNullish$1(transaction.maxFeePerGas) || !isNullish$1(transaction.maxPriorityFeePerGas))
        throw new UnsupportedFeeMarketError({
          maxFeePerGas: transaction.maxFeePerGas,
          maxPriorityFeePerGas: transaction.maxPriorityFeePerGas
        });
    };
    const validateFeeMarketGas = (transaction) => {
      if (!isNullish$1(transaction.gasPrice) && transaction.type === "0x2")
        throw new Eip1559GasPriceError(transaction.gasPrice);
      if (transaction.type === "0x0" || transaction.type === "0x1")
        throw new UnsupportedFeeMarketError({
          maxFeePerGas: transaction.maxFeePerGas,
          maxPriorityFeePerGas: transaction.maxPriorityFeePerGas
        });
      if (isNullish$1(transaction.maxFeePerGas) || !isUInt(transaction.maxFeePerGas) || isNullish$1(transaction.maxPriorityFeePerGas) || !isUInt(transaction.maxPriorityFeePerGas))
        throw new InvalidMaxPriorityFeePerGasOrMaxFeePerGas({
          maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
          maxFeePerGas: transaction.maxFeePerGas
        });
    };
    const validateGas = (transaction) => {
      const gasPresent = !isNullish$1(transaction.gas) || !isNullish$1(transaction.gasLimit);
      const legacyGasPresent = gasPresent && !isNullish$1(transaction.gasPrice);
      const feeMarketGasPresent = gasPresent && !isNullish$1(transaction.maxPriorityFeePerGas) && !isNullish$1(transaction.maxFeePerGas);
      if (!legacyGasPresent && !feeMarketGasPresent)
        throw new MissingGasError({
          gas: transaction.gas,
          gasPrice: transaction.gasPrice,
          maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
          maxFeePerGas: transaction.maxFeePerGas
        });
      if (legacyGasPresent && feeMarketGasPresent)
        throw new TransactionGasMismatchError({
          gas: transaction.gas,
          gasPrice: transaction.gasPrice,
          maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
          maxFeePerGas: transaction.maxFeePerGas
        });
      (legacyGasPresent ? validateLegacyGas : validateFeeMarketGas)(transaction);
      (!isNullish$1(transaction.type) && transaction.type > "0x1" ? validateFeeMarketGas : validateLegacyGas)(transaction);
    };
    const validateTransactionForSigning = (transaction, overrideMethod, options = { transactionSchema: void 0 }) => {
      if (!isNullish$1(overrideMethod)) {
        overrideMethod(transaction);
        return;
      }
      if (typeof transaction !== "object" || isNullish$1(transaction))
        throw new InvalidTransactionObjectError(transaction);
      validateCustomChainInfo(transaction);
      validateChainInfo(transaction);
      validateBaseChain(transaction);
      validateHardfork(transaction);
      const formattedTransaction = formatTransaction(transaction, ETH_DATA_FORMAT, {
        transactionSchema: options.transactionSchema
      });
      validateGas(formattedTransaction);
      if (isNullish$1(formattedTransaction.nonce) || isNullish$1(formattedTransaction.chainId) || formattedTransaction.nonce.startsWith("-") || formattedTransaction.chainId.startsWith("-"))
        throw new InvalidNonceOrChainIdError({
          nonce: transaction.nonce,
          chainId: transaction.chainId
        });
    };
    var __awaiter$b = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const getEthereumjsTxDataFromTransaction = (transaction) => {
      var _a2, _b;
      return Object.assign(Object.assign({}, transaction), { nonce: transaction.nonce, gasPrice: transaction.gasPrice, gasLimit: (_a2 = transaction.gasLimit) !== null && _a2 !== void 0 ? _a2 : transaction.gas, to: transaction.to, value: transaction.value, data: (_b = transaction.data) !== null && _b !== void 0 ? _b : transaction.input, type: transaction.type, chainId: transaction.chainId, accessList: transaction.accessList, maxPriorityFeePerGas: transaction.maxPriorityFeePerGas, maxFeePerGas: transaction.maxFeePerGas });
    };
    const getEthereumjsTransactionOptions = (transaction, web3Context) => {
      var _a2, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
      const hasTransactionSigningOptions = !isNullish$1(transaction.chain) && !isNullish$1(transaction.hardfork) || !isNullish$1(transaction.common);
      let common;
      if (!hasTransactionSigningOptions) {
        if (web3Context.defaultCommon) {
          common = Object.assign({}, web3Context.defaultCommon);
          if (isNullish$1(common.hardfork))
            common.hardfork = (_a2 = transaction.hardfork) !== null && _a2 !== void 0 ? _a2 : web3Context.defaultHardfork;
          if (isNullish$1(common.baseChain))
            common.baseChain = web3Context.defaultChain;
        } else {
          common = Common.custom({
            name: "custom-network",
            chainId: toNumber(transaction.chainId),
            networkId: !isNullish$1(transaction.networkId) ? toNumber(transaction.networkId) : void 0,
            defaultHardfork: (_b = transaction.hardfork) !== null && _b !== void 0 ? _b : web3Context.defaultHardfork
          }, {
            baseChain: web3Context.defaultChain
          });
        }
      } else {
        const name2 = (_f = (_e = (_d = (_c = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _c === void 0 ? void 0 : _c.customChain) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : transaction.chain) !== null && _f !== void 0 ? _f : "custom-network";
        const chainId = toNumber((_j = (_h = (_g = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _g === void 0 ? void 0 : _g.customChain) === null || _h === void 0 ? void 0 : _h.chainId) !== null && _j !== void 0 ? _j : transaction === null || transaction === void 0 ? void 0 : transaction.chainId);
        const networkId = toNumber((_m = (_l = (_k = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _k === void 0 ? void 0 : _k.customChain) === null || _l === void 0 ? void 0 : _l.networkId) !== null && _m !== void 0 ? _m : transaction === null || transaction === void 0 ? void 0 : transaction.networkId);
        const defaultHardfork = (_q = (_p = (_o = transaction === null || transaction === void 0 ? void 0 : transaction.common) === null || _o === void 0 ? void 0 : _o.hardfork) !== null && _p !== void 0 ? _p : transaction === null || transaction === void 0 ? void 0 : transaction.hardfork) !== null && _q !== void 0 ? _q : web3Context.defaultHardfork;
        const baseChain = (_t = (_s = (_r = transaction.common) === null || _r === void 0 ? void 0 : _r.baseChain) !== null && _s !== void 0 ? _s : transaction.chain) !== null && _t !== void 0 ? _t : web3Context.defaultChain;
        if (chainId && networkId && name2) {
          common = Common.custom({
            name: name2,
            chainId,
            networkId,
            defaultHardfork
          }, {
            baseChain
          });
        }
      }
      return { common };
    };
    const prepareTransactionForSigning = (transaction, web3Context, privateKey, fillGasPrice = false, fillGasLimit = true) => __awaiter$b(void 0, void 0, void 0, function* () {
      const populatedTransaction = yield transactionBuilder({
        transaction,
        web3Context,
        privateKey,
        fillGasPrice,
        fillGasLimit
      });
      const formattedTransaction = formatTransaction(populatedTransaction, ETH_DATA_FORMAT, {
        transactionSchema: web3Context.config.customTransactionSchema
      });
      validateTransactionForSigning(formattedTransaction, void 0, {
        transactionSchema: web3Context.config.customTransactionSchema
      });
      return TransactionFactory.fromTxData(getEthereumjsTxDataFromTransaction(formattedTransaction), getEthereumjsTransactionOptions(formattedTransaction, web3Context));
    });
    const encodeEventABI = ({ address }, event, options) => {
      var _a2, _b;
      const topics = options === null || options === void 0 ? void 0 : options.topics;
      const filter = (_a2 = options === null || options === void 0 ? void 0 : options.filter) !== null && _a2 !== void 0 ? _a2 : {};
      const opts = {};
      if (!isNullish(options === null || options === void 0 ? void 0 : options.fromBlock)) {
        opts.fromBlock = format(blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.fromBlock, {
          number: FMT_NUMBER.HEX,
          bytes: FMT_BYTES.HEX
        });
      }
      if (!isNullish(options === null || options === void 0 ? void 0 : options.toBlock)) {
        opts.toBlock = format(blockSchema.properties.number, options === null || options === void 0 ? void 0 : options.toBlock, {
          number: FMT_NUMBER.HEX,
          bytes: FMT_BYTES.HEX
        });
      }
      if (topics && Array.isArray(topics)) {
        opts.topics = [...topics];
      } else {
        opts.topics = [];
        if (event && !event.anonymous && ![ALL_EVENTS, "allEvents"].includes(event.name)) {
          opts.topics.push((_b = event.signature) !== null && _b !== void 0 ? _b : encodeEventSignature(jsonInterfaceMethodToString(event)));
        }
        if (![ALL_EVENTS, "allEvents"].includes(event.name) && event.inputs) {
          for (const input of event.inputs) {
            if (!input.indexed) {
              continue;
            }
            const value = filter[input.name];
            if (!value) {
              opts.topics.push(null);
              continue;
            }
            if (Array.isArray(value)) {
              opts.topics.push(value.map((v2) => encodeParameter(input.type, v2)));
            } else if (input.type === "string") {
              opts.topics.push(keccak256Wrapper(value));
            } else {
              opts.topics.push(encodeParameter(input.type, value));
            }
          }
        }
      }
      if (!opts.topics.length)
        delete opts.topics;
      if (address) {
        opts.address = address.toLowerCase();
      }
      return opts;
    };
    const encodeMethodABI = (abi2, args, deployData) => {
      const inputLength = Array.isArray(abi2.inputs) ? abi2.inputs.length : 0;
      if (abi2.inputs && inputLength !== args.length) {
        throw new Web3ContractError(`The number of arguments is not matching the methods required number. You need to pass ${inputLength} arguments.`);
      }
      let params;
      if (abi2.inputs) {
        params = encodeParameters(Array.isArray(abi2.inputs) ? abi2.inputs : [], args).replace("0x", "");
      } else {
        params = inferTypesAndEncodeParameters(args).replace("0x", "");
      }
      if (isAbiConstructorFragment(abi2)) {
        if (!deployData)
          throw new Web3ContractError("The contract has no contract data option set. This is necessary to append the constructor parameters.");
        if (!deployData.startsWith("0x")) {
          return `0x${deployData}${params}`;
        }
        return `${deployData}${params}`;
      }
      return `${encodeFunctionSignature(abi2)}${params}`;
    };
    const decodeMethodParams = (abi2, data, methodSignatureProvided = true) => {
      const value = methodSignatureProvided && data && data.length >= 10 && data.startsWith("0x") ? data.slice(10) : data;
      if (!abi2.inputs) {
        throw new Web3ContractError("No inputs found in the ABI");
      }
      const result = decodeParameters([...abi2.inputs], value);
      return result;
    };
    const decodeMethodReturn = (abi2, returnValues) => {
      if (abi2.type === "constructor") {
        return returnValues;
      }
      if (!returnValues) {
        return null;
      }
      const value = returnValues.length >= 2 ? returnValues.slice(2) : returnValues;
      if (!abi2.outputs) {
        return null;
      }
      const result = decodeParameters([...abi2.outputs], value);
      if (result.__length__ === 1) {
        return result[0];
      }
      return result;
    };
    class LogsSubscription extends Web3Subscription {
      constructor(args, options) {
        super(args, options);
        this.address = args.address;
        this.topics = args.topics;
        this.abi = args.abi;
        this.jsonInterface = args.jsonInterface;
      }
      _buildSubscriptionParams() {
        return ["logs", { address: this.address, topics: this.topics }];
      }
      formatSubscriptionResult(data) {
        return decodeEventABI(this.abi, data, this.jsonInterface, super.returnFormat);
      }
    }
    Array.from({ length: 256 }, (_v, i) => i.toString(16).padStart(2, "0"));
    const dataInputEncodeMethodHelper = (txParams, abi2, params, dataInputFill) => {
      var _a2, _b;
      const tx = {};
      if (!isNullish(txParams.data) || dataInputFill === "both") {
        tx.data = encodeMethodABI(abi2, params, (_a2 = txParams.data) !== null && _a2 !== void 0 ? _a2 : txParams.input);
      }
      if (!isNullish(txParams.input) || dataInputFill === "both") {
        tx.input = encodeMethodABI(abi2, params, (_b = txParams.input) !== null && _b !== void 0 ? _b : txParams.data);
      }
      if (isNullish(tx.input) && isNullish(tx.data)) {
        tx[dataInputFill] = encodeMethodABI(abi2, params);
      }
      return { data: tx.data, input: tx.input };
    };
    const getSendTxParams = ({ abi: abi2, params, options, contractOptions }) => {
      var _a2, _b, _c;
      const deploymentCall = (_c = (_b = (_a2 = options === null || options === void 0 ? void 0 : options.input) !== null && _a2 !== void 0 ? _a2 : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input) !== null && _c !== void 0 ? _c : contractOptions.data;
      if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {
        throw new Web3ContractError("Contract address not specified");
      }
      if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {
        throw new Web3ContractError('Contract "from" address not specified');
      }
      let txParams = mergeDeep({
        to: contractOptions.address,
        gas: contractOptions.gas,
        gasPrice: contractOptions.gasPrice,
        from: contractOptions.from,
        input: contractOptions.input,
        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
        maxFeePerGas: contractOptions.maxFeePerGas,
        data: contractOptions.data
      }, options);
      const dataInput = dataInputEncodeMethodHelper(txParams, abi2, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
      txParams = Object.assign(Object.assign({}, txParams), { data: dataInput.data, input: dataInput.input });
      return txParams;
    };
    const getEthTxCallParams = ({ abi: abi2, params, options, contractOptions }) => {
      if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {
        throw new Web3ContractError("Contract address not specified");
      }
      let txParams = mergeDeep({
        to: contractOptions.address,
        gas: contractOptions.gas,
        gasPrice: contractOptions.gasPrice,
        from: contractOptions.from,
        input: contractOptions.input,
        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
        maxFeePerGas: contractOptions.maxFeePerGas,
        data: contractOptions.data
      }, options);
      const dataInput = dataInputEncodeMethodHelper(txParams, abi2, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
      txParams = Object.assign(Object.assign({}, txParams), { data: dataInput.data, input: dataInput.input });
      return txParams;
    };
    const getEstimateGasParams = ({ abi: abi2, params, options, contractOptions }) => {
      let txParams = mergeDeep({
        to: contractOptions.address,
        gas: contractOptions.gas,
        gasPrice: contractOptions.gasPrice,
        from: contractOptions.from,
        input: contractOptions.input,
        data: contractOptions.data
      }, options);
      const dataInput = dataInputEncodeMethodHelper(txParams, abi2, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
      txParams = Object.assign(Object.assign({}, txParams), { data: dataInput.data, input: dataInput.input });
      return txParams;
    };
    const isWeb3ContractContext = (options) => typeof options === "object" && !isNullish(options) && Object.keys(options).length !== 0 && !isContractInitOptions(options);
    const getCreateAccessListParams = ({ abi: abi2, params, options, contractOptions }) => {
      if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {
        throw new Web3ContractError("Contract address not specified");
      }
      if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {
        throw new Web3ContractError('Contract "from" address not specified');
      }
      let txParams = mergeDeep({
        to: contractOptions.address,
        gas: contractOptions.gas,
        gasPrice: contractOptions.gasPrice,
        from: contractOptions.from,
        input: contractOptions.input,
        maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,
        maxFeePerGas: contractOptions.maxFeePerGas,
        data: contractOptions.data
      }, options);
      const dataInput = dataInputEncodeMethodHelper(txParams, abi2, params, options === null || options === void 0 ? void 0 : options.dataInputFill);
      txParams = Object.assign(Object.assign({}, txParams), { data: dataInput.data, input: dataInput.input });
      return txParams;
    };
    var __awaiter$a = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class DeployerMethodClass {
      constructor(parent, deployOptions) {
        this.parent = parent;
        this.deployOptions = deployOptions;
        const { args, abi: abi2, contractOptions, deployData } = this.calculateDeployParams();
        this.args = args;
        this.constructorAbi = abi2;
        this.contractOptions = contractOptions;
        this.deployData = deployData;
      }
      _contractMethodDeploySend(tx) {
        const returnTxOptions = {
          transactionResolver: (receipt) => {
            if (receipt.status === BigInt(0)) {
              throw new Web3ContractError("code couldn't be stored", receipt);
            }
            const newContract = this.parent.clone();
            newContract.options.address = receipt.contractAddress;
            return newContract;
          },
          contractAbi: this.parent.options.jsonInterface,
          // TODO Should make this configurable by the user
          checkRevertBeforeSending: false
        };
        return isNullish$1(this.parent.getTransactionMiddleware()) ? sendTransaction$1(this.parent, tx, this.parent.defaultReturnFormat, returnTxOptions) : sendTransaction$1(this.parent, tx, this.parent.defaultReturnFormat, returnTxOptions, this.parent.getTransactionMiddleware());
      }
      send(options) {
        const modifiedOptions = Object.assign({}, options);
        const tx = this.populateTransaction(modifiedOptions);
        return this._contractMethodDeploySend(tx);
      }
      populateTransaction(txOptions) {
        var _a2, _b;
        const modifiedContractOptions = Object.assign(Object.assign({}, this.contractOptions), { from: (_b = (_a2 = this.contractOptions.from) !== null && _a2 !== void 0 ? _a2 : this.parent.defaultAccount) !== null && _b !== void 0 ? _b : void 0 });
        const tx = getSendTxParams({
          abi: this.constructorAbi,
          params: this.args,
          options: Object.assign(Object.assign({}, txOptions), { dataInputFill: this.parent.contractDataInputFill }),
          contractOptions: modifiedContractOptions
        });
        if (tx.dataInputFill) {
          delete tx.dataInputFill;
        }
        return tx;
      }
      calculateDeployParams() {
        var _a2, _b, _c, _d, _e, _f;
        let abi2 = this.parent.options.jsonInterface.find((j) => j.type === "constructor");
        if (!abi2) {
          abi2 = {
            type: "constructor",
            stateMutability: ""
          };
        }
        const _input = format({ format: "bytes" }, (_b = (_a2 = this.deployOptions) === null || _a2 === void 0 ? void 0 : _a2.input) !== null && _b !== void 0 ? _b : this.parent.options.input, DEFAULT_RETURN_FORMAT);
        const _data = format({ format: "bytes" }, (_d = (_c = this.deployOptions) === null || _c === void 0 ? void 0 : _c.data) !== null && _d !== void 0 ? _d : this.parent.options.data, DEFAULT_RETURN_FORMAT);
        if ((!_input || _input.trim() === "0x") && (!_data || _data.trim() === "0x")) {
          throw new Web3ContractError("contract creation without any data provided.");
        }
        const args = (_f = (_e = this.deployOptions) === null || _e === void 0 ? void 0 : _e.arguments) !== null && _f !== void 0 ? _f : [];
        const contractOptions = Object.assign(Object.assign({}, this.parent.options), { input: _input, data: _data });
        const deployData = _input !== null && _input !== void 0 ? _input : _data;
        return { args, abi: abi2, contractOptions, deployData };
      }
      estimateGas(options, returnFormat = this.parent.defaultReturnFormat) {
        return __awaiter$a(this, void 0, void 0, function* () {
          const modifiedOptions = Object.assign({}, options);
          return this.parent.contractMethodEstimateGas({
            abi: this.constructorAbi,
            params: this.args,
            returnFormat,
            options: modifiedOptions,
            contractOptions: this.contractOptions
          });
        });
      }
      encodeABI() {
        return encodeMethodABI(this.constructorAbi, this.args, format({ format: "bytes" }, this.deployData, this.parent.defaultReturnFormat));
      }
      decodeData(data) {
        return Object.assign(Object.assign({}, decodeMethodParams(this.constructorAbi, data.replace(this.deployData, ""), false)), { __method__: this.constructorAbi.type });
      }
    }
    var __awaiter$9 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const contractSubscriptions = {
      logs: LogsSubscription,
      newHeads: NewHeadsSubscription,
      newBlockHeaders: NewHeadsSubscription
    };
    class Contract extends Web3Context {
      constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat) {
        var _a2, _b, _c;
        const options = isContractInitOptions(addressOrOptionsOrContext) ? addressOrOptionsOrContext : isContractInitOptions(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : void 0;
        let contractContext;
        if (isWeb3ContractContext(addressOrOptionsOrContext)) {
          contractContext = addressOrOptionsOrContext;
        } else if (isWeb3ContractContext(optionsOrContextOrReturnFormat)) {
          contractContext = optionsOrContextOrReturnFormat;
        } else {
          contractContext = contextOrReturnFormat;
        }
        let provider;
        if (typeof addressOrOptionsOrContext === "object" && "provider" in addressOrOptionsOrContext) {
          provider = addressOrOptionsOrContext.provider;
        } else if (typeof optionsOrContextOrReturnFormat === "object" && "provider" in optionsOrContextOrReturnFormat) {
          provider = optionsOrContextOrReturnFormat.provider;
        } else if (typeof contextOrReturnFormat === "object" && "provider" in contextOrReturnFormat) {
          provider = contextOrReturnFormat.provider;
        } else {
          provider = Contract.givenProvider;
        }
        super(Object.assign(Object.assign({}, contractContext), { provider, registeredSubscriptions: contractSubscriptions }));
        this.syncWithContext = false;
        this._functions = {};
        if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.wallet) {
          this._wallet = contractContext.wallet;
        }
        if (contractContext === null || contractContext === void 0 ? void 0 : contractContext.accountProvider) {
          this._accountProvider = contractContext.accountProvider;
        }
        if (!isNullish$1(options) && !isNullish$1(options.data) && !isNullish$1(options.input) && this.config.contractDataInputFill !== "both")
          throw new ContractTransactionDataAndInputError({
            data: options.data,
            input: options.input
          });
        this._overloadedMethodAbis = /* @__PURE__ */ new Map();
        const returnDataFormat = isDataFormat(contextOrReturnFormat) ? contextOrReturnFormat : isDataFormat(optionsOrContextOrReturnFormat) ? optionsOrContextOrReturnFormat : returnFormat !== null && returnFormat !== void 0 ? returnFormat : this.defaultReturnFormat;
        const address = typeof addressOrOptionsOrContext === "string" ? addressOrOptionsOrContext : void 0;
        this.config.contractDataInputFill = (_a2 = options === null || options === void 0 ? void 0 : options.dataInputFill) !== null && _a2 !== void 0 ? _a2 : this.config.contractDataInputFill;
        this._parseAndSetJsonInterface(jsonInterface, returnDataFormat);
        if (this.defaultReturnFormat !== returnDataFormat) {
          this.defaultReturnFormat = returnDataFormat;
        }
        if (!isNullish$1(address)) {
          this._parseAndSetAddress(address, returnDataFormat);
        }
        this.options = {
          address,
          jsonInterface: this._jsonInterface,
          gas: (_b = options === null || options === void 0 ? void 0 : options.gas) !== null && _b !== void 0 ? _b : options === null || options === void 0 ? void 0 : options.gasLimit,
          gasPrice: options === null || options === void 0 ? void 0 : options.gasPrice,
          from: options === null || options === void 0 ? void 0 : options.from,
          input: options === null || options === void 0 ? void 0 : options.input,
          data: options === null || options === void 0 ? void 0 : options.data
        };
        this.syncWithContext = (_c = options === null || options === void 0 ? void 0 : options.syncWithContext) !== null && _c !== void 0 ? _c : false;
        if (contractContext instanceof Web3Context) {
          this.subscribeToContextEvents(contractContext);
        }
        Object.defineProperty(this.options, "address", {
          set: (value) => this._parseAndSetAddress(value, returnDataFormat),
          get: () => this._address
        });
        Object.defineProperty(this.options, "jsonInterface", {
          set: (value) => this._parseAndSetJsonInterface(value, returnDataFormat),
          get: () => this._jsonInterface
        });
        if (contractContext instanceof Web3Context) {
          contractContext.on(Web3ConfigEvent.CONFIG_CHANGE, (event) => {
            this.setConfig({ [event.name]: event.newValue });
          });
        }
      }
      setTransactionMiddleware(transactionMiddleware) {
        this.transactionMiddleware = transactionMiddleware;
      }
      getTransactionMiddleware() {
        return this.transactionMiddleware;
      }
      /**
       * Subscribe to an event.
       *
       * ```ts
       * await myContract.events.MyEvent([options])
       * ```
       *
       * There is a special event `allEvents` that can be used to subscribe all events.
       *
       * ```ts
       * await myContract.events.allEvents([options])
       * ```
       *
       * @returns - When individual event is accessed will returns {@link ContractBoundEvent} object
       */
      get events() {
        return this._events;
      }
      /**
       * Creates a transaction object for that method, which then can be `called`, `send`, `estimated`, `createAccessList` , or `ABI encoded`.
       *
       * The methods of this smart contract are available through:
       *
       * The name: `myContract.methods.myMethod(123)`
       * The name with parameters: `myContract.methods['myMethod(uint256)'](123)`
       * The signature `myContract.methods['0x58cf5f10'](123)`
       *
       * This allows calling functions with same name but different parameters from the JavaScript contract object.
       *
       * \> The method signature does not provide a type safe interface, so we recommend to use method `name` instead.
       *
       * ```ts
       * // calling a method
       * const result = await myContract.methods.myMethod(123).call({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
       *
       * // or sending and using a promise
       * const receipt = await myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
       *
       * // or sending and using the events
       * const sendObject = myContract.methods.myMethod(123).send({from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'});
       * sendObject.on('transactionHash', function(hash){
       *   ...
       * });
       * sendObject.on('receipt', function(receipt){
       *   ...
       * });
       * sendObject.on('confirmation', function(confirmationNumber, receipt){
       *   ...
       * });
       * sendObject.on('error', function(error, receipt) {
       *   ...
       * });
       * ```
       *
       * @returns - Either returns {@link PayableMethodObject} or {@link NonPayableMethodObject} based on the definitions of the ABI of that contract.
       */
      get methods() {
        return this._methods;
      }
      /**
       * Clones the current contract instance. This doesn't deploy contract on blockchain and only creates a local clone.
       *
       * @returns - The new contract instance.
       *
       * ```ts
       * const contract1 = new web3.eth.Contract(abi, address, {gasPrice: '12345678', from: fromAddress});
       *
       * const contract2 = contract1.clone();
       * contract2.options.address = '0xdAC17F958D2ee523a2206206994597C13D831ec7';
       *
       * (contract1.options.address !== contract2.options.address);
       * > true
       * ```
       */
      clone() {
        let newContract;
        if (this.options.address) {
          newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], this.options.address, {
            gas: this.options.gas,
            gasPrice: this.options.gasPrice,
            from: this.options.from,
            input: this.options.input,
            data: this.options.data,
            provider: this.currentProvider,
            syncWithContext: this.syncWithContext,
            dataInputFill: this.config.contractDataInputFill
          }, this.getContextObject());
        } else {
          newContract = new Contract([...this._jsonInterface, ...this._errorsInterface], {
            gas: this.options.gas,
            gasPrice: this.options.gasPrice,
            from: this.options.from,
            input: this.options.input,
            data: this.options.data,
            provider: this.currentProvider,
            syncWithContext: this.syncWithContext,
            dataInputFill: this.config.contractDataInputFill
          }, this.getContextObject());
        }
        if (this.context)
          newContract.subscribeToContextEvents(this.context);
        return newContract;
      }
      /**
       * Call this function to deploy the contract to the blockchain. After successful deployment the promise will resolve with a new contract instance.
       *
       * ```ts
       * myContract.deploy({
       *   input: '0x12345...', // data keyword can be used, too.
       *   arguments: [123, 'My String']
       * })
       * .send({
       *   from: '0x1234567890123456789012345678901234567891',
       *   gas: 1500000,
       *   gasPrice: '30000000000000'
       * }, function(error, transactionHash){ ... })
       * .on('error', function(error){ ... })
       * .on('transactionHash', function(transactionHash){ ... })
       * .on('receipt', function(receipt){
       *  console.log(receipt.contractAddress) // contains the new contract address
       * })
       * .on('confirmation', function(confirmationNumber, receipt){ ... })
       * .then(function(newContractInstance){
       *   console.log(newContractInstance.options.address) // instance with the new contract address
       * });
       *
       *
       * // When the data is already set as an option to the contract itself
       * myContract.options.data = '0x12345...';
       *
       * myContract.deploy({
       *   arguments: [123, 'My String']
       * })
       * .send({
       *   from: '0x1234567890123456789012345678901234567891',
       *   gas: 1500000,
       *   gasPrice: '30000000000000'
       * })
       * .then(function(newContractInstance){
       *   console.log(newContractInstance.options.address) // instance with the new contract address
       * });
       *
       *
       * // Simply encoding
       * myContract.deploy({
       *   input: '0x12345...',
       *   arguments: [123, 'My String']
       * })
       * .encodeABI();
       * > '0x12345...0000012345678765432'
       *
       *
       * // decoding
       * myContract.deploy({
       *   input: '0x12345...',
       *   // arguments: [123, 'My Greeting'] if you just need to decode the data, you can skip the arguments
       * })
       * .decodeData('0x12345...0000012345678765432');
       * > {
       *      __method__: 'constructor',
       *      __length__: 2,
       *      '0': '123',
       *      _id: '123',
       *      '1': 'My Greeting',
       *      _greeting: 'My Greeting',
       *   }
       *
       *
       * // Gas estimation
       * myContract.deploy({
       *   input: '0x12345...',
       *   arguments: [123, 'My String']
       * })
       * .estimateGas(function(err, gas){
       *   console.log(gas);
       * });
       * ```
       *
       * @returns - The transaction object
       */
      deploy(deployOptions) {
        return new DeployerMethodClass(this, deployOptions);
      }
      getPastEvents(param1, param2, param3) {
        var _a2;
        return __awaiter$9(this, void 0, void 0, function* () {
          const eventName = typeof param1 === "string" ? param1 : ALL_EVENTS;
          const options = (
            // eslint-disable-next-line no-nested-ternary
            typeof param1 !== "string" && !isDataFormat(param1) ? param1 : !isDataFormat(param2) ? param2 : {}
          );
          const returnFormat = isDataFormat(param1) ? param1 : isDataFormat(param2) ? param2 : param3 !== null && param3 !== void 0 ? param3 : this.defaultReturnFormat;
          const abi2 = eventName === "allEvents" || eventName === ALL_EVENTS ? ALL_EVENTS_ABI : this._jsonInterface.find((j) => "name" in j && j.name === eventName);
          if (!abi2) {
            throw new Web3ContractError(`Event ${eventName} not found.`);
          }
          const { fromBlock, toBlock, topics, address } = encodeEventABI(this.options, abi2, options !== null && options !== void 0 ? options : {});
          const logs = yield getLogs(this, { fromBlock, toBlock, topics, address }, returnFormat);
          const decodedLogs = logs ? logs.map((log) => typeof log === "string" ? log : decodeEventABI(abi2, log, this._jsonInterface, returnFormat)) : [];
          const filter = (_a2 = options === null || options === void 0 ? void 0 : options.filter) !== null && _a2 !== void 0 ? _a2 : {};
          const filterKeys = Object.keys(filter);
          if (filterKeys.length > 0) {
            return decodedLogs.filter((log) => {
              if (typeof log === "string")
                return true;
              return filterKeys.every((key) => {
                var _a3;
                if (Array.isArray(filter[key])) {
                  return filter[key].some((v2) => String(log.returnValues[key]).toUpperCase() === String(v2).toUpperCase());
                }
                const inputAbi = (_a3 = abi2.inputs) === null || _a3 === void 0 ? void 0 : _a3.filter((input) => input.name === key)[0];
                if ((inputAbi === null || inputAbi === void 0 ? void 0 : inputAbi.indexed) && inputAbi.type === "string") {
                  const hashedIndexedString = keccak256Wrapper(filter[key]);
                  if (hashedIndexedString === String(log.returnValues[key]))
                    return true;
                }
                return String(log.returnValues[key]).toUpperCase() === String(filter[key]).toUpperCase();
              });
            });
          }
          return decodedLogs;
        });
      }
      _parseAndSetAddress(value, returnFormat = this.defaultReturnFormat) {
        this._address = value ? toChecksumAddress(format({ format: "address" }, value, returnFormat)) : value;
      }
      decodeMethodData(data) {
        const methodSignature = data.slice(0, 10);
        const functionsAbis = this._jsonInterface.filter((j) => j.type !== "error");
        const abi2 = functionsAbis.find((a) => methodSignature === encodeFunctionSignature(jsonInterfaceMethodToString(a)));
        if (!abi2) {
          throw new Web3ContractError(`The ABI for the provided method signature ${methodSignature} was not found.`);
        }
        return Object.assign(Object.assign({}, decodeMethodParams(abi2, data)), { __method__: jsonInterfaceMethodToString(abi2) });
      }
      _parseAndSetJsonInterface(abis, returnFormat = this.defaultReturnFormat) {
        var _a2, _b, _c, _d, _e;
        this._functions = {};
        this._methods = {};
        this._events = {};
        let result = [];
        const functionsAbi = abis.filter((abi2) => abi2.type !== "error");
        const errorsAbi = abis.filter((abi2) => isAbiErrorFragment(abi2));
        for (const a of functionsAbi) {
          const abi2 = Object.assign(Object.assign({}, a), { signature: "" });
          if (isAbiFunctionFragment(abi2)) {
            const methodName = jsonInterfaceMethodToString(abi2);
            const methodSignature = encodeFunctionSignature(methodName);
            abi2.methodNameWithInputs = methodName;
            abi2.signature = methodSignature;
            abi2.constant = (_b = (_a2 = abi2.stateMutability === "view") !== null && _a2 !== void 0 ? _a2 : abi2.stateMutability === "pure") !== null && _b !== void 0 ? _b : abi2.constant;
            abi2.payable = (_c = abi2.stateMutability === "payable") !== null && _c !== void 0 ? _c : abi2.payable;
            this._overloadedMethodAbis.set(abi2.name, [
              ...(_d = this._overloadedMethodAbis.get(abi2.name)) !== null && _d !== void 0 ? _d : [],
              abi2
            ]);
            const abiFragment = (_e = this._overloadedMethodAbis.get(abi2.name)) !== null && _e !== void 0 ? _e : [];
            const contractMethod = this._createContractMethod(abiFragment, errorsAbi);
            const exactContractMethod = this._createContractMethod(abiFragment, errorsAbi, true);
            this._functions[methodName] = {
              signature: methodSignature,
              method: exactContractMethod
            };
            this._methods[abi2.name] = contractMethod;
            this._methods[methodName] = exactContractMethod;
            this._methods[methodSignature] = exactContractMethod;
          } else if (isAbiEventFragment(abi2)) {
            const eventName = jsonInterfaceMethodToString(abi2);
            const eventSignature = encodeEventSignature(eventName);
            const event = this._createContractEvent(abi2, returnFormat);
            abi2.signature = eventSignature;
            if (!(eventName in this._events) || abi2.name === "bound") {
              this._events[eventName] = event;
            }
            this._events[abi2.name] = event;
            this._events[eventSignature] = event;
          }
          result = [...result, abi2];
        }
        this._events.allEvents = this._createContractEvent(ALL_EVENTS_ABI, returnFormat);
        this._jsonInterface = [...result];
        this._errorsInterface = errorsAbi;
      }
      // eslint-disable-next-line class-methods-use-this
      _getAbiParams(abi2, params) {
        var _a2;
        try {
          return transformJsonDataToAbiFormat((_a2 = abi2.inputs) !== null && _a2 !== void 0 ? _a2 : [], params);
        } catch (error) {
          throw new Web3ContractError(`Invalid parameters for method ${abi2.name}: ${error.message}`);
        }
      }
      _createContractMethod(abiArr, errorsAbis, exact = false) {
        const abi2 = abiArr[abiArr.length - 1];
        return (...params) => {
          var _a2, _b, _c;
          let abiParams;
          const abis = (_b = exact ? (_a2 = this._overloadedMethodAbis.get(abi2.name)) === null || _a2 === void 0 ? void 0 : _a2.filter((_abi) => _abi.signature === abi2.signature) : this._overloadedMethodAbis.get(abi2.name)) !== null && _b !== void 0 ? _b : [];
          let methodAbi = abis[0];
          const internalErrorsAbis = errorsAbis;
          const arrayOfAbis = abis.filter((_abi) => {
            var _a3;
            return ((_a3 = _abi.inputs) !== null && _a3 !== void 0 ? _a3 : []).length === params.length;
          });
          if (abis.length === 1 || arrayOfAbis.length === 0) {
            abiParams = this._getAbiParams(methodAbi, params);
            validator.validate((_c = abi2.inputs) !== null && _c !== void 0 ? _c : [], abiParams);
          } else {
            const errors = [];
            const applicableMethodAbi = [];
            for (const _abi of arrayOfAbis) {
              try {
                abiParams = this._getAbiParams(_abi, params);
                validator.validate(_abi.inputs, abiParams);
                applicableMethodAbi.push(_abi);
              } catch (e) {
                errors.push(e);
              }
            }
            if (applicableMethodAbi.length === 1) {
              [methodAbi] = applicableMethodAbi;
            } else if (applicableMethodAbi.length > 1) {
              [methodAbi] = applicableMethodAbi;
              console.warn(`Multiple methods found that is compatible with the given inputs.
	Found ${applicableMethodAbi.length} compatible methods: ${JSON.stringify(applicableMethodAbi.map((m2) => `${m2.methodNameWithInputs} (signature: ${m2.signature})`))} 
	The first one will be used: ${methodAbi.methodNameWithInputs}`);
            }
            if (errors.length === arrayOfAbis.length) {
              throw new Web3ValidatorError(errors);
            }
          }
          const methods = {
            arguments: abiParams,
            call: (options, block) => __awaiter$9(this, void 0, void 0, function* () {
              return this._contractMethodCall(methodAbi, abiParams, internalErrorsAbis, options, block);
            }),
            send: (options) => this._contractMethodSend(methodAbi, abiParams, internalErrorsAbis, options),
            populateTransaction: (options, contractOptions) => {
              var _a3, _b2;
              let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;
              modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), { input: void 0, from: (_b2 = (_a3 = modifiedContractOptions === null || modifiedContractOptions === void 0 ? void 0 : modifiedContractOptions.from) !== null && _a3 !== void 0 ? _a3 : this.defaultAccount) !== null && _b2 !== void 0 ? _b2 : void 0 });
              const tx = getSendTxParams({
                abi: abi2,
                params,
                options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
                contractOptions: modifiedContractOptions
              });
              if (tx.dataInputFill) {
                delete tx.dataInputFill;
              }
              return tx;
            },
            estimateGas: (options, returnFormat = this.defaultReturnFormat) => __awaiter$9(this, void 0, void 0, function* () {
              return this.contractMethodEstimateGas({
                abi: methodAbi,
                params: abiParams,
                returnFormat,
                options
              });
            }),
            encodeABI: () => encodeMethodABI(methodAbi, abiParams),
            decodeData: (data) => decodeMethodParams(methodAbi, data),
            createAccessList: (options, block) => __awaiter$9(this, void 0, void 0, function* () {
              return this._contractMethodCreateAccessList(methodAbi, abiParams, internalErrorsAbis, options, block);
            })
          };
          if (methodAbi.stateMutability === "payable") {
            return methods;
          }
          return methods;
        };
      }
      _contractMethodCall(abi2, params, errorsAbi, options, block) {
        var _a2;
        return __awaiter$9(this, void 0, void 0, function* () {
          const tx = getEthTxCallParams({
            abi: abi2,
            params,
            options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
            contractOptions: Object.assign(Object.assign({}, this.options), { from: (_a2 = this.options.from) !== null && _a2 !== void 0 ? _a2 : this.config.defaultAccount })
          });
          try {
            const result = yield call(this, tx, block, this.defaultReturnFormat);
            return decodeMethodReturn(abi2, result);
          } catch (error) {
            if (error instanceof ContractExecutionError) {
              decodeContractErrorData(errorsAbi, error.cause);
            }
            throw error;
          }
        });
      }
      _contractMethodCreateAccessList(abi2, params, errorsAbi, options, block) {
        var _a2;
        return __awaiter$9(this, void 0, void 0, function* () {
          const tx = getCreateAccessListParams({
            abi: abi2,
            params,
            options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
            contractOptions: Object.assign(Object.assign({}, this.options), { from: (_a2 = this.options.from) !== null && _a2 !== void 0 ? _a2 : this.config.defaultAccount })
          });
          try {
            return createAccessList(this, tx, block, this.defaultReturnFormat);
          } catch (error) {
            if (error instanceof ContractExecutionError) {
              decodeContractErrorData(errorsAbi, error.cause);
            }
            throw error;
          }
        });
      }
      _contractMethodSend(abi2, params, errorsAbi, options, contractOptions) {
        var _a2, _b;
        let modifiedContractOptions = contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options;
        modifiedContractOptions = Object.assign(Object.assign({}, modifiedContractOptions), { input: void 0, from: (_b = (_a2 = modifiedContractOptions.from) !== null && _a2 !== void 0 ? _a2 : this.defaultAccount) !== null && _b !== void 0 ? _b : void 0 });
        const tx = getSendTxParams({
          abi: abi2,
          params,
          options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
          contractOptions: modifiedContractOptions
        });
        const transactionToSend = isNullish$1(this.transactionMiddleware) ? sendTransaction$1(this, tx, this.defaultReturnFormat, {
          // TODO Should make this configurable by the user
          checkRevertBeforeSending: false,
          contractAbi: this._jsonInterface
          // explicitly not passing middleware so if some one is using old eth package it will not break
        }) : sendTransaction$1(this, tx, this.defaultReturnFormat, {
          // TODO Should make this configurable by the user
          checkRevertBeforeSending: false,
          contractAbi: this._jsonInterface
        }, this.transactionMiddleware);
        void transactionToSend.on("error", (error) => {
          if (error instanceof ContractExecutionError) {
            decodeContractErrorData(errorsAbi, error.cause);
          }
        });
        return transactionToSend;
      }
      contractMethodEstimateGas({ abi: abi2, params, returnFormat, options, contractOptions }) {
        return __awaiter$9(this, void 0, void 0, function* () {
          const tx = getEstimateGasParams({
            abi: abi2,
            params,
            options: Object.assign(Object.assign({}, options), { dataInputFill: this.config.contractDataInputFill }),
            contractOptions: contractOptions !== null && contractOptions !== void 0 ? contractOptions : this.options
          });
          return estimateGas(this, tx, BlockTags.LATEST, returnFormat !== null && returnFormat !== void 0 ? returnFormat : this.defaultReturnFormat);
        });
      }
      // eslint-disable-next-line class-methods-use-this
      _createContractEvent(abi2, returnFormat = this.defaultReturnFormat) {
        return (...params) => {
          var _a2;
          const { topics, fromBlock } = encodeEventABI(this.options, abi2, params[0]);
          const sub = new LogsSubscription({
            address: this.options.address,
            topics,
            abi: abi2,
            jsonInterface: this._jsonInterface
          }, {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
            subscriptionManager: this.subscriptionManager,
            returnFormat
          });
          if (!isNullish$1(fromBlock)) {
            this.getPastEvents(abi2.name, { fromBlock, topics }, returnFormat).then((logs) => {
              if (logs) {
                logs.forEach((log) => sub.emit("data", log));
              }
            }).catch((error) => {
              sub.emit("error", new SubscriptionError("Failed to get past events.", error));
            });
          }
          (_a2 = this.subscriptionManager) === null || _a2 === void 0 ? void 0 : _a2.addSubscription(sub).catch((error) => {
            sub.emit("error", new SubscriptionError("Failed to subscribe.", error));
          });
          return sub;
        };
      }
      subscribeToContextEvents(context) {
        const contractThis = this;
        this.context = context;
        if (contractThis.syncWithContext) {
          context.on(Web3ConfigEvent.CONFIG_CHANGE, (event) => {
            contractThis.setConfig({ [event.name]: event.newValue });
          });
        }
      }
    }
    const interfaceIds = {
      addr: "0x3b3b57de",
      name: "0x691f3431",
      abi: "0x2203ab56",
      pubkey: "0xc8690233",
      text: "0x59d1d43c",
      contenthash: "0xbc1c58d1"
    };
    const methodsInInterface = {
      setAddr: "addr",
      addr: "addr",
      setPubkey: "pubkey",
      pubkey: "pubkey",
      setContenthash: "contenthash",
      contenthash: "contenthash",
      text: "text",
      name: "name"
    };
    const registryAddresses = {
      main: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
      goerli: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
    };
    const networkIds = {
      "0x1": "main",
      "0x5": "goerli"
    };
    const ENSRegistryAbi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "bytes32",
            name: "label",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "NewOwner",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "address",
            name: "resolver",
            type: "address"
          }
        ],
        name: "NewResolver",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "address",
            name: "owner",
            type: "address"
          }
        ],
        name: "Transfer",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            internalType: "address",
            name: "operator",
            type: "address"
          }
        ],
        name: "isApprovedForAll",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          }
        ],
        name: "owner",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          }
        ],
        name: "recordExists",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          }
        ],
        name: "resolver",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          }
        ],
        name: "ttl",
        outputs: [
          {
            internalType: "uint64",
            name: "",
            type: "uint64"
          }
        ],
        stateMutability: "view",
        type: "function"
      }
    ];
    const PublicResolverAbi = [
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "address",
            name: "a",
            type: "address"
          }
        ],
        name: "AddrChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "coinType",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "bytes",
            name: "newAddress",
            type: "bytes"
          }
        ],
        name: "AddressChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "owner",
            type: "address"
          },
          {
            indexed: true,
            internalType: "address",
            name: "operator",
            type: "address"
          },
          {
            indexed: false,
            internalType: "bool",
            name: "approved",
            type: "bool"
          }
        ],
        name: "ApprovalForAll",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "bytes",
            name: "hash",
            type: "bytes"
          }
        ],
        name: "ContenthashChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "bytes",
            name: "name",
            type: "bytes"
          },
          {
            indexed: false,
            internalType: "uint16",
            name: "resource",
            type: "uint16"
          },
          {
            indexed: false,
            internalType: "bytes",
            name: "record",
            type: "bytes"
          }
        ],
        name: "DNSRecordChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "bytes",
            name: "name",
            type: "bytes"
          },
          {
            indexed: false,
            internalType: "uint16",
            name: "resource",
            type: "uint16"
          }
        ],
        name: "DNSRecordDeleted",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          }
        ],
        name: "DNSZoneCleared",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "bytes",
            name: "lastzonehash",
            type: "bytes"
          },
          {
            indexed: false,
            internalType: "bytes",
            name: "zonehash",
            type: "bytes"
          }
        ],
        name: "DNSZonehashChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "bytes4",
            name: "interfaceID",
            type: "bytes4"
          },
          {
            indexed: false,
            internalType: "address",
            name: "implementer",
            type: "address"
          }
        ],
        name: "InterfaceChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "string",
            name: "name",
            type: "string"
          }
        ],
        name: "NameChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "bytes32",
            name: "x",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "bytes32",
            name: "y",
            type: "bytes32"
          }
        ],
        name: "PubkeyChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            indexed: true,
            internalType: "string",
            name: "indexedKey",
            type: "string"
          },
          {
            indexed: false,
            internalType: "string",
            name: "key",
            type: "string"
          }
        ],
        name: "TextChanged",
        type: "event"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            internalType: "uint256",
            name: "contentTypes",
            type: "uint256"
          }
        ],
        name: "ABI",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          }
        ],
        name: "addr",
        outputs: [
          {
            internalType: "address payable",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            internalType: "uint256",
            name: "coinType",
            type: "uint256"
          }
        ],
        name: "addr",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          }
        ],
        name: "contenthash",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "name",
            type: "bytes32"
          },
          {
            internalType: "uint16",
            name: "resource",
            type: "uint16"
          }
        ],
        name: "dnsRecord",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "name",
            type: "bytes32"
          }
        ],
        name: "hasDNSRecords",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            internalType: "bytes4",
            name: "interfaceID",
            type: "bytes4"
          }
        ],
        name: "interfaceImplementer",
        outputs: [
          {
            internalType: "address",
            name: "",
            type: "address"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "account",
            type: "address"
          },
          {
            internalType: "address",
            name: "operator",
            type: "address"
          }
        ],
        name: "isApprovedForAll",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          }
        ],
        name: "name",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          }
        ],
        name: "pubkey",
        outputs: [
          {
            internalType: "bytes32",
            name: "x",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "y",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes4",
            name: "interfaceID",
            type: "bytes4"
          }
        ],
        name: "supportsInterface",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            internalType: "string",
            name: "key",
            type: "string"
          }
        ],
        name: "text",
        outputs: [
          {
            internalType: "string",
            name: "",
            type: "string"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          }
        ],
        name: "zonehash",
        outputs: [
          {
            internalType: "bytes",
            name: "",
            type: "bytes"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes32",
            name: "node",
            type: "bytes32"
          },
          {
            internalType: "address",
            name: "a",
            type: "address"
          }
        ],
        name: "setAddr",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    var COMPRESSED$1 = "";
    const FENCED = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
    const NSM_MAX = 4;
    function decode_arithmetic(bytes2) {
      let pos = 0;
      function u16() {
        return bytes2[pos++] << 8 | bytes2[pos++];
      }
      let symbol_count = u16();
      let total = 1;
      let acc = [0, 1];
      for (let i = 1; i < symbol_count; i++) {
        acc.push(total += u16());
      }
      let skip = u16();
      let pos_payload = pos;
      pos += skip;
      let read_width = 0;
      let read_buffer = 0;
      function read_bit() {
        if (read_width == 0) {
          read_buffer = read_buffer << 8 | bytes2[pos++];
          read_width = 8;
        }
        return read_buffer >> --read_width & 1;
      }
      const N2 = 31;
      const FULL = 2 ** N2;
      const HALF = FULL >>> 1;
      const QRTR = HALF >> 1;
      const MASK = FULL - 1;
      let register = 0;
      for (let i = 0; i < N2; i++) register = register << 1 | read_bit();
      let symbols = [];
      let low = 0;
      let range = FULL;
      while (true) {
        let value = Math.floor(((register - low + 1) * total - 1) / range);
        let start = 0;
        let end = symbol_count;
        while (end - start > 1) {
          let mid = start + end >>> 1;
          if (value < acc[mid]) {
            end = mid;
          } else {
            start = mid;
          }
        }
        if (start == 0) break;
        symbols.push(start);
        let a = low + Math.floor(range * acc[start] / total);
        let b = low + Math.floor(range * acc[start + 1] / total) - 1;
        while (((a ^ b) & HALF) == 0) {
          register = register << 1 & MASK | read_bit();
          a = a << 1 & MASK;
          b = b << 1 & MASK | 1;
        }
        while (a & ~b & QRTR) {
          register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
          a = a << 1 ^ HALF;
          b = (b ^ HALF) << 1 | HALF | 1;
        }
        low = a;
        range = 1 + b - a;
      }
      let offset = symbol_count - 4;
      return symbols.map((x2) => {
        switch (x2 - offset) {
          case 3:
            return offset + 65792 + (bytes2[pos_payload++] << 16 | bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
          case 2:
            return offset + 256 + (bytes2[pos_payload++] << 8 | bytes2[pos_payload++]);
          case 1:
            return offset + bytes2[pos_payload++];
          default:
            return x2 - 1;
        }
      });
    }
    function read_payload(v2) {
      let pos = 0;
      return () => v2[pos++];
    }
    function read_compressed_payload(s) {
      return read_payload(decode_arithmetic(unsafe_atob(s)));
    }
    function unsafe_atob(s) {
      let lookup = [];
      [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
      let n2 = s.length;
      let ret = new Uint8Array(6 * n2 >> 3);
      for (let i = 0, pos = 0, width = 0, carry = 0; i < n2; i++) {
        carry = carry << 6 | lookup[s.charCodeAt(i)];
        width += 6;
        if (width >= 8) {
          ret[pos++] = carry >> (width -= 8);
        }
      }
      return ret;
    }
    function signed(i) {
      return i & 1 ? ~i >> 1 : i >> 1;
    }
    function read_deltas(n2, next) {
      let v2 = Array(n2);
      for (let i = 0, x2 = 0; i < n2; i++) v2[i] = x2 += signed(next());
      return v2;
    }
    function read_sorted(next, prev = 0) {
      let ret = [];
      while (true) {
        let x2 = next();
        let n2 = next();
        if (!n2) break;
        prev += x2;
        for (let i = 0; i < n2; i++) {
          ret.push(prev + i);
        }
        prev += n2 + 1;
      }
      return ret;
    }
    function read_sorted_arrays(next) {
      return read_array_while(() => {
        let v2 = read_sorted(next);
        if (v2.length) return v2;
      });
    }
    function read_mapped(next) {
      let ret = [];
      while (true) {
        let w2 = next();
        if (w2 == 0) break;
        ret.push(read_linear_table(w2, next));
      }
      while (true) {
        let w2 = next() - 1;
        if (w2 < 0) break;
        ret.push(read_replacement_table(w2, next));
      }
      return ret.flat();
    }
    function read_array_while(next) {
      let v2 = [];
      while (true) {
        let x2 = next(v2.length);
        if (!x2) break;
        v2.push(x2);
      }
      return v2;
    }
    function read_transposed(n2, w2, next) {
      let m2 = Array(n2).fill().map(() => []);
      for (let i = 0; i < w2; i++) {
        read_deltas(n2, next).forEach((x2, j) => m2[j].push(x2));
      }
      return m2;
    }
    function read_linear_table(w2, next) {
      let dx = 1 + next();
      let dy = next();
      let vN = read_array_while(next);
      let m2 = read_transposed(vN.length, 1 + w2, next);
      return m2.flatMap((v2, i) => {
        let [x2, ...ys] = v2;
        return Array(vN[i]).fill().map((_, j) => {
          let j_dy = j * dy;
          return [x2 + j * dx, ys.map((y2) => y2 + j_dy)];
        });
      });
    }
    function read_replacement_table(w2, next) {
      let n2 = 1 + next();
      let m2 = read_transposed(n2, 1 + w2, next);
      return m2.map((v2) => [v2[0], v2.slice(1)]);
    }
    function read_trie(next) {
      let ret = [];
      let sorted = read_sorted(next);
      expand(decode2([]), []);
      return ret;
      function decode2(Q2) {
        let S2 = next();
        let B2 = read_array_while(() => {
          let cps = read_sorted(next).map((i) => sorted[i]);
          if (cps.length) return decode2(cps);
        });
        return { S: S2, B: B2, Q: Q2 };
      }
      function expand({ S: S2, B: B2 }, cps, saved) {
        if (S2 & 4 && saved === cps[cps.length - 1]) return;
        if (S2 & 2) saved = cps[cps.length - 1];
        if (S2 & 1) ret.push(cps);
        for (let br of B2) {
          for (let cp of br.Q) {
            expand(br, [...cps, cp], saved);
          }
        }
      }
    }
    function hex_cp(cp) {
      return cp.toString(16).toUpperCase().padStart(2, "0");
    }
    function quote_cp(cp) {
      return `{${hex_cp(cp)}}`;
    }
    function explode_cp(s) {
      let cps = [];
      for (let pos = 0, len = s.length; pos < len; ) {
        let cp = s.codePointAt(pos);
        pos += cp < 65536 ? 1 : 2;
        cps.push(cp);
      }
      return cps;
    }
    function str_from_cps(cps) {
      const chunk = 4096;
      let len = cps.length;
      if (len < chunk) return String.fromCodePoint(...cps);
      let buf = [];
      for (let i = 0; i < len; ) {
        buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
      }
      return buf.join("");
    }
    function compare_arrays(a, b) {
      let n2 = a.length;
      let c = n2 - b.length;
      for (let i = 0; c == 0 && i < n2; i++) c = a[i] - b[i];
      return c;
    }
    var COMPRESSED = "AEUDVgHLCGMATwDUADIAdAAhADQAFAAtABQAIQAPACcADQASAAoAGAAJABIACQARAAUACwAFAAwABQAQAAMABwAEAAoABQAJAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACwANAA0AAwAKAAkABAAdAAYAZwDTAeYDMwCxCl8B8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgPi89uj00MsvBXxEPAGPCDwBnQKoEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiC+AZ4EWRJJFbEu7QDQLARtEbgECxDwAb/RyAk1AV4nD2cEQQKTAzsAGpobWgAahAGPCrysdy0OAKwAfFIcBAQFUmoA/PtZADkBIadVj2UMUgx5Il4ANQC9vAITAdQZWxDzALN9AhsZVwIcGSkCBAgXOhG7AqMZ4M7+1M0UAPDNAWsC+mcJDe8AAQA99zkEXLICyQozAo6lAobcP5JvjQLFzwKD9gU/OD8FEQCtEQL6bW+nAKUEvzjDHsuRyUvOFHcacUz5AqIFRSE2kzsBEQCuaQL5DQTlcgO6twSpTiUgCwIFCAUXBHQEqQV6swAVxUlmTmsCwjqsP/wKJQmXb793UgZBEBsnpRD3DDMBtQE7De1L2ATxBjsEyR99GRkPzZWcCKUt3QztJuMuoYBaI/UqgwXtS/Q83QtNUWgPWQtlCeM6Y4FOAyEBDSKLCt0NOQhtEPMKyWsN5RFFBzkD1UmaAKUHAQsRHTUVtSYQYqwLCTl3Bvsa9guPJq8TKXr8BdMaIQZNASka/wDPLueFsFoxXBxPXwYDCyUjxxSoUCANJUC3eEgaGwcVJakCkUNwSodRNh6TIfY8PQ1mLhNRfAf1PAUZTwuBPJ5Gq0UOEdI+jT1IIklMLAQ1fywvJ4sJzw+FDLl8cgFZCSEJsQxxEzERFzfFCDkHGS2XJCcVCCFGlWCaBPefA/MT0QMLBT8JQQcTA7UcLRMuFSkFDYEk1wLzNtUuswKPVoABFwXLDyUf3xBQR+AO6QibAmUDgyXrAC0VIQAXIpsIQ2MAX4/YUwUuywjHamwjdANnFOdhEXMHkQ5XB6ccMxW/HOFwyF4Lhggoo68JWwF1CZkBXwTjCAk1W4ygIEFnU4tYGJsgYUE/XfwCMQxlFZ9EvYd4AosPaxIbATUBcwc5DQECdxHtEWsQlQjrhgQ1tTP4OiUETyGDIBEKJwNPbM4LJyb5DPhpAaMSYgMMND137merYLYkF/0HGTLFQWAh8QuST80MnBrBGEJULhnkB78D8xrzJ+pBVwX/A6MDEzpNM+4EvQtpCIsJPwBJDqMXB9cYagpxjNABMYsBt5kDV5GDAm+PBjcHCwBnC4cFeeUAHQKnCKMABQDPA1cAOQKtB50AGQCFQQE9AycvASHlAo8DkwgxywGVLwHzKQQbwwwVAPc3bkoCw7ECgGpmogXdWAKOAkk1AU0lBAVOR1EDr3HhANsASwYT30cBFatKyxrjQwHfbysAxwD7AAU1BwVBAc0B820AtwFfCzEJorO1AU3pKQCDABVrAdcCiQDdADUAf/EBUwBNBVn5BdMCT0kBETEYK1dhAbsDHwEzAQ0AeQbLjaXJBx8EbQfTAhAbFeEC7y4HtQEDIt8TzULFAr3eVaFgAmSBAmJCW02vWzcgAqH3AmiYAmYJAp+EOBsLAmY7AmYmBG4EfwN/EwN+kjkGOXcXOYI6IyMCbB0CMjY4CgJtxwJtru+KM2dFKwFnAN4A4QBKBQeYDI0A/gvCAA21AncvAnaiPwJ5S0MCeLodXNtFrkbXAnw/AnrIAn0JAnzwBVkFIEgASH1jJAKBbQKAAAKABQJ/rklYSlsVF0rMAtEBAtDMSycDiE8Dh+ZExZEyAvKhXQMDA65LzkwtJQPPTUxNrwKLPwKK2MEbBx1DZwW3Ao43Ao5cQJeBAo7ZAo5ceFG0UzUKUtRUhQKT+wKTDADpABxVHlWvVdAGLBsplYYy4XhmRTs5ApefAu+yWCGoAFklApaPApZ8nACpWaxaCYFNADsClrUClk5cRFzRApnLAplkXMpdBxkCnJs5wjqdApwWAp+bAp64igAdDzEqDwKd8QKekgC1PWE0Ye8CntMCoG4BqQKenx8Cnk6lY8hkJyUrAievAiZ+AqD7AqBMAqLdAqHEAqYvAqXOAqf/AH0Cp/JofGixAANJahxq0QKs4wKsrgKtZwKtAgJXHQJV3AKx4dcDH05slwKyvQ0CsugXbOBtY21IXwMlzQK2XDs/bpADKUUCuF4CuUcVArkqd3A2cOECvRkCu9pwlgMyEQK+iHICAzNxAr4acyJzTwLDywLDBHOCdEs1RXTgAzynAzyaAz2/AsV8AsZHAsYQiQLIaVECyEQCyU8CyS4CZJ0C3dJ4eWF4rnklS9ADGKNnAgJh9BnzlSR7C16SXrsRAs9rAs9sL0tT0vMTnwDGrQLPcwEp6gNOEn5LBQLcJwLbigLSTwNSXANTXwEBA1WMgIk/AMsW7WBFghyC04LOg40C2scC2d6EEIRJpzwDhqUALwNkDoZxWfkAVQLfZQLeuHN3AuIv7RQB8zAnAfSbAfLShwLr8wLpcHkC6vkC6uQA+UcBuQLuiQLrnJaqlwMC7j8DheCYeXDgcaEC8wMAaQOOFpmTAvcTA5FuA5KHAveYAvnZAvhmmhyaq7s3mx4DnYMC/voBGwA5nxyfswMFjQOmagOm2QDRxQMGaqGIogUJAwxJAtQAPwMA4UEXUwER8wNrB5dnBQCTLSu3r73bAYmZFH8RBDkB+ykFIQ6dCZ8Akv0TtRQrxQL3LScApQC3BbmOkRc/xqdtQS4UJo0uAUMBgPwBtSYAdQMOBG0ALAIWDKEAAAoCPQJqA90DfgSRASBFBSF8CgAFAEQAEwA2EgJ3AQAF1QNr7wrFAgD3Cp8nv7G35QGRIUFCAekUfxE0wIkABAAbAFoCRQKEiwAGOlM6lI1tALg6jzrQAI04wTrcAKUA6ADLATqBOjs5/Dn5O3aJOls7nok6bzkYAVYBMwFsBS81XTWeNa01ZjV1NbY1xTWCNZE10jXhNZ41rTXuNf01sjXBNgI2ETXGNdU2FjYnNd417TYuNj02LjUtITY6Nj02PDbJNwgEkDxXNjg23TcgNw82yiA3iTcwCgSwPGc2JDcZN2w6jTchQtRDB0LgQwscDw8JmyhtKFFVBgDpfwDpsAD+mxQ91wLpNSMArQC9BbeOkRdLxptzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgELgEaJZkC7aMAoQCjBcGOmxdNxrsBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUHqSvAj5Gqwr7YrMUACT9AN3rlr3JG9m8w9lIAXltp/v8kfWaIaaR9OwpAES/I3ZVamDXSgB/UsOgAG6D0tq+5CIqE15FiAhV3yA2VhCQ7tj+m6xXaF53FIfGi/IAZIskMGAi2MU7MDVJNCbMzERyHZi+osdPtnFVbvq653O8rwaCy4IAf9OOok65AqJUtUriUfYsGPPVbe6jm0s9lbKlPCUKjdkHsFsEhvX4kT39ZCtAAbwQdn/h4TpO5hTByWAmr5n+Wuwhdegv6bmvX4LyOes3z2+cuHv2JFYwVMNuq2gzn8YHTjlUQd39osyWei4NKl3LAdfxlO876hh5ENp/cOvpuI9bF55guEthLLPOXjD4dktTH04P5TvZrWTM0e4+BHJxj7MLApXIFOs0sWKhNkG8iwuM5wR83my6V3wW06abhDzTXYfOr/ZpFXgXzmv4d12FFyP00/dPGbIVGV5ao8UufGzUwp/IHx6v/wDWJr9iaoCulhWwlZ7A8q/NMoD12+mBdNRgJYnThRLtMx1Bgwttn8/4Qn2CDfOSup9GVXEvA21ILgp0owHYxNOkpwLWz0G7K+WREIDjIzUzSn8I99CuJSmSpPyH0Ke6/NERYiNx+3dncSebPnOUnnWD61AhJ1n/tSLZmU5wYO5GfgzyAYJm6VL91LxZ8hL1lfximQxIDMRhIecQZBmeE5R0XlrpvwplVrJwpa8BBCdp93GPP9lyBeZ2zkRr920CR3cYbKpKHfogvm0nV7XdDz6EbjzlxADCMjSLXuXpIpyuizy39yY+I+H9rmpoIF3YwEjlH9MgGgWcCNTjHEWMqAbprn2Ox7rOHupaVE3lNyg3nt5XaZID6Y+uml5Ja+aOPu+BI+DZbiJVfaspUadakWUX6TA4dETkIqdJJHYnU4Z4yKpt5y8rVIahoMUf8A8kWtAQNCTbjp71gx3/zVdqNz1Sutkw0gFIMVm2BF4Xdv/0olw+NaDIR9Bb3DPweZA2K/cw+/b+AwyWl9ZOP67A9nexmeTNjfdzPGf9J6E6BMPKa5lJh+qNsdUz3HBUevU71eQFCqOcxiIYhacAhh/8PX0J5DdSViZ6WazDDx7cukJNpMfEkYLJ5Ao4vLoVd3d25Pg4qaVa2p2D2L3WvYPJ5Yf/A/MSxptjlgXL/KJtP2U0cRv2I09ATAiWCJYuRwiapeKFsqmi18yMMulDp3HdcIldq+7jkwsJUOHLHCzzzBw5XFvL0CAmo1ub456z7zb7shk3KPGCLZzr47oT1k/j06XNnJvG3Udv6XrP+wsqTBlZ5MaNPt9FOs/4Bt/ja/vbVhTNpBFl9Gq7MqINvGlWKOAwQzwOZy+EzSdjAqKJVV2YcskTuM94aIK+kc/AZaXiZLPREUDpkXIV947IFfj+85TrqPqLfkGcxgboMQjosf+az+odLNXdyp1mDNGsqSdK/pJ2Ca04mt/4d6s1X+lncOEYaGBBeW4pApGcjf7/XJCFbj3N3mFb+BtlIcw8ZiDKoClFX9Rf0bxCqtLpicObKJzBVVHr/6u4siH2hK75RNv7w9GfTbhJOQBYiFUZAByY4rn37tZBHT//kqKsNi3ryL9AqXJRzqiMIJMhILjoi/i8LVEsbu+Ih9bsyW16sgQqjYLO0qda6KaCPKj3DQcu6CfV5lKtjS3ZCdqLAZkOey9MR+QutJBGiz/r15GVD6rCVwJR4UUKC4GNJkfDf00OMW8aQtLSAGLXV8MIi9mbbl/qQEpxCm2L5hutFX4ekeLH4QgBWUFKs/2VVMKy46WtFE6AbwgmYm/Z0yHk5veDIrcl2HpVqb/rSE0PC9EbDzJEWqeaPhh7vF369Umq2kSiB3s5rBI6c/7N9bkRu4h2n+/h5nSwy+7n+/I+6oXQVANo2Jb5zDwtiBPf1ySCzHdT6yJShMzqSRZfnykX49CaFaxhoVF4PBhEuECJ1PrFYSpmHuyYsl14DTAV9ZxRms1XiR/kBrjhZjidOt0UNe+GSml7XNgpVw8YsUTmZXLTK+6iYnyW/wYR1W4UXwOi14xpFROHb6HcZzksgF5DbL2AFXzKNwHU2adjdAY+KCyM/cwRTBkkq/a227NI0q6DR2MkMCRu620t79bGcYUmACtqN3mk/0uNwd3JSXHqE1kzf6Yyj0W2083JNDRnIXDlgBxJ6uf58NN1f6FQiRCWB4egF8QDx74AixV8oTyw7PluIjr3/rj/WzgwPSq4xPojaF7V0xqG2u5ti2L1h6yYHv73Isrukr0kURDIEjClBsBx7kdcXUxaYMS0syT3ymLzDzslNDWQOT1Tao1YNmJHARUenhCkmV9tqCPGI5GqZaRpkiPxyjoncWjyOHYGqvbvRX+Bn1pn7EhRNXa1lqJPmoeN5VqdqIDPhEVhFsyG0d4iQEIYX0wZUbY2XbZWYlpZ/l66IrDDY0q1C1YzBDpHC4h05YqHQLqS9anyl22JQ6lEvjvdBwMHfE7z0luCXD34/rFeDa2TmSeEAykSpYO5j1G/nsgpR3qn0qaQEmLjnnLfcz+veoYqPnRqmRGwCJ6FJ3Gm/Z1/aVX5PSb03MMnjAf41ww54sD5k8FrkfBP+K0b1MrYpapWjtpZfve2HVf4ickX3LKSOhu7qI1Vd4c1kNrn2ajy1t4y93JhV4fnWCKq7OmFpcr7FjdJCXPTql0Drr14Ho3Z87+GPQ4Z/DcTiGqtvZxlRYi8cNuhXABveZIwNl/BX1huhVLaFax5OqypUrQRyb9OE3SSkPlDdy5uo5XGg2EIGEjLY1MO5cr1ibfiFWV7zspcTgkBKkwo5jPyAin04LqizZXb2tDRgwKJjGx4cVk3ngAQixwcxjYAg2Q7vmUR/hpwInMdw7OhC2qyf41vTPkudQAORS0DdLtOGQxb4fH2VYGsvJCkeWPeUwtf1/tuIhzXEThoCZzzSJqqjUtbaPI3ntHm3T5uf849hGUA0zU8ni5W+EEn3/0Y6oUhQFw9z0aGjkljBbAlFXc0y82G2wkd7VdgWa5KTgJJNjNwZMfmdnUIUn1JU5LiWX5UZEZbVlKSN76mlmjUR2ku+fucTNlO4IAAahnLjBhlvQNR9pe9swGBgq0YR7P3VCyI/seYwQ4QBzy9X+HPePgoF8WfKaJ4MBOhLCGHae6Z8xkNXwni9QAKvTNtVA56x8YJflZ/VvONRSlsSLmiSyNMnTjTaE1ko81zkzGEnVwEhjCzlwIqpxmpDAqwsEmtpdr3xpc7i/ZX3f2TzT3M0FdxIEQvO1jgmmiN+D1YpMduAzEhBtj2OBkMN/rv6p7Th4pSH6f5aH3aTvwFTl7EOSgGASI7ttyMehzpm4AVyK+bFEaFg9gnZsSUPpsbAe/0RFhrH+EXZ12Z7thf4dzN1+Sn+G8QrDA1VKaN4IFxD1rQz9Xq9Coii9S9/hPbTGjyBwFH3H1UdQuz5KsgPDEHua4/kPg2Gp/IIItsaLWBqiT9XH45MiQxSosGJ56H/0F2cjcCFd72l1665RNHURdC3lspI77esfJsl+rXXabkAy7vxDXG/XGGcKpwiKDPFfvMEgjkAHil4Za1F36RnyxxvdIAzvgfH8knukYDck07tc++DP4TdWeI7HXuq5Yl6VVFrUQtf64/dkXewlKZSHQo6YvCSpREB0GDrz+Ys2GfO8nw2SwrYwaf88AifzlPvP17bf1mI3AuccJvAjZIpBmqvharKFAebEjVKfGAwpQjWoXlm9LROsq9bCk1UeQ3CJxJqprzssS/Q04JeS1ReCCubL3J7sx86spkP4eNpp95UF+8K748icIs8vdILFklk9skQqi1So6cx3X906pvy1vz+KipTJ8fiVJxsV5MmT0XwA";
    const S0 = 44032;
    const L0 = 4352;
    const V0 = 4449;
    const T0 = 4519;
    const L_COUNT = 19;
    const V_COUNT = 21;
    const T_COUNT = 28;
    const N_COUNT = V_COUNT * T_COUNT;
    const S_COUNT = L_COUNT * N_COUNT;
    const S1 = S0 + S_COUNT;
    const L1 = L0 + L_COUNT;
    const V1 = V0 + V_COUNT;
    const T1 = T0 + T_COUNT;
    function unpack_cc(packed) {
      return packed >> 24 & 255;
    }
    function unpack_cp(packed) {
      return packed & 16777215;
    }
    let SHIFTED_RANK, EXCLUSIONS, DECOMP, RECOMP;
    function init$1() {
      let r2 = read_compressed_payload(COMPRESSED);
      SHIFTED_RANK = new Map(read_sorted_arrays(r2).flatMap((v2, i) => v2.map((x2) => [x2, i + 1 << 24])));
      EXCLUSIONS = new Set(read_sorted(r2));
      DECOMP = /* @__PURE__ */ new Map();
      RECOMP = /* @__PURE__ */ new Map();
      for (let [cp, cps] of read_mapped(r2)) {
        if (!EXCLUSIONS.has(cp) && cps.length == 2) {
          let [a, b] = cps;
          let bucket = RECOMP.get(a);
          if (!bucket) {
            bucket = /* @__PURE__ */ new Map();
            RECOMP.set(a, bucket);
          }
          bucket.set(b, cp);
        }
        DECOMP.set(cp, cps.reverse());
      }
    }
    function is_hangul(cp) {
      return cp >= S0 && cp < S1;
    }
    function compose_pair(a, b) {
      if (a >= L0 && a < L1 && b >= V0 && b < V1) {
        return S0 + (a - L0) * N_COUNT + (b - V0) * T_COUNT;
      } else if (is_hangul(a) && b > T0 && b < T1 && (a - S0) % T_COUNT == 0) {
        return a + (b - T0);
      } else {
        let recomp = RECOMP.get(a);
        if (recomp) {
          recomp = recomp.get(b);
          if (recomp) {
            return recomp;
          }
        }
        return -1;
      }
    }
    function decomposed(cps) {
      if (!SHIFTED_RANK) init$1();
      let ret = [];
      let buf = [];
      let check_order = false;
      function add(cp) {
        let cc2 = SHIFTED_RANK.get(cp);
        if (cc2) {
          check_order = true;
          cp |= cc2;
        }
        ret.push(cp);
      }
      for (let cp of cps) {
        while (true) {
          if (cp < 128) {
            ret.push(cp);
          } else if (is_hangul(cp)) {
            let s_index = cp - S0;
            let l_index = s_index / N_COUNT | 0;
            let v_index = s_index % N_COUNT / T_COUNT | 0;
            let t_index = s_index % T_COUNT;
            add(L0 + l_index);
            add(V0 + v_index);
            if (t_index > 0) add(T0 + t_index);
          } else {
            let mapped = DECOMP.get(cp);
            if (mapped) {
              buf.push(...mapped);
            } else {
              add(cp);
            }
          }
          if (!buf.length) break;
          cp = buf.pop();
        }
      }
      if (check_order && ret.length > 1) {
        let prev_cc = unpack_cc(ret[0]);
        for (let i = 1; i < ret.length; i++) {
          let cc2 = unpack_cc(ret[i]);
          if (cc2 == 0 || prev_cc <= cc2) {
            prev_cc = cc2;
            continue;
          }
          let j = i - 1;
          while (true) {
            let tmp = ret[j + 1];
            ret[j + 1] = ret[j];
            ret[j] = tmp;
            if (!j) break;
            prev_cc = unpack_cc(ret[--j]);
            if (prev_cc <= cc2) break;
          }
          prev_cc = unpack_cc(ret[i]);
        }
      }
      return ret;
    }
    function composed_from_decomposed(v2) {
      let ret = [];
      let stack = [];
      let prev_cp = -1;
      let prev_cc = 0;
      for (let packed of v2) {
        let cc2 = unpack_cc(packed);
        let cp = unpack_cp(packed);
        if (prev_cp == -1) {
          if (cc2 == 0) {
            prev_cp = cp;
          } else {
            ret.push(cp);
          }
        } else if (prev_cc > 0 && prev_cc >= cc2) {
          if (cc2 == 0) {
            ret.push(prev_cp, ...stack);
            stack.length = 0;
            prev_cp = cp;
          } else {
            stack.push(cp);
          }
          prev_cc = cc2;
        } else {
          let composed = compose_pair(prev_cp, cp);
          if (composed >= 0) {
            prev_cp = composed;
          } else if (prev_cc == 0 && cc2 == 0) {
            ret.push(prev_cp);
            prev_cp = cp;
          } else {
            stack.push(cp);
            prev_cc = cc2;
          }
        }
      }
      if (prev_cp >= 0) {
        ret.push(prev_cp, ...stack);
      }
      return ret;
    }
    function nfd(cps) {
      return decomposed(cps).map(unpack_cp);
    }
    function nfc(cps) {
      return composed_from_decomposed(decomposed(cps));
    }
    const HYPHEN = 45;
    const STOP_CH = ".";
    const FE0F = 65039;
    const UNIQUE_PH = 1;
    const Array_from = (x2) => Array.from(x2);
    function group_has_cp(g, cp) {
      return g.P.has(cp) || g.Q.has(cp);
    }
    class Emoji extends Array {
      get is_emoji() {
        return true;
      }
      // free tagging system
    }
    let MAPPED, IGNORED, CM, NSM, ESCAPE, GROUPS, WHOLE_VALID, WHOLE_MAP, VALID, EMOJI_LIST, EMOJI_ROOT;
    function init() {
      if (MAPPED) return;
      let r2 = read_compressed_payload(COMPRESSED$1);
      const read_sorted_array = () => read_sorted(r2);
      const read_sorted_set = () => new Set(read_sorted_array());
      const set_add_many = (set, v2) => v2.forEach((x2) => set.add(x2));
      MAPPED = new Map(read_mapped(r2));
      IGNORED = read_sorted_set();
      CM = read_sorted_array();
      NSM = new Set(read_sorted_array().map((i) => CM[i]));
      CM = new Set(CM);
      ESCAPE = read_sorted_set();
      read_sorted_set();
      let chunks = read_sorted_arrays(r2);
      let unrestricted = r2();
      const read_chunked = () => {
        let set = /* @__PURE__ */ new Set();
        read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
        set_add_many(set, read_sorted_array());
        return set;
      };
      GROUPS = read_array_while((i) => {
        let N2 = read_array_while(r2).map((x2) => x2 + 96);
        if (N2.length) {
          let R2 = i >= unrestricted;
          N2[0] -= 32;
          N2 = str_from_cps(N2);
          if (R2) N2 = `Restricted[${N2}]`;
          let P2 = read_chunked();
          let Q2 = read_chunked();
          let M2 = !r2();
          return { N: N2, P: P2, Q: Q2, M: M2, R: R2 };
        }
      });
      WHOLE_VALID = read_sorted_set();
      WHOLE_MAP = /* @__PURE__ */ new Map();
      let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b) => a - b);
      wholes.forEach((cp, i) => {
        let d = r2();
        let w2 = wholes[i] = d ? wholes[i - d] : { V: [], M: /* @__PURE__ */ new Map() };
        w2.V.push(cp);
        if (!WHOLE_VALID.has(cp)) {
          WHOLE_MAP.set(cp, w2);
        }
      });
      for (let { V: V2, M: M2 } of new Set(WHOLE_MAP.values())) {
        let recs = [];
        for (let cp of V2) {
          let gs = GROUPS.filter((g) => group_has_cp(g, cp));
          let rec = recs.find(({ G: G2 }) => gs.some((g) => G2.has(g)));
          if (!rec) {
            rec = { G: /* @__PURE__ */ new Set(), V: [] };
            recs.push(rec);
          }
          rec.V.push(cp);
          set_add_many(rec.G, gs);
        }
        let union = recs.flatMap((x2) => Array_from(x2.G));
        for (let { G: G2, V: V3 } of recs) {
          let complement = new Set(union.filter((g) => !G2.has(g)));
          for (let cp of V3) {
            M2.set(cp, complement);
          }
        }
      }
      VALID = /* @__PURE__ */ new Set();
      let multi = /* @__PURE__ */ new Set();
      const add_to_union = (cp) => VALID.has(cp) ? multi.add(cp) : VALID.add(cp);
      for (let g of GROUPS) {
        for (let cp of g.P) add_to_union(cp);
        for (let cp of g.Q) add_to_union(cp);
      }
      for (let cp of VALID) {
        if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
          WHOLE_MAP.set(cp, UNIQUE_PH);
        }
      }
      set_add_many(VALID, nfd(VALID));
      EMOJI_LIST = read_trie(r2).map((v2) => Emoji.from(v2)).sort(compare_arrays);
      EMOJI_ROOT = /* @__PURE__ */ new Map();
      for (let cps of EMOJI_LIST) {
        let prev = [EMOJI_ROOT];
        for (let cp of cps) {
          let next = prev.map((node) => {
            let child = node.get(cp);
            if (!child) {
              child = /* @__PURE__ */ new Map();
              node.set(cp, child);
            }
            return child;
          });
          if (cp === FE0F) {
            prev.push(...next);
          } else {
            prev = next;
          }
        }
        for (let x2 of prev) {
          x2.V = cps;
        }
      }
    }
    function quoted_cp(cp) {
      return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
    }
    function bidi_qq(s) {
      return `"${s}"‎`;
    }
    function check_label_extension(cps) {
      if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
        throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
      }
    }
    function check_leading_underscore(cps) {
      const UNDERSCORE = 95;
      for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
        if (cps[--i] !== UNDERSCORE) {
          throw new Error("underscore allowed only at start");
        }
      }
    }
    function check_fenced(cps) {
      let cp = cps[0];
      let prev = FENCED.get(cp);
      if (prev) throw error_placement(`leading ${prev}`);
      let n2 = cps.length;
      let last = -1;
      for (let i = 1; i < n2; i++) {
        cp = cps[i];
        let match = FENCED.get(cp);
        if (match) {
          if (last == i) throw error_placement(`${prev} + ${match}`);
          last = i + 1;
          prev = match;
        }
      }
      if (last == n2) throw error_placement(`trailing ${prev}`);
    }
    function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
      let buf = [];
      if (is_combining_mark(cps[0])) buf.push("◌");
      if (cps.length > max) {
        max >>= 1;
        cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];
      }
      let prev = 0;
      let n2 = cps.length;
      for (let i = 0; i < n2; i++) {
        let cp = cps[i];
        if (should_escape(cp)) {
          buf.push(str_from_cps(cps.slice(prev, i)));
          buf.push(quoter(cp));
          prev = i + 1;
        }
      }
      buf.push(str_from_cps(cps.slice(prev, n2)));
      return buf.join("");
    }
    function is_combining_mark(cp, only_nsm) {
      init();
      return CM.has(cp);
    }
    function should_escape(cp) {
      init();
      return ESCAPE.has(cp);
    }
    function ens_normalize(name2) {
      return flatten(split(name2, nfc, filter_fe0f));
    }
    function split(name2, nf2, ef2) {
      if (!name2) return [];
      init();
      let offset = 0;
      return name2.split(STOP_CH).map((label) => {
        let input = explode_cp(label);
        let info = {
          input,
          offset
          // codepoint, not substring!
        };
        offset += input.length + 1;
        try {
          let tokens = info.tokens = tokens_from_str(input, nf2, ef2);
          let token_count = tokens.length;
          let type;
          if (!token_count) {
            throw new Error(`empty label`);
          }
          let norm = info.output = tokens.flat();
          check_leading_underscore(norm);
          let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
          if (!emoji && norm.every((cp) => cp < 128)) {
            check_label_extension(norm);
            type = "ASCII";
          } else {
            let chars = tokens.flatMap((x2) => x2.is_emoji ? [] : x2);
            if (!chars.length) {
              type = "Emoji";
            } else {
              if (CM.has(norm[0])) throw error_placement("leading combining mark");
              for (let i = 1; i < token_count; i++) {
                let cps = tokens[i];
                if (!cps.is_emoji && CM.has(cps[0])) {
                  throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
                }
              }
              check_fenced(norm);
              let unique = Array_from(new Set(chars));
              let [g] = determine_group(unique);
              check_group(g, chars);
              check_whole(g, unique);
              type = g.N;
            }
          }
          info.type = type;
        } catch (err) {
          info.error = err;
        }
        return info;
      });
    }
    function check_whole(group, unique) {
      let maker;
      let shared = [];
      for (let cp of unique) {
        let whole = WHOLE_MAP.get(cp);
        if (whole === UNIQUE_PH) return;
        if (whole) {
          let set = whole.M.get(cp);
          maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
          if (!maker.length) return;
        } else {
          shared.push(cp);
        }
      }
      if (maker) {
        for (let g of maker) {
          if (shared.every((cp) => group_has_cp(g, cp))) {
            throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
          }
        }
      }
    }
    function determine_group(unique) {
      let groups = GROUPS;
      for (let cp of unique) {
        let gs = groups.filter((g) => group_has_cp(g, cp));
        if (!gs.length) {
          if (!GROUPS.some((g) => group_has_cp(g, cp))) {
            throw error_disallowed(cp);
          } else {
            throw error_group_member(groups[0], cp);
          }
        }
        groups = gs;
        if (gs.length == 1) break;
      }
      return groups;
    }
    function flatten(split2) {
      return split2.map(({ input, error, output: output2 }) => {
        if (error) {
          let msg = error.message;
          throw new Error(split2.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
        }
        return str_from_cps(output2);
      }).join(STOP_CH);
    }
    function error_disallowed(cp) {
      return new Error(`disallowed character: ${quoted_cp(cp)}`);
    }
    function error_group_member(g, cp) {
      let quoted = quoted_cp(cp);
      let gg2 = GROUPS.find((g2) => g2.P.has(cp));
      if (gg2) {
        quoted = `${gg2.N} ${quoted}`;
      }
      return new Error(`illegal mixture: ${g.N} + ${quoted}`);
    }
    function error_placement(where) {
      return new Error(`illegal placement: ${where}`);
    }
    function check_group(g, cps) {
      for (let cp of cps) {
        if (!group_has_cp(g, cp)) {
          throw error_group_member(g, cp);
        }
      }
      if (g.M) {
        let decomposed2 = nfd(cps);
        for (let i = 1, e = decomposed2.length; i < e; i++) {
          if (NSM.has(decomposed2[i])) {
            let j = i + 1;
            for (let cp; j < e && NSM.has(cp = decomposed2[j]); j++) {
              for (let k2 = i; k2 < j; k2++) {
                if (decomposed2[k2] == cp) {
                  throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
                }
              }
            }
            if (j - i > NSM_MAX) {
              throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
            }
            i = j;
          }
        }
      }
    }
    function tokens_from_str(input, nf2, ef2) {
      let ret = [];
      let chars = [];
      input = input.slice().reverse();
      while (input.length) {
        let emoji = consume_emoji_reversed(input);
        if (emoji) {
          if (chars.length) {
            ret.push(nf2(chars));
            chars = [];
          }
          ret.push(ef2(emoji));
        } else {
          let cp = input.pop();
          if (VALID.has(cp)) {
            chars.push(cp);
          } else {
            let cps = MAPPED.get(cp);
            if (cps) {
              chars.push(...cps);
            } else if (!IGNORED.has(cp)) {
              throw error_disallowed(cp);
            }
          }
        }
      }
      if (chars.length) {
        ret.push(nf2(chars));
      }
      return ret;
    }
    function filter_fe0f(cps) {
      return cps.filter((cp) => cp != FE0F);
    }
    function consume_emoji_reversed(cps, eaten) {
      let node = EMOJI_ROOT;
      let emoji;
      let pos = cps.length;
      while (pos) {
        node = node.get(cps[--pos]);
        if (!node) break;
        let { V: V2 } = node;
        if (V2) {
          emoji = V2;
          cps.length = pos;
        }
      }
      return emoji;
    }
    const normalize = (name2) => ens_normalize(name2);
    const namehash = (inputName) => {
      let node = "";
      for (let i = 0; i < 32; i += 1) {
        node += "00";
      }
      if (inputName) {
        const name2 = normalize(inputName);
        const labels = name2.split(".");
        for (let i = labels.length - 1; i >= 0; i -= 1) {
          const labelSha = sha3Raw(labels[i]).slice(2);
          node = sha3Raw(`0x${node}${labelSha}`).slice(2);
        }
      }
      return `0x${node}`;
    };
    var __awaiter$8 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class Registry {
      constructor(context, customRegistryAddress) {
        this.contract = new Contract(ENSRegistryAbi, customRegistryAddress !== null && customRegistryAddress !== void 0 ? customRegistryAddress : registryAddresses.main, context);
        this.context = context;
      }
      getOwner(name2) {
        return __awaiter$8(this, void 0, void 0, function* () {
          try {
            const result = this.contract.methods.owner(namehash(name2)).call();
            return result;
          } catch (error) {
            throw new Error();
          }
        });
      }
      getTTL(name2) {
        return __awaiter$8(this, void 0, void 0, function* () {
          try {
            return this.contract.methods.ttl(namehash(name2)).call();
          } catch (error) {
            throw new Error();
          }
        });
      }
      recordExists(name2) {
        return __awaiter$8(this, void 0, void 0, function* () {
          try {
            const promise = this.contract.methods.recordExists(namehash(name2)).call();
            return promise;
          } catch (error) {
            throw new Error();
          }
        });
      }
      getResolver(name2) {
        return __awaiter$8(this, void 0, void 0, function* () {
          try {
            return this.contract.methods.resolver(namehash(name2)).call().then((address) => {
              if (typeof address === "string") {
                const contract = new Contract(PublicResolverAbi, address, this.context);
                return contract;
              }
              throw new Error();
            });
          } catch (error) {
            throw new Error();
          }
        });
      }
      get events() {
        return this.contract.events;
      }
    }
    var __awaiter$7 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class Resolver {
      constructor(registry) {
        this.registry = registry;
      }
      getResolverContractAdapter(ENSName) {
        return __awaiter$7(this, void 0, void 0, function* () {
          return this.registry.getResolver(ENSName);
        });
      }
      //  https://eips.ethereum.org/EIPS/eip-165
      // eslint-disable-next-line class-methods-use-this
      checkInterfaceSupport(resolverContract, methodName) {
        var _a2, _b;
        return __awaiter$7(this, void 0, void 0, function* () {
          if (isNullish(interfaceIds[methodName]))
            throw new ResolverMethodMissingError((_a2 = resolverContract.options.address) !== null && _a2 !== void 0 ? _a2 : "", methodName);
          const supported = yield resolverContract.methods.supportsInterface(interfaceIds[methodName]).call();
          if (!supported)
            throw new ResolverMethodMissingError((_b = resolverContract.options.address) !== null && _b !== void 0 ? _b : "", methodName);
        });
      }
      supportsInterface(ENSName, interfaceId) {
        var _a2;
        return __awaiter$7(this, void 0, void 0, function* () {
          const resolverContract = yield this.getResolverContractAdapter(ENSName);
          let interfaceIdParam = interfaceId;
          if (!isHexStrict$1(interfaceIdParam)) {
            interfaceIdParam = (_a2 = sha3(interfaceId)) !== null && _a2 !== void 0 ? _a2 : "";
            if (interfaceId === "")
              throw new Error("Invalid interface Id");
            interfaceIdParam = interfaceIdParam.slice(0, 10);
          }
          return resolverContract.methods.supportsInterface(interfaceIdParam).call();
        });
      }
      // eslint-disable-next-line @typescript-eslint/no-inferrable-types
      getAddress(ENSName, coinType = 60) {
        return __awaiter$7(this, void 0, void 0, function* () {
          const resolverContract = yield this.getResolverContractAdapter(ENSName);
          yield this.checkInterfaceSupport(resolverContract, methodsInInterface.addr);
          return resolverContract.methods.addr(namehash(ENSName), coinType).call();
        });
      }
      getPubkey(ENSName) {
        return __awaiter$7(this, void 0, void 0, function* () {
          const resolverContract = yield this.getResolverContractAdapter(ENSName);
          yield this.checkInterfaceSupport(resolverContract, methodsInInterface.pubkey);
          return resolverContract.methods.pubkey(namehash(ENSName)).call();
        });
      }
      getContenthash(ENSName) {
        return __awaiter$7(this, void 0, void 0, function* () {
          const resolverContract = yield this.getResolverContractAdapter(ENSName);
          yield this.checkInterfaceSupport(resolverContract, methodsInInterface.contenthash);
          return resolverContract.methods.contenthash(namehash(ENSName)).call();
        });
      }
      setAddress(ENSName, address, txConfig) {
        return __awaiter$7(this, void 0, void 0, function* () {
          const resolverContract = yield this.getResolverContractAdapter(ENSName);
          yield this.checkInterfaceSupport(resolverContract, methodsInInterface.setAddr);
          return resolverContract.methods.setAddr(namehash(ENSName), address).send(txConfig);
        });
      }
      getText(ENSName, key) {
        return __awaiter$7(this, void 0, void 0, function* () {
          const resolverContract = yield this.getResolverContractAdapter(ENSName);
          yield this.checkInterfaceSupport(resolverContract, methodsInInterface.text);
          return resolverContract.methods.text(namehash(ENSName), key).call();
        });
      }
      getName(address, checkInterfaceSupport = true) {
        return __awaiter$7(this, void 0, void 0, function* () {
          const reverseName = `${address.toLowerCase().substring(2)}.addr.reverse`;
          const resolverContract = yield this.getResolverContractAdapter(reverseName);
          if (checkInterfaceSupport)
            yield this.checkInterfaceSupport(resolverContract, methodsInInterface.name);
          return resolverContract.methods.name(namehash(reverseName)).call();
        });
      }
    }
    var __awaiter$6 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class ENS extends Web3Context {
      /**
       * Use to create an instance of ENS
       * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)
       * @param provider - (Optional) The provider to use for the ENS instance
       * @example
       * ```ts
       * const ens = new ENS(
       * 	"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
       * 	"http://localhost:8545"
       * );
       *
       * console.log( ens.defaultChain);
       * > mainnet
       * ```
       */
      constructor(registryAddr, provider) {
        super(provider !== null && provider !== void 0 ? provider : "");
        this.registryAddress = registryAddr !== null && registryAddr !== void 0 ? registryAddr : registryAddresses.main;
        this._registry = new Registry(this.getContextObject(), registryAddr);
        this._resolver = new Resolver(this._registry);
      }
      /**
       * Returns the Resolver by the given address
       * @param name - The name of the ENS domain
       * @returns - An contract instance of the resolver
       *
       * @example
       * ```ts
       * const resolver = await ens.getResolver('resolver');
       *
       * console.log(resolver.options.address);
       * > '0x1234567890123456789012345678901234567890'
       * ```
       */
      getResolver(name2) {
        return __awaiter$6(this, void 0, void 0, function* () {
          return this._registry.getResolver(name2);
        });
      }
      /**
       * Returns true if the record exists
       * @param name - The ENS name
       * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.
       * @example
       * ```ts
       * const exists = await web3.eth.ens.recordExists('ethereum.eth');
       * ```
       */
      recordExists(name2) {
        return __awaiter$6(this, void 0, void 0, function* () {
          return this._registry.recordExists(name2);
        });
      }
      /**
       * Returns the caching TTL (time-to-live) of an ENS name.
       * @param name - The ENS name
       * @returns - Returns the caching TTL (time-to-live) of a name.
       * @example
       * ```ts
       * const owner = await web3.eth.ens.getTTL('ethereum.eth');
       * ```
       */
      getTTL(name2) {
        return __awaiter$6(this, void 0, void 0, function* () {
          return this._registry.getTTL(name2);
        });
      }
      /**
       * Returns the owner by the given name and current configured or detected Registry
       * @param name - The ENS name
       * @returns - Returns the address of the owner of the name.
       * @example
       * ```ts
       * const owner = await web3.eth.ens.getOwner('ethereum.eth');
       * ```
       */
      getOwner(name2) {
        return __awaiter$6(this, void 0, void 0, function* () {
          return this._registry.getOwner(name2);
        });
      }
      /**
       * Resolves an ENS name to an Ethereum address.
       * @param ENSName - The ENS name to resolve
       * @param coinType - (Optional) The coin type, defaults to 60 (ETH)
       * @returns - The Ethereum address of the given name
       * ```ts
       * const address = await web3.eth.ens.getAddress('ethereum.eth');
       * console.log(address);
       * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'
       * ```
       */
      getAddress(ENSName, coinType = 60) {
        return __awaiter$6(this, void 0, void 0, function* () {
          return this._resolver.getAddress(ENSName, coinType);
        });
      }
      /**
       * ERC-634 - Returns the text content stored in the resolver for the specified key.
       * @param ENSName - The ENS name to resolve
       * @param key - The key to resolve https://github.com/ethereum/ercs/blob/master/ERCS/erc-634.md#global-keys
       * @returns - The value content stored in the resolver for the specified key
       */
      getText(ENSNameOrAddr, key) {
        return __awaiter$6(this, void 0, void 0, function* () {
          if (isAddress$1(ENSNameOrAddr))
            return this._resolver.getText(yield this._resolver.getName(ENSNameOrAddr, false), key);
          return this._resolver.getText(ENSNameOrAddr, key);
        });
      }
      /**
       * Resolves the name of an ENS node.
       * @param ENSName - The node to resolve
       * @returns - The name
       */
      getName(ENSName, checkInterfaceSupport = true) {
        return __awaiter$6(this, void 0, void 0, function* () {
          return this._resolver.getName(ENSName, checkInterfaceSupport);
        });
      }
      /**
       * Returns the X and Y coordinates of the curve point for the public key.
       * @param ENSName - The ENS name
       * @returns - The X and Y coordinates of the curve point for the public key
       * @example
       * ```ts
       * const key = await web3.eth.ens.getPubkey('ethereum.eth');
       * console.log(key);
       * > {
       * "0": "0x0000000000000000000000000000000000000000000000000000000000000000",
       * "1": "0x0000000000000000000000000000000000000000000000000000000000000000",
       * "x": "0x0000000000000000000000000000000000000000000000000000000000000000",
       * "y": "0x0000000000000000000000000000000000000000000000000000000000000000"
       * }
       * ```
       */
      getPubkey(ENSName) {
        return __awaiter$6(this, void 0, void 0, function* () {
          return this._resolver.getPubkey(ENSName);
        });
      }
      /**
       * Returns the content hash object associated with an ENS node.
       * @param ENSName - The ENS name
       * @returns - The content hash object associated with an ENS node
       * @example
       * ```ts
       * const hash = await web3.eth.ens.getContenthash('ethereum.eth');
       * console.log(hash);
       * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'
       * ```
       */
      getContenthash(ENSName) {
        return __awaiter$6(this, void 0, void 0, function* () {
          return this._resolver.getContenthash(ENSName);
        });
      }
      /**
       * Checks if the current used network is synced and looks for ENS support there.
       * Throws an error if not.
       * @returns - The address of the ENS registry if the network has been detected successfully
       * @example
       * ```ts
       * console.log(await web3.eth.ens.checkNetwork());
       * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'
       * ```
       */
      checkNetwork() {
        return __awaiter$6(this, void 0, void 0, function* () {
          const now = Date.now() / 1e3;
          if (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {
            const syncInfo = yield isSyncing(this);
            if (!(typeof syncInfo === "boolean" && !syncInfo)) {
              throw new ENSNetworkNotSyncedError();
            }
            this._lastSyncCheck = now;
          }
          if (this._detectedAddress) {
            return this._detectedAddress;
          }
          const networkType = yield getId(this, Object.assign(Object.assign({}, this.defaultReturnFormat), { number: FMT_NUMBER.HEX }));
          const addr = registryAddresses[networkIds[networkType]];
          if (typeof addr === "undefined") {
            throw new ENSUnsupportedNetworkError(networkType);
          }
          this._detectedAddress = addr;
          return this._detectedAddress;
        });
      }
      /**
       * Returns true if the related Resolver does support the given signature or interfaceId.
       * @param ENSName - The ENS name
       * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation
       * @returns - `true` if the related Resolver does support the given signature or interfaceId.
       * @example
       * ```ts
       * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');
       * console.log(supports);
       * > true
       * ```
       */
      supportsInterface(ENSName, interfaceId) {
        return __awaiter$6(this, void 0, void 0, function* () {
          return this._resolver.supportsInterface(ENSName, interfaceId);
        });
      }
      /**
       * @returns - Returns all events that can be emitted by the ENS registry.
       */
      get events() {
        return this._registry.events;
      }
      /**
       * Sets the address of an ENS name in his resolver.
       * @param name - The ENS name
       * @param address - The address to set
       * @param txConfig - (Optional) The transaction config
       * @returns - The transaction receipt
       * ```ts
       * const receipt = await ens.setAddress('web3js.eth','0xe2597eb05cf9a87eb1309e86750c903ec38e527e');
       *```
       */
      setAddress(name2, address, txConfig) {
        return __awaiter$6(this, void 0, void 0, function* () {
          return this._resolver.setAddress(name2, address, txConfig);
        });
      }
    }
    var __awaiter$5 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const getAccounts = (requestManager) => __awaiter$5(void 0, void 0, void 0, function* () {
      const result = yield getAccounts$1(requestManager);
      return result.map(toChecksumAddress);
    });
    const newAccount = (requestManager, password) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(["string"], [password]);
      const result = yield newAccount$1(requestManager, password);
      return toChecksumAddress(result);
    });
    const unlockAccount = (requestManager, address, password, unlockDuration) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(["address", "string", "uint"], [address, password, unlockDuration]);
      return unlockAccount$1(requestManager, address, password, unlockDuration);
    });
    const lockAccount = (requestManager, address) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(["address"], [address]);
      return lockAccount$1(requestManager, address);
    });
    const importRawKey = (requestManager, keyData, passphrase) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(["string", "string"], [keyData, passphrase]);
      return importRawKey$1(requestManager, keyData, passphrase);
    });
    const sendTransaction = (requestManager, tx, passphrase, config) => __awaiter$5(void 0, void 0, void 0, function* () {
      const formattedTx = formatTransaction(tx, ETH_DATA_FORMAT, {
        transactionSchema: config === null || config === void 0 ? void 0 : config.customTransactionSchema
      });
      return sendTransaction$2(requestManager, formattedTx, passphrase);
    });
    const signTransaction = (requestManager, tx, passphrase, config) => __awaiter$5(void 0, void 0, void 0, function* () {
      const formattedTx = formatTransaction(tx, ETH_DATA_FORMAT, {
        transactionSchema: config === null || config === void 0 ? void 0 : config.customTransactionSchema
      });
      return signTransaction$2(requestManager, formattedTx, passphrase);
    });
    const sign = (requestManager, data, address, passphrase) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(["string", "address", "string"], [data, address, passphrase]);
      const dataToSign = isHexStrict$1(data) ? data : utf8ToHex(data);
      return sign$2(requestManager, dataToSign, address, passphrase);
    });
    const ecRecover = (requestManager, signedData, signature) => __awaiter$5(void 0, void 0, void 0, function* () {
      validator.validate(["string", "string"], [signedData, signature]);
      const signedDataString = isHexStrict$1(signedData) ? signedData : utf8ToHex(signedData);
      return ecRecover$1(requestManager, signedDataString, signature);
    });
    var __awaiter$4 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class Personal extends Web3Context {
      /**
       *Returns a list of accounts the node controls by using the provider and calling the RPC method personal_listAccounts. Using `web3.eth.accounts.create()` will not add accounts into this list. For that use `web3.eth.personal.newAccount()`.
       * @returns - An array of addresses controlled by the node.
       * @example
       * ```ts
       *  const accounts = await personal.getAccounts();
       * console.log(accounts);
       * >
       * [
       * 	'0x79D7BbaC53C9aF700d0B250e9AE789E503Fcd6AE',
       * 	'0xe2597eB05CF9a87eB1309e86750C903EC38E527e',
       * 	'0x7eD0e85B8E1E925600B4373e6d108F34AB38a401',
       * 	'0xE4bEEf667408b99053dC147Ed19592aDa0d77F59',
       * 	'0x7AB80aeB6bb488B7f6c41c58e83Ef248eB39c882',
       * 	'0x12B1D9d74d73b1C3A245B19C1C5501c653aF1af9',
       * 	'0x1a6075A263Ee140e00Dbf8E374Fc5A443d097894',
       * 	'0x4FEC0A51024B13030D26E70904B066C6d41157A5',
       * 	'0x03095dc4857BB26f3a4550c5651Df8b7f6b6B1Ef',
       * 	'0xac0B9b6e8A17991cb172B2ABAF45Fb5eb769E540'
       * ]
       * ```
       */
      getAccounts() {
        return __awaiter$4(this, void 0, void 0, function* () {
          return getAccounts(this.requestManager);
        });
      }
      /**
       * Creates a new account and returns its address.
       * **_NOTE:_**  This function sends a sensitive information like password. Never call this function over a unsecured Websocket or HTTP provider, as your password will be sent in plain text!
       * @param password - The password to encrypt the account with.
       * @returns - The address of the new account.
       * @example
       * ```ts
       * const addr = await web3.eth.personal.newAccount('password');
       * console.log(addr);
       * > '0x1234567891011121314151617181920212223456'
       * ```
       */
      newAccount(password) {
        return __awaiter$4(this, void 0, void 0, function* () {
          return newAccount(this.requestManager, password);
        });
      }
      /**
       * Unlocks an account for a given duration.
       * @param address - The address of the account to unlock.
       * @param password - The password of the account to unlock.
       * @param unlockDuration - The duration in seconds to unlock the account for.
       * @example
       * ```ts
       * await personal.unlockAccount(
       * 	"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
       * 	"123456",
       * 	600
       * );
       * ```
       */
      unlockAccount(address, password, unlockDuration) {
        return __awaiter$4(this, void 0, void 0, function* () {
          return unlockAccount(this.requestManager, address, password, unlockDuration);
        });
      }
      /**
       * Locks the given account
       * @param address - The address of the account to lock.
       * @returns - `true` if the account was locked, otherwise `false`.
       * @example
       * ```ts
       * await personal.lockAccount(
       * 	"0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e"
       * );
       * ```
       */
      lockAccount(address) {
        return __awaiter$4(this, void 0, void 0, function* () {
          return lockAccount(this.requestManager, address);
        });
      }
      /**
       * Imports the given private key into the key store, encrypting it with the passphrase.
       * @param keyData - An unencrypted private key (hex string).
       * @param passphrase  - The password of the account
       * @returns - The address of the new account.
       * @example
       * ```ts
       * const accountAddress = await personal.importRawKey(
       * 	"abe40cb08850da918ee951b237fa87946499b2d8643e4aa12b0610b050c731f6",
       * 	"123456"
       * );
       *
       * console.log(unlockTx);
       * > 0x8727a8b34ec833154b72b62cac05d69f86eb6556
       * ```
       */
      importRawKey(keyData, passphrase) {
        return __awaiter$4(this, void 0, void 0, function* () {
          return importRawKey(this.requestManager, keyData, passphrase);
        });
      }
      /**
       * This method sends a transaction over the management API.
       * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
       * @param tx - The transaction options
       * @param passphrase - The passphrase of the current account
       * @returns - The transaction hash
       * @example
       * ```ts
       * const txHash = personal
       * .sendTransaction({
       *  	from: "0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
       * 	gasPrice: "20000000000",
       * 	gas: "21000",
       * 	to: "0x3535353535353535353535353535353535353535",
       * 	value: "1000000",
       * 	data: "",
       * 	nonce: 0,
       * },
       * "123456");
       *
       * console.log(txHash);
       * > 0x9445325c3c5638c9fe425b003b8c32f03e9f99d409555a650a6838ba712bb51b
       * ```
       */
      sendTransaction(tx, passphrase) {
        return __awaiter$4(this, void 0, void 0, function* () {
          return sendTransaction(this.requestManager, tx, passphrase, this.config);
        });
      }
      /**
       * Signs a transaction. This account needs to be unlocked.
       * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
       * @param tx - The transaction data to sign. See sendTransaction  for more information.
       * @param passphrase - The password of the `from` account, to sign the transaction with.
       * @returns - The RLP encoded transaction. The `raw` property can be used to send the transaction using  sendSignedTransaction.
       * @example
       * ```ts
       * const tx = personal
       * .signTransaction({
       * 	from: "0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e",
       * 	gasPrice: "20000000000",
       * 	gas: "21000",
       * 	to: "0x3535353535353535353535353535353535353535",
       * 	value: "1000000000000000000",
       * 	data: "",
       * 	nonce: 0,
       * },
       * "123456");
       *
       * console.log(tx);
       *
       * > {
       * 	raw: '0xf86e808504a817c800825208943535353535353535353535353535353535353535880de0b6b3a764000080820a95a0c951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526a038b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',
       * 	tx: {
       * 	type: '0x0',
       * 	nonce: '0x0',
       * 	gasPrice: '0x4a817c800',
       * 	maxPriorityFeePerGas: null,
       * 	maxFeePerGas: null,
       * 	gas: '0x5208',
       * 	value: '0xde0b6b3a7640000',
       * 	input: '0x',
       * 	v: '0xa95',
       * 	r: '0xc951c03238fe930e6e69ab9d6af9f29248a514048e44884f0e60c4de40de3526',
       * 	s: '0x38b71399bf0c8925749ab79e91ce6cd2fc068c84c18ff6a197b48c4cbef01e00',
       * 	to: '0x3535353535353535353535353535353535353535',
       * 	hash: '0x65e3df790ab2a32068b13cff970b26445b8995229ae4abbed61bd996f09fce69'
       * 	}
       * }
       * ```
       */
      signTransaction(tx, passphrase) {
        return __awaiter$4(this, void 0, void 0, function* () {
          return signTransaction(this.requestManager, tx, passphrase, this.config);
        });
      }
      /**
       * Calculates an Ethereum specific signature with:
       * sign(keccak256("\x19Ethereum Signed Message:\n" + dataToSign.length + dataToSign)))
       * Adding a prefix to the message makes the calculated signature recognisable as an Ethereum specific signature.
       *
       * If you have the original message and the signed message, you can discover the signing account address using web3.eth.personal.ecRecover
       * **_NOTE:_** Sending your account password over an unsecured HTTP RPC connection is highly unsecure.
       * @param data - The data to sign.
       * @param address - The address to sign with.
       * @param passphrase - The passphrase to decrypt the account with.
       * @returns - The signature.
       * @example
       * ```ts
       * const sig = await personal.sign("Hello world", "0x0D4Aa485ECbC499c70860fEb7e5AaeAf5fd8172E", "123456")
       * console.log(sig)
       * > 0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b
       * ```
       */
      sign(data, address, passphrase) {
        return __awaiter$4(this, void 0, void 0, function* () {
          return sign(this.requestManager, data, address, passphrase);
        });
      }
      /**
       * Recovers the account that signed the data.
       * @param signedData - Data that was signed. If String it will be converted using {@link utf8ToHex}
       * @param signature - The signature
       * @returns - The address of the account that signed the data.
       * @example
       * ```ts
       *  const address = await personal.ecRecover(
       * 	"Hello world",
       * 	"0x5d21d01b3198ac34d0585a9d76c4d1c8123e5e06746c8962318a1c08ffb207596e6fce4a6f377b7c0fc98c5f646cd73438c80e8a1a95cbec55a84c2889dca0301b"
       * );
       * console.log(address);
       * > 0x0d4aa485ecbc499c70860feb7e5aaeaf5fd8172e
       * ```
       */
      ecRecover(signedData, signature) {
        return __awaiter$4(this, void 0, void 0, function* () {
          return ecRecover(this.requestManager, signedData, signature);
        });
      }
    }
    var Transport;
    (function(Transport2) {
      Transport2["HTTPS"] = "https";
      Transport2["WebSocket"] = "wss";
    })(Transport || (Transport = {}));
    var Network;
    (function(Network2) {
      Network2["ETH_MAINNET"] = "eth_mainnet";
      Network2["ETH_GOERLI"] = "eth_goerli";
      Network2["ETH_SEPOLIA"] = "eth_sepolia";
      Network2["ETH_HOLESKY"] = "eth_holesky";
      Network2["POLYGON_MAINNET"] = "polygon_mainnet";
      Network2["POLYGON_MUMBAI"] = "polygon_mumbai";
      Network2["POLYGON_AMONY"] = "polygon_amony";
      Network2["ARBITRUM_MAINNET"] = "arbitrum_mainnet";
      Network2["ARBITRUM_SEPOLIA"] = "arbitrum_sepolia";
      Network2["BASE_MAINNET"] = "base_mainnet";
      Network2["BASE_SEPOLIA"] = "base_sepolia";
      Network2["OPTIMISM_MAINNET"] = "optimism_mainnet";
      Network2["OPTIMISM_SEPOLIA"] = "optimism_sepolia";
      Network2["BNB_MAINNET"] = "bnb_mainnet";
      Network2["BNB_TESTNET"] = "bnb_testnet";
    })(Network || (Network = {}));
    const ERR_QUICK_NODE_RATE_LIMIT = 1300;
    class QuickNodeRateLimitError extends BaseWeb3Error {
      constructor(error) {
        super(`You've reach the rate limit of free RPC calls from our Partner Quick Nodes. There are two options you can either create a paid Quick Nodes account and get 20% off for 2 months using WEB3JS referral code, or use Free public RPC endpoint.`, error);
        this.code = ERR_QUICK_NODE_RATE_LIMIT;
      }
    }
    const ERR_PROVIDER_CONFIG_OPTIONS = 1301;
    class ProviderConfigOptionsError extends BaseWeb3Error {
      constructor(msg) {
        super(`Invalid provider config options given for ${msg}`);
        this.code = ERR_PROVIDER_CONFIG_OPTIONS;
      }
    }
    var __awaiter$3 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    class Web3ExternalProvider extends Eip1193Provider {
      constructor(network, transport, token, host, providerConfigOptions) {
        super();
        if (providerConfigOptions !== void 0 && transport === Transport.HTTPS && !("providerOptions" in providerConfigOptions)) {
          throw new ProviderConfigOptionsError("HTTP Provider");
        } else if (providerConfigOptions !== void 0 && transport === Transport.WebSocket && !("socketOptions" in providerConfigOptions || "reconnectOptions" in providerConfigOptions)) {
          throw new ProviderConfigOptionsError("Websocket Provider");
        }
        this.transport = transport;
        if (transport === Transport.HTTPS) {
          this.provider = new HttpProvider(this.getRPCURL(network, transport, token, host), providerConfigOptions);
        } else if (transport === Transport.WebSocket) {
          this.provider = new WebSocketProvider(this.getRPCURL(network, transport, token, host), providerConfigOptions === null || providerConfigOptions === void 0 ? void 0 : providerConfigOptions.socketOptions, providerConfigOptions === null || providerConfigOptions === void 0 ? void 0 : providerConfigOptions.reconnectOptions);
        }
      }
      request(payload, requestOptions) {
        return __awaiter$3(this, void 0, void 0, function* () {
          if (this.transport === Transport.HTTPS) {
            return yield this.provider.request(payload, requestOptions);
          }
          return this.provider.request(payload);
        });
      }
      getStatus() {
        return this.provider.getStatus();
      }
      supportsSubscriptions() {
        return this.provider.supportsSubscriptions();
      }
      once(_type, _listener) {
        var _a2;
        if ((_a2 = this.provider) === null || _a2 === void 0 ? void 0 : _a2.once)
          this.provider.once(_type, _listener);
      }
      removeAllListeners(_type) {
        var _a2;
        if ((_a2 = this.provider) === null || _a2 === void 0 ? void 0 : _a2.removeAllListeners)
          this.provider.removeAllListeners(_type);
      }
      connect() {
        var _a2;
        if ((_a2 = this.provider) === null || _a2 === void 0 ? void 0 : _a2.connect)
          this.provider.connect();
      }
      disconnect(_code, _data) {
        var _a2;
        if ((_a2 = this.provider) === null || _a2 === void 0 ? void 0 : _a2.disconnect)
          this.provider.disconnect(_code, _data);
      }
      reset() {
        var _a2;
        if ((_a2 = this.provider) === null || _a2 === void 0 ? void 0 : _a2.reset)
          this.provider.reset();
      }
      on(_type, _listener) {
        if (this.provider)
          this.provider.on(_type, _listener);
      }
      removeListener(_type, _listener) {
        if (this.provider)
          this.provider.removeListener(_type, _listener);
      }
    }
    var __awaiter$2 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const isValid = (str) => str !== void 0 && str.trim().length > 0;
    class QuickNodeProvider extends Web3ExternalProvider {
      // eslint-disable-next-line default-param-last
      constructor(network = Network.ETH_MAINNET, transport = Transport.HTTPS, token = "", host = "", providerConfigOptions) {
        super(network, transport, token, host, providerConfigOptions);
      }
      request(payload, requestOptions) {
        const _super = Object.create(null, {
          request: { get: () => super.request }
        });
        return __awaiter$2(this, void 0, void 0, function* () {
          try {
            return yield _super.request.call(this, payload, requestOptions);
          } catch (error) {
            if (error instanceof ResponseError && error.statusCode === 429) {
              throw new QuickNodeRateLimitError(error);
            }
            throw error;
          }
        });
      }
      // eslint-disable-next-line class-methods-use-this
      getRPCURL(network, transport, _token, _host) {
        let host = "";
        let token = "";
        switch (network) {
          case Network.ETH_MAINNET:
            host = isValid(_host) ? _host : "powerful-holy-bush.quiknode.pro";
            token = isValid(_token) ? _token : "3240624a343867035925ff7561eb60dfdba2a668";
            break;
          case Network.ETH_SEPOLIA:
            host = isValid(_host) ? _host : "dimensional-fabled-glitter.ethereum-sepolia.quiknode.pro";
            token = isValid(_token) ? _token : "382a3b5a4b938f2d6e8686c19af4b22921fde2cd";
            break;
          case Network.ETH_HOLESKY:
            host = isValid(_host) ? _host : "yolo-morning-card.ethereum-holesky.quiknode.pro";
            token = isValid(_token) ? _token : "481ebe70638c4dcf176af617a16d02ab866b9af9";
            break;
          case Network.ARBITRUM_MAINNET:
            host = isValid(_host) ? _host : "autumn-divine-dinghy.arbitrum-mainnet.quiknode.pro";
            token = isValid(_token) ? _token : "a5d7bfbf60b5ae9ce3628e53d69ef50d529e9a8c";
            break;
          case Network.ARBITRUM_SEPOLIA:
            host = isValid(_host) ? _host : "few-patient-pond.arbitrum-sepolia.quiknode.pro";
            token = isValid(_token) ? _token : "3be985450970628c860b959c65cd2642dcafe53c";
            break;
          case Network.BNB_MAINNET:
            host = isValid(_host) ? _host : "purple-empty-reel.bsc.quiknode.pro";
            token = isValid(_token) ? _token : "ebf6c532961e21f092ff2facce1ec4c89c540158";
            break;
          case Network.BNB_TESTNET:
            host = isValid(_host) ? _host : "floral-rough-scion.bsc-testnet.quiknode.pro";
            token = isValid(_token) ? _token : "5b297e5acff5f81f4c37ebf6f235f7299b6f9d28";
            break;
          case Network.POLYGON_MAINNET:
            host = isValid(_host) ? _host : "small-chaotic-moon.matic.quiknode.pro";
            token = isValid(_token) ? _token : "847569f8a017e84d985e10d0f44365d965a951f1";
            break;
          case Network.POLYGON_AMONY:
            host = isValid(_host) ? _host : "prettiest-side-shape.matic-amoy.quiknode.pro";
            token = isValid(_token) ? _token : "79a9476eea661d4f82de614db1d8a895b14b881c";
            break;
          default:
            throw new Error("Network info not avalible.");
        }
        return `${transport}://${host}/${token}`;
      }
    }
    const mainnet = new QuickNodeProvider();
    const abi = {
      encodeEventSignature,
      encodeFunctionCall,
      encodeFunctionSignature,
      encodeParameter,
      encodeParameters,
      decodeParameter,
      decodeParameters,
      decodeLog
    };
    var __awaiter$1 = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    const initAccountsForContext = (context) => {
      const signTransactionWithContext = (transaction, privateKey) => __awaiter$1(void 0, void 0, void 0, function* () {
        const tx = yield prepareTransactionForSigning(transaction, context);
        const privateKeyBytes = format({ format: "bytes" }, privateKey, ETH_DATA_FORMAT);
        return signTransaction$4(tx, privateKeyBytes);
      });
      const privateKeyToAccountWithContext = (privateKey) => {
        const account = privateKeyToAccount(privateKey);
        return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter$1(void 0, void 0, void 0, function* () {
          return signTransactionWithContext(transaction, account.privateKey);
        }) });
      };
      const decryptWithContext = (keystore, password, options) => __awaiter$1(void 0, void 0, void 0, function* () {
        var _a2;
        const account = yield decrypt(keystore, password, (_a2 = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a2 !== void 0 ? _a2 : true);
        return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter$1(void 0, void 0, void 0, function* () {
          return signTransactionWithContext(transaction, account.privateKey);
        }) });
      });
      const createWithContext = () => {
        const account = create();
        return Object.assign(Object.assign({}, account), { signTransaction: (transaction) => __awaiter$1(void 0, void 0, void 0, function* () {
          return signTransactionWithContext(transaction, account.privateKey);
        }) });
      };
      const wallet = new Wallet({
        create: createWithContext,
        privateKeyToAccount: privateKeyToAccountWithContext,
        decrypt: decryptWithContext
      });
      return {
        signTransaction: signTransactionWithContext,
        create: createWithContext,
        privateKeyToAccount: privateKeyToAccountWithContext,
        decrypt: decryptWithContext,
        recoverTransaction,
        hashMessage,
        sign: sign$4,
        recover,
        encrypt,
        wallet,
        privateKeyToAddress,
        parseAndValidatePrivateKey,
        privateKeyToPublicKey
      };
    };
    const Web3PkgInfo = { version: "4.14.0" };
    var __awaiter = function(thisArg, _arguments, P2, generator) {
      function adopt(value) {
        return value instanceof P2 ? value : new P2(function(resolve) {
          resolve(value);
        });
      }
      return new (P2 || (P2 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var Eip6963EventName;
    (function(Eip6963EventName2) {
      Eip6963EventName2["eip6963announceProvider"] = "eip6963:announceProvider";
      Eip6963EventName2["eip6963requestProvider"] = "eip6963:requestProvider";
    })(Eip6963EventName || (Eip6963EventName = {}));
    const eip6963ProvidersMap = /* @__PURE__ */ new Map();
    const web3ProvidersMapUpdated = "web3:providersMapUpdated";
    const requestEIP6963Providers = () => __awaiter(void 0, void 0, void 0, function* () {
      return new Promise((resolve, reject) => {
        if (typeof window === "undefined") {
          reject(new Error("window object not available, EIP-6963 is intended to be used within a browser"));
        }
        window.addEventListener(Eip6963EventName.eip6963announceProvider, (event) => {
          eip6963ProvidersMap.set(event.detail.info.uuid, event.detail);
          const newEvent = new CustomEvent(web3ProvidersMapUpdated, { detail: eip6963ProvidersMap });
          window.dispatchEvent(newEvent);
          resolve(eip6963ProvidersMap);
        });
        window.dispatchEvent(new Event(Eip6963EventName.eip6963requestProvider));
      });
    });
    const onNewProviderDiscovered = (callback) => {
      if (typeof window === "undefined") {
        throw new Error("window object not available, EIP-6963 is intended to be used within a browser");
      }
      window.addEventListener(web3ProvidersMapUpdated, callback);
    };
    class Web3 extends Web3Context {
      constructor(providerOrContext = mainnet) {
        var _a2;
        if (isNullish(providerOrContext) || typeof providerOrContext === "string" && providerOrContext.trim() === "" || typeof providerOrContext !== "string" && !isSupportedProvider(providerOrContext) && !providerOrContext.provider) {
          console.warn("NOTE: web3.js is running without provider. You need to pass a provider in order to interact with the network!");
        }
        let contextInitOptions = {};
        if (typeof providerOrContext === "string" || isSupportedProvider(providerOrContext)) {
          contextInitOptions.provider = providerOrContext;
        } else if (providerOrContext) {
          contextInitOptions = providerOrContext;
        } else {
          contextInitOptions = {};
        }
        contextInitOptions.registeredSubscriptions = Object.assign(Object.assign({}, registeredSubscriptions), (_a2 = contextInitOptions.registeredSubscriptions) !== null && _a2 !== void 0 ? _a2 : {});
        super(contextInitOptions);
        const accounts = initAccountsForContext(this);
        this._wallet = accounts.wallet;
        this._accountProvider = accounts;
        this.utils = utils;
        const self2 = this;
        class ContractBuilder extends Contract {
          constructor(jsonInterface, addressOrOptionsOrContext, optionsOrContextOrReturnFormat, contextOrReturnFormat, returnFormat) {
            if (isContractInitOptions(addressOrOptionsOrContext) && isContractInitOptions(optionsOrContextOrReturnFormat)) {
              throw new InvalidMethodParamsError("Should not provide options at both 2nd and 3rd parameters");
            }
            let address;
            let options = {};
            let context;
            let dataFormat;
            if (!isNullish(addressOrOptionsOrContext) && typeof addressOrOptionsOrContext !== "object" && typeof addressOrOptionsOrContext !== "string") {
              throw new InvalidMethodParamsError();
            }
            if (typeof addressOrOptionsOrContext === "string") {
              address = addressOrOptionsOrContext;
            }
            if (isContractInitOptions(addressOrOptionsOrContext)) {
              options = addressOrOptionsOrContext;
            } else if (isContractInitOptions(optionsOrContextOrReturnFormat)) {
              options = optionsOrContextOrReturnFormat;
            } else {
              options = {};
            }
            if (addressOrOptionsOrContext instanceof Web3Context) {
              context = addressOrOptionsOrContext;
            } else if (optionsOrContextOrReturnFormat instanceof Web3Context) {
              context = optionsOrContextOrReturnFormat;
            } else if (contextOrReturnFormat instanceof Web3Context) {
              context = contextOrReturnFormat;
            } else {
              context = self2.getContextObject();
            }
            if (returnFormat) {
              dataFormat = returnFormat;
            } else if (isDataFormat(optionsOrContextOrReturnFormat)) {
              dataFormat = optionsOrContextOrReturnFormat;
            } else if (isDataFormat(contextOrReturnFormat)) {
              dataFormat = contextOrReturnFormat;
            }
            super(jsonInterface, address, options, context, dataFormat);
            super.subscribeToContextEvents(self2);
            if (!isNullish(eth)) {
              const TxMiddleware = eth.getTransactionMiddleware();
              if (!isNullish(TxMiddleware)) {
                super.setTransactionMiddleware(TxMiddleware);
              }
            }
          }
        }
        const eth = self2.use(Web3Eth);
        this.eth = Object.assign(eth, {
          // ENS module
          ens: self2.use(ENS, registryAddresses.main),
          // Iban helpers
          Iban,
          net: self2.use(Net),
          personal: self2.use(Personal),
          // Contract helper and module
          Contract: ContractBuilder,
          // ABI Helpers
          abi,
          // Accounts helper
          accounts
        });
      }
    }
    Web3.version = Web3PkgInfo.version;
    Web3.utils = utils;
    Web3.requestEIP6963Providers = requestEIP6963Providers;
    Web3.onNewProviderDiscovered = onNewProviderDiscovered;
    Web3.modules = {
      Web3Eth,
      Iban,
      Net,
      ENS,
      Personal
    };
    const VotingDApp = () => {
      const [web3, setWeb3] = reactExports.useState(null);
      const [contract, setContract] = reactExports.useState(null);
      const [account, setAccount] = reactExports.useState("");
      const [loading, setLoading] = reactExports.useState(true);
      const [voting, setVoting] = reactExports.useState(false);
      const [candidates, setCandidates] = reactExports.useState([]);
      const [selectedCandidate, setSelectedCandidate] = reactExports.useState("");
      const [error, setError] = reactExports.useState("");
      const [showConfirmation, setShowConfirmation] = reactExports.useState(false);
      const buildBearNetwork = {
        chainId: "0x532D",
        // 21293 in hex
        chainName: "BuildBear",
        nativeCurrency: {
          name: "ETH",
          symbol: "ETH",
          decimals: 18
        },
        rpcUrls: ["https://rpc.buildbear.io/definite-mystique-96f6304e"],
        // Replace with your BuildBear RPC URL
        blockExplorerUrls: []
        // Replace with your BuildBear explorer URL
      };
      const switchToBuildBear = async () => {
        if (!window.ethereum) return false;
        try {
          await window.ethereum.request({
            method: "wallet_switchEthereumChain",
            params: [{ chainId: buildBearNetwork.chainId }]
          });
          return true;
        } catch (switchError) {
          if (switchError.code === 4902) {
            try {
              await window.ethereum.request({
                method: "wallet_addEthereumChain",
                params: [buildBearNetwork]
              });
              return true;
            } catch (addError) {
              console.error("Error adding BuildBear network:", addError);
              setError("Failed to add BuildBear network to MetaMask");
              return false;
            }
          }
          console.error("Error switching to BuildBear network:", switchError);
          return false;
        }
      };
      const initializeWeb3 = async () => {
        try {
          if (window.ethereum) {
            const networkSwitched = await switchToBuildBear();
            if (!networkSwitched) {
              setLoading(false);
              return;
            }
            const web3Instance = new Web3(window.ethereum);
            setWeb3(web3Instance);
            const accounts = await window.ethereum.request({
              method: "eth_requestAccounts"
            });
            setAccount(accounts[0]);
            const response = await fetch(
              "https://raw.githubusercontent.com/PhyG0/Voting-Dapp/refs/heads/main/Voting.json"
            );
            const data = await response.json();
            console.log(data);
            const contractAddress = data.networks["21293"].address;
            const contract2 = new web3Instance.eth.Contract(
              data.abi,
              contractAddress
            );
            setContract(contract2);
            const results = await contract2.methods.getResults().call();
            const formattedResults = results.map((candidate, index) => ({
              id: index.toString(),
              name: candidate.name,
              voteCount: Number(candidate.voteCount)
            }));
            setCandidates(formattedResults);
            setLoading(false);
            window.ethereum.on("chainChanged", (chainId) => {
              if (chainId !== buildBearNetwork.chainId) {
              } else {
                setError("");
              }
            });
          } else {
            setError("Please install MetaMask to use this DApp");
            setLoading(false);
          }
        } catch (err) {
          console.error("Initialization error:", err);
          setError(err.message);
          setLoading(false);
        }
      };
      const handleVoteClick = () => {
        if (!selectedCandidate) {
          setError("Please select a candidate");
          return;
        }
        setError("");
        setShowConfirmation(true);
      };
      const handleConfirmVote = async () => {
        setShowConfirmation(false);
        setVoting(true);
        try {
          const gasEstimate = await contract.methods.vote(Number(selectedCandidate)).estimateGas({ from: account });
          await contract.methods.vote(Number(selectedCandidate)).send({
            from: account,
            gas: gasEstimate
          });
          const results = await contract.methods.getResults().call();
          const formattedResults = results.map((candidate, index) => ({
            id: index.toString(),
            name: candidate.name,
            voteCount: Number(candidate.voteCount)
          }));
          setCandidates(formattedResults);
          setSelectedCandidate("");
        } catch (err) {
          console.error("Voting error:", err);
          setError(err.message);
        } finally {
          setVoting(false);
        }
      };
      const handleCancelVote = () => {
        setShowConfirmation(false);
      };
      reactExports.useEffect(() => {
        initializeWeb3();
        return () => {
          if (window.ethereum) {
            window.ethereum.removeListener("chainChanged", () => {
            });
          }
        };
      }, []);
      if (loading) {
        return /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center justify-center min-h-screen bg-gray-100", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500" }) });
      }
      const selectedCandidateData = candidates.find(
        (c) => c.id === selectedCandidate
      );
      return /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "min-h-screen bg-gray-100", children: [
        /* @__PURE__ */ jsxRuntimeExports.jsx("nav", { className: "bg-blue-600 shadow-lg", children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "max-w-7xl mx-auto px-4 sm:px-6 lg:px-8", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-between h-16", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-white text-xl font-semibold", children: "Elections" }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "flex items-center", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-sm text-white", children: [
            "Connected: ",
            account.slice(0, 6),
            "...",
            account.slice(-4)
          ] }) })
        ] }) }) }),
        /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "max-w-3xl mx-auto mt-8 p-6 bg-white rounded-lg shadow-xl", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h1", { className: "text-3xl font-bold mb-6 text-gray-800", children: "Voting DApp" }),
          error && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "mb-6 p-4 bg-red-100 border-l-4 border-red-500 text-red-700", children: /* @__PURE__ */ jsxRuntimeExports.jsx("p", { children: error }) }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "mb-8", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold mb-4 text-gray-700", children: "Select a Candidate" }),
            /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "space-y-4", children: candidates.map((candidate) => /* @__PURE__ */ jsxRuntimeExports.jsxs(
              "label",
              {
                className: `flex items-center p-4 rounded-lg border-2 cursor-pointer transition-all ${selectedCandidate === candidate.id ? "border-blue-500 bg-blue-50" : "border-gray-200 hover:border-blue-300"}`,
                children: [
                  /* @__PURE__ */ jsxRuntimeExports.jsx(
                    "input",
                    {
                      type: "radio",
                      name: "candidate",
                      value: candidate.id,
                      checked: selectedCandidate === candidate.id,
                      onChange: (e) => setSelectedCandidate(e.target.value),
                      className: "h-5 w-5 text-blue-600 focus:ring-blue-500"
                    }
                  ),
                  /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "ml-4 flex flex-1 justify-between items-center", children: [
                    /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "text-lg font-medium text-gray-900", children: candidate.name }),
                    /* @__PURE__ */ jsxRuntimeExports.jsxs("span", { className: "text-sm font-semibold text-gray-500", children: [
                      candidate.voteCount,
                      " votes"
                    ] })
                  ] })
                ]
              },
              candidate.id
            )) })
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsx(
            "button",
            {
              onClick: handleVoteClick,
              disabled: voting || !selectedCandidate,
              className: `w-full py-3 px-4 rounded-lg text-white font-medium text-lg transition-colors ${voting || !selectedCandidate ? "bg-gray-400 cursor-not-allowed" : "bg-blue-600 hover:bg-blue-700"}`,
              children: voting ? /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex items-center justify-center", children: [
                /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "animate-spin rounded-full h-5 w-5 border-t-2 border-b-2 border-white mr-3" }),
                "Confirming Vote..."
              ] }) : "Vote"
            }
          )
        ] }),
        showConfirmation && /* @__PURE__ */ jsxRuntimeExports.jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50", children: /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "bg-white rounded-lg p-6 max-w-sm w-full", children: [
          /* @__PURE__ */ jsxRuntimeExports.jsx("h3", { className: "text-xl font-semibold mb-4 text-gray-800", children: "Confirm Your Vote" }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("p", { className: "text-gray-600 mb-6", children: [
            "Are you sure you want to vote for",
            " ",
            /* @__PURE__ */ jsxRuntimeExports.jsx("span", { className: "font-medium text-gray-900", children: selectedCandidateData == null ? void 0 : selectedCandidateData.name }),
            "?"
          ] }),
          /* @__PURE__ */ jsxRuntimeExports.jsxs("div", { className: "flex space-x-4", children: [
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: handleCancelVote,
                className: "flex-1 py-2 px-4 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors",
                children: "Cancel"
              }
            ),
            /* @__PURE__ */ jsxRuntimeExports.jsx(
              "button",
              {
                onClick: handleConfirmVote,
                className: "flex-1 py-2 px-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors",
                children: "Confirm Vote"
              }
            )
          ] })
        ] }) })
      ] });
    };
    function App() {
      return /* @__PURE__ */ jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment, { children: /* @__PURE__ */ jsxRuntimeExports.jsx("div", { children: /* @__PURE__ */ jsxRuntimeExports.jsx(VotingDApp, {}) }) });
    }
    createRoot(document.getElementById("root")).render(
      /* @__PURE__ */ jsxRuntimeExports.jsx(reactExports.StrictMode, { children: /* @__PURE__ */ jsxRuntimeExports.jsx(App, {}) })
    );
  }
});
export default require_index_001();
